# //  Questa Sim-64
# //  Version 10.7c linux_x86_64 Aug 17 2018
# //
# //  Copyright 1991-2018 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  QuestaSim and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# Loading project lab3_do
# Compile of ALU.vp was successful.
# Compile of Arith_ALU.vp was successful.
# Compile of data_defs.v was successful.
# Compile of Driver.sv was successful.
# Compile of DriverBase.sv was successful.
# Compile of Ex_Preproc.vp was successful.
# Compile of Execute.if.sv was successful.
# Compile of Execute.tb.sv was successful with warnings.
# Compile of Execute.test_top.sv was successful.
# Compile of Generator.sv was successful.
# Compile of OutputPacket.sv was successful.
# Compile of Packet.sv was successful.
# Compile of Receiver.sv was successful.
# Compile of ReceiverBase.sv was successful.
# Compile of Scoreboard.sv was successful with warnings.
# Compile of Shift_ALU.vp was successful.
# Compile of Top.v was successful.
# 17 compiles, 0 failed with no errors.
vsim -voptargs=+acc work.Execute_test_top
# vsim -voptargs="+acc" work.Execute_test_top 
# Start time: 11:40:02 on Nov 16,2024
# ** Note: (vsim-8009) Loading existing optimized design _opt
# Loading sv_std.std
# Loading work.Execute_test_top(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
# Loading work.Top(fast)
# Loading work.Ex_Preproc(fast)
# Loading work.ALU(fast)
# Loading work.Arith_ALU(fast)
# Loading work.Shift_ALU(fast)
# Loading work.Execute_tb_sv_unit(fast)
# Loading work.Execute_test(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
add wave -position insertpoint sim:/Execute_test_top/top_io/*
run -all
#                    0ns:  [RESET]  Design Reset Start
#                   45ns:  [RESET]  Design Reset End
# [                  45ns] Start test case for : arith_logic
#                   45ns:  [GENERATOR] Generator Started
#                   45ns:  [DRIVER] Driver Started
#                   45[DRIVER] DRIVER Forking of process is finished
#                   45[SCOREBOARD] Scoreboard Started
#                   45[SCOREBOARD] Receiver Mailbox contents =           0
#                   45[SCOREBOARD] Forking of Process Finished
#                   45[RECEIVER]  RECEIVER STARTED
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
#                   45ns:  [GENERATOR] Generation Finished Creating         100 Packets  
#                   45[DRIVER] Sending in new packet BEGIN
#                   45ns:  [DRIVER] Sending Payload Begin
#                   45ns:  [DRIVER] Sending in new packet END
#                   45ns:  [DRIVER] Number of packets sent =           1
#                   45ns:  [DRIVER] The number of Packets in the Generator Mailbox =          99
#                   55[RECEIVER] Forking of Process Finished
#                   55[DRIVER] Sending in new packet BEGIN
#                   55ns:  [DRIVER] Sending Payload Begin
#                   55ns:  [DRIVER] Sending in new packet END
#                   55ns:  [DRIVER] Number of packets sent =           2
#                   55ns:  [DRIVER] The number of Packets in the Generator Mailbox =          98
#                   65[RECEIVER]  Getting Payload
#                   65[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001eed
#                   65[RECEIVER]  Payload Obtained
#                   65[DRIVER] Sending in new packet BEGIN
#                   65ns:  [DRIVER] Sending Payload Begin
#                   65ns:  [DRIVER] Sending in new packet END
#                   65ns:  [DRIVER] Number of packets sent =           3
#                   65ns:  [DRIVER] The number of Packets in the Generator Mailbox =          97
#                   65[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   65ns: [CHECKER] Checker Start
# 
# 
#                   65ns:   [CHECKER] Pkt Contents: src1 = 000020b0, src2 = 00001eed, imm = 0000429c, 
#                   65ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                   65ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001eed    mem_GOL = 00001eed
# 
#                   65ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   65ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   65ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   65ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   65ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   65ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   65______Cp0____opselect_chk:      000
#                   65______Cp0____operation_chk:     000
#                   65______Cp0____enable_arith_chk:  0
#                   65______Cp0____enable_shift_chk:  0
#                   65______Cp0____pkt_sent.enable:   0
#                   65______Cp23____
#                   65ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   75[RECEIVER]  Getting Payload
#                   75[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d866
#                   75[RECEIVER]  Payload Obtained
#                   75[DRIVER] Sending in new packet BEGIN
#                   75ns:  [DRIVER] Sending Payload Begin
#                   75ns:  [DRIVER] Sending in new packet END
#                   75ns:  [DRIVER] Number of packets sent =           4
#                   75ns:  [DRIVER] The number of Packets in the Generator Mailbox =          96
#                   75[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   75ns: [CHECKER] Checker Start
# 
# 
#                   75ns:   [CHECKER] Pkt Contents: src1 = 0000efe1, src2 = 0000d866, imm = 0000d1e4, 
#                   75ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                   75ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d866    mem_GOL = 0000d866
# 
#                   75ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   75ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   75ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   75ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   75ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   75ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   75______Cp0____opselect_chk:      000
#                   75______Cp0____operation_chk:     000
#                   75______Cp0____enable_arith_chk:  0
#                   75______Cp0____enable_shift_chk:  0
#                   75______Cp0____pkt_sent.enable:   0
#                   75______Cp23____
#                   75ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   85[RECEIVER]  Getting Payload
#                   85[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001dc0
#                   85[RECEIVER]  Payload Obtained
#                   85[DRIVER] Sending in new packet BEGIN
#                   85ns:  [DRIVER] Sending Payload Begin
#                   85ns:  [DRIVER] Sending in new packet END
#                   85ns:  [DRIVER] Number of packets sent =           5
#                   85ns:  [DRIVER] The number of Packets in the Generator Mailbox =          95
#                   85[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   85ns: [CHECKER] Checker Start
# 
# 
#                   85ns:   [CHECKER] Pkt Contents: src1 = 0000b08a, src2 = 00001dc0, imm = 00002342, 
#                   85ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                   85ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001dc0    mem_GOL = 00001dc0
# 
#                   85ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   85ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   85ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001dc0   & Golden Model = 00001dc0
# 
#                   85ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   85ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                   85ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   85ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   85ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                   85ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  00001dc0 
#                   85ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                   85______Cp0____opselect_chk:      001
#                   85______Cp0____operation_chk:     110
#                   85______Cp0____enable_arith_chk:  1
#                   85______Cp0____enable_shift_chk:  0
#                   85______Cp0____pkt_sent.enable:   1
#                   85______Cp7____
#                   85ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   95[RECEIVER]  Getting Payload
#                   95[RECEIVER]  Payload Contents:  Aluout = 0000ad4a mem_write_en = 1 mem_data_write_out = 0000726e
#                   95[RECEIVER]  Payload Obtained
#                   95[DRIVER] Sending in new packet BEGIN
#                   95ns:  [DRIVER] Sending Payload Begin
#                   95ns:  [DRIVER] Sending in new packet END
#                   95ns:  [DRIVER] Number of packets sent =           6
#                   95ns:  [DRIVER] The number of Packets in the Generator Mailbox =          94
#                   95[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   95ns: [CHECKER] Checker Start
# 
# 
#                   95ns:   [CHECKER] Pkt Contents: src1 = 00002ead, src2 = 0000726e, imm = 000087fe, 
#                   95ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                   95ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000726e    mem_GOL = 0000726e
# 
#                   95ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   95ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   95ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001dc0   & Golden Model = 00001dc0
# 
#                   95ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                   95ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                   95ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   95ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   95ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   95ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  00001dc0 
#                   95ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                   95______Cp0____opselect_chk:      001
#                   95______Cp0____operation_chk:     110
#                   95______Cp0____enable_arith_chk:  0
#                   95______Cp0____enable_shift_chk:  0
#                   95______Cp0____pkt_sent.enable:   0
#                   95______Cp23____
#                   95ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ad4a   & Golden Model = 00000ad4a
# 
#                  105[RECEIVER]  Getting Payload
#                  105[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000c3de
#                  105[RECEIVER]  Payload Obtained
#                  105[DRIVER] Sending in new packet BEGIN
#                  105ns:  [DRIVER] Sending Payload Begin
#                  105ns:  [DRIVER] Sending in new packet END
#                  105ns:  [DRIVER] Number of packets sent =           7
#                  105ns:  [DRIVER] The number of Packets in the Generator Mailbox =          93
#                  105[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  105ns: [CHECKER] Checker Start
# 
# 
#                  105ns:   [CHECKER] Pkt Contents: src1 = 00009c52, src2 = 0000c3de, imm = 00000742, 
#                  105ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  105ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000c3de    mem_GOL = 0000c3de
# 
#                  105ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  105ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  105ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000c3de   & Golden Model = 0000c3de
# 
#                  105ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  105ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  105ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  105ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  0000c3de 
#                  105ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  105______Cp0____opselect_chk:      001
#                  105______Cp0____operation_chk:     000
#                  105______Cp0____enable_arith_chk:  1
#                  105______Cp0____enable_shift_chk:  0
#                  105______Cp0____pkt_sent.enable:   1
#                  105______Cp1____
#                  105ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ad4a
# 
#                  115[RECEIVER]  Getting Payload
#                  115[RECEIVER]  Payload Contents:  Aluout = 00016030 mem_write_en = 1 mem_data_write_out = 00005c33
#                  115[RECEIVER]  Payload Obtained
#                  115[DRIVER] Sending in new packet BEGIN
#                  115ns:  [DRIVER] Sending Payload Begin
#                  115ns:  [DRIVER] Sending in new packet END
#                  115ns:  [DRIVER] Number of packets sent =           8
#                  115ns:  [DRIVER] The number of Packets in the Generator Mailbox =          92
#                  115[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  115ns: [CHECKER] Checker Start
# 
# 
#                  115ns:   [CHECKER] Pkt Contents: src1 = 0000c7ba, src2 = 00005c33, imm = 000035f9, 
#                  115ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  115ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005c33    mem_GOL = 00005c33
# 
#                  115ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  115ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  115ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000c3de   & Golden Model = 0000c3de
# 
#                  115ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  115ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  115ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  115ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  115ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  0000c3de 
#                  115ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  115______Cp0____opselect_chk:      001
#                  115______Cp0____operation_chk:     000
#                  115______Cp0____enable_arith_chk:  0
#                  115______Cp0____enable_shift_chk:  0
#                  115______Cp0____pkt_sent.enable:   0
#                  115______Cp23____
#                  115ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00016030   & Golden Model = 000016030
# 
#                  125[RECEIVER]  Getting Payload
#                  125[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d01b
#                  125[RECEIVER]  Payload Obtained
#                  125[DRIVER] Sending in new packet BEGIN
#                  125ns:  [DRIVER] Sending Payload Begin
#                  125ns:  [DRIVER] Sending in new packet END
#                  125ns:  [DRIVER] Number of packets sent =           9
#                  125ns:  [DRIVER] The number of Packets in the Generator Mailbox =          91
#                  125[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  125ns: [CHECKER] Checker Start
# 
# 
#                  125ns:   [CHECKER] Pkt Contents: src1 = 0000f92e, src2 = 0000d01b, imm = 000029f2, 
#                  125ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  125ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d01b    mem_GOL = 0000d01b
# 
#                  125ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  125ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f92e   & Golden Model = 0000f92e
# 
#                  125ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000029f2   & Golden Model = 000029f2
# 
#                  125ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  125ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  125ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  125ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  125ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  125ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f92e  000029f2 
#                  125ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  125______Cp0____opselect_chk:      001
#                  125______Cp0____operation_chk:     100
#                  125______Cp0____enable_arith_chk:  1
#                  125______Cp0____enable_shift_chk:  0
#                  125______Cp0____pkt_sent.enable:   1
#                  125______Cp5____
#                  125ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 000016030
# 
#                  135[RECEIVER]  Getting Payload
#                  135[RECEIVER]  Payload Contents:  Aluout = 00002922 mem_write_en = 1 mem_data_write_out = 0000e9ec
#                  135[RECEIVER]  Payload Obtained
#                  135[DRIVER] Sending in new packet BEGIN
#                  135ns:  [DRIVER] Sending Payload Begin
#                  135ns:  [DRIVER] Sending in new packet END
#                  135ns:  [DRIVER] Number of packets sent =          10
#                  135ns:  [DRIVER] The number of Packets in the Generator Mailbox =          90
#                  135[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  135ns: [CHECKER] Checker Start
# 
# 
#                  135ns:   [CHECKER] Pkt Contents: src1 = 00004170, src2 = 0000e9ec, imm = 000015ae, 
#                  135ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  135ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e9ec    mem_GOL = 0000e9ec
# 
#                  135ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  135ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004170   & Golden Model = 00004170
# 
#                  135ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000015ae   & Golden Model = 000015ae
# 
#                  135ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  135ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  135ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  135ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  135ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  135ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004170  000015ae 
#                  135ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  135______Cp0____opselect_chk:      001
#                  135______Cp0____operation_chk:     011
#                  135______Cp0____enable_arith_chk:  1
#                  135______Cp0____enable_shift_chk:  0
#                  135______Cp0____pkt_sent.enable:   1
#                  135______Cp4____
#                  135ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00002922   & Golden Model = 000002922
# 
#                  145[RECEIVER]  Getting Payload
#                  145[RECEIVER]  Payload Contents:  Aluout = ffffea51 mem_write_en = 1 mem_data_write_out = 0000ec65
#                  145[RECEIVER]  Payload Obtained
#                  145[DRIVER] Sending in new packet BEGIN
#                  145ns:  [DRIVER] Sending Payload Begin
#                  145ns:  [DRIVER] Sending in new packet END
#                  145ns:  [DRIVER] Number of packets sent =          11
#                  145ns:  [DRIVER] The number of Packets in the Generator Mailbox =          89
#                  145[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  145ns: [CHECKER] Checker Start
# 
# 
#                  145ns:   [CHECKER] Pkt Contents: src1 = 0000c030, src2 = 0000ec65, imm = 00007567, 
#                  145ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  145ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ec65    mem_GOL = 0000ec65
# 
#                  145ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  145ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c030   & Golden Model = 0000c030
# 
#                  145ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007567   & Golden Model = 00007567
# 
#                  145ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  145ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  145ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  145ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  145ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  145ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c030  00007567 
#                  145ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  145______Cp0____opselect_chk:      001
#                  145______Cp0____operation_chk:     100
#                  145______Cp0____enable_arith_chk:  1
#                  145______Cp0____enable_shift_chk:  0
#                  145______Cp0____pkt_sent.enable:   1
#                  145______Cp5____
#                  145ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffea51   & Golden Model = 1ffffea51
# 
#                  155[RECEIVER]  Getting Payload
#                  155[RECEIVER]  Payload Contents:  Aluout = 00004020 mem_write_en = 1 mem_data_write_out = 0000e400
#                  155[RECEIVER]  Payload Obtained
#                  155[DRIVER] Sending in new packet BEGIN
#                  155ns:  [DRIVER] Sending Payload Begin
#                  155ns:  [DRIVER] Sending in new packet END
#                  155ns:  [DRIVER] Number of packets sent =          12
#                  155ns:  [DRIVER] The number of Packets in the Generator Mailbox =          88
#                  155[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  155ns: [CHECKER] Checker Start
# 
# 
#                  155ns:   [CHECKER] Pkt Contents: src1 = 00000ef0, src2 = 0000e400, imm = 0000ba65, 
#                  155ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  155ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e400    mem_GOL = 0000e400
# 
#                  155ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  155ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000ef0   & Golden Model = 00000ef0
# 
#                  155ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ba65   & Golden Model = 0000ba65
# 
#                  155ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  155ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  155ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  155ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  155ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  155ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000ef0  0000ba65 
#                  155ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  155______Cp0____opselect_chk:      001
#                  155______Cp0____operation_chk:     111
#                  155______Cp0____enable_arith_chk:  1
#                  155______Cp0____enable_shift_chk:  0
#                  155______Cp0____pkt_sent.enable:   1
#                  155______Cp7____
#                  155ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00004020   & Golden Model = 000004020
# 
#                  165[RECEIVER]  Getting Payload
#                  165[RECEIVER]  Payload Contents:  Aluout = ba650000 mem_write_en = 1 mem_data_write_out = 00002f1f
#                  165[RECEIVER]  Payload Obtained
#                  165[DRIVER] Sending in new packet BEGIN
#                  165ns:  [DRIVER] Sending Payload Begin
#                  165ns:  [DRIVER] Sending in new packet END
#                  165ns:  [DRIVER] Number of packets sent =          13
#                  165ns:  [DRIVER] The number of Packets in the Generator Mailbox =          87
#                  165[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  165ns: [CHECKER] Checker Start
# 
# 
#                  165ns:   [CHECKER] Pkt Contents: src1 = 0000f1a2, src2 = 00002f1f, imm = 0000cbca, 
#                  165ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  165ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002f1f    mem_GOL = 00002f1f
# 
#                  165ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  165ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f1a2   & Golden Model = 0000f1a2
# 
#                  165ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000cbca   & Golden Model = 0000cbca
# 
#                  165ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  165ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  165ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  165ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  165ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  165ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  165ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  165ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f1a2  0000cbca 
#                  165ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  165______Cp0____opselect_chk:      001
#                  165______Cp0____operation_chk:     101
#                  165______Cp0____enable_arith_chk:  1
#                  165______Cp0____enable_shift_chk:  0
#                  165______Cp0____pkt_sent.enable:   1
#                  165______Cp6____
#                  165ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ba650000   & Golden Model = 0ba650000
# 
#                  175[RECEIVER]  Getting Payload
#                  175[RECEIVER]  Payload Contents:  Aluout = 0000fbea mem_write_en = 1 mem_data_write_out = 0000189a
#                  175[RECEIVER]  Payload Obtained
#                  175[DRIVER] Sending in new packet BEGIN
#                  175ns:  [DRIVER] Sending Payload Begin
#                  175ns:  [DRIVER] Sending in new packet END
#                  175ns:  [DRIVER] Number of packets sent =          14
#                  175ns:  [DRIVER] The number of Packets in the Generator Mailbox =          86
#                  175[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  175ns: [CHECKER] Checker Start
# 
# 
#                  175ns:   [CHECKER] Pkt Contents: src1 = 0000362e, src2 = 0000189a, imm = 0000888c, 
#                  175ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  175ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000189a    mem_GOL = 0000189a
# 
#                  175ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  175ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f1a2   & Golden Model = 0000f1a2
# 
#                  175ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000cbca   & Golden Model = 0000cbca
# 
#                  175ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  175ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  175ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  175ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  175ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  175ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  175ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  175ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f1a2  0000cbca 
#                  175ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  175______Cp0____opselect_chk:      001
#                  175______Cp0____operation_chk:     101
#                  175______Cp0____enable_arith_chk:  0
#                  175______Cp0____enable_shift_chk:  0
#                  175______Cp0____pkt_sent.enable:   0
#                  175______Cp23____
#                  175ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000fbea   & Golden Model = 00000fbea
# 
#                  185[RECEIVER]  Getting Payload
#                  185[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00003d82
#                  185[RECEIVER]  Payload Obtained
#                  185[DRIVER] Sending in new packet BEGIN
#                  185ns:  [DRIVER] Sending Payload Begin
#                  185ns:  [DRIVER] Sending in new packet END
#                  185ns:  [DRIVER] Number of packets sent =          15
#                  185ns:  [DRIVER] The number of Packets in the Generator Mailbox =          85
#                  185[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  185ns: [CHECKER] Checker Start
# 
# 
#                  185ns:   [CHECKER] Pkt Contents: src1 = 000085d3, src2 = 00003d82, imm = 00002a36, 
#                  185ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  185ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00003d82    mem_GOL = 00003d82
# 
#                  185ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  185ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000085d3   & Golden Model = 000085d3
# 
#                  185ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003d82   & Golden Model = 00003d82
# 
#                  185ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  185ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  185ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  185ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  185ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  185ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  185ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  185ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000085d3  00003d82 
#                  185ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  185______Cp0____opselect_chk:      001
#                  185______Cp0____operation_chk:     000
#                  185______Cp0____enable_arith_chk:  1
#                  185______Cp0____enable_shift_chk:  0
#                  185______Cp0____pkt_sent.enable:   1
#                  185______Cp1____
#                  185ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000fbea
# 
#                  195[RECEIVER]  Getting Payload
#                  195[RECEIVER]  Payload Contents:  Aluout = 0000c355 mem_write_en = 1 mem_data_write_out = 00000b75
#                  195[RECEIVER]  Payload Obtained
#                  195[DRIVER] Sending in new packet BEGIN
#                  195ns:  [DRIVER] Sending Payload Begin
#                  195ns:  [DRIVER] Sending in new packet END
#                  195ns:  [DRIVER] Number of packets sent =          16
#                  195ns:  [DRIVER] The number of Packets in the Generator Mailbox =          84
#                  195[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  195ns: [CHECKER] Checker Start
# 
# 
#                  195ns:   [CHECKER] Pkt Contents: src1 = 0000dd0c, src2 = 00000b75, imm = 00000f42, 
#                  195ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  195ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000b75    mem_GOL = 00000b75
# 
#                  195ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  195ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  195ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  195ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  195ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  195ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  195ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  195ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  195ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  195ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  195ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  195ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  195______Cp0____opselect_chk:      001
#                  195______Cp0____operation_chk:     011
#                  195______Cp0____enable_arith_chk:  1
#                  195______Cp0____enable_shift_chk:  0
#                  195______Cp0____pkt_sent.enable:   1
#                  195______Cp4____
#                  195ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c355   & Golden Model = 00000c355
# 
#                  205[RECEIVER]  Getting Payload
#                  205[RECEIVER]  Payload Contents:  Aluout = fffff48a mem_write_en = 1 mem_data_write_out = 0000be75
#                  205[RECEIVER]  Payload Obtained
#                  205[DRIVER] Sending in new packet BEGIN
#                  205ns:  [DRIVER] Sending Payload Begin
#                  205ns:  [DRIVER] Sending in new packet END
#                  205ns:  [DRIVER] Number of packets sent =          17
#                  205ns:  [DRIVER] The number of Packets in the Generator Mailbox =          83
#                  205[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  205ns: [CHECKER] Checker Start
# 
# 
#                  205ns:   [CHECKER] Pkt Contents: src1 = 0000914a, src2 = 0000be75, imm = 00007a4d, 
#                  205ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  205ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000be75    mem_GOL = 0000be75
# 
#                  205ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  205ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  205ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  205ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  205ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  205ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  205ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  205ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  205ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  205ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  205ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  205ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  205______Cp0____opselect_chk:      001
#                  205______Cp0____operation_chk:     011
#                  205______Cp0____enable_arith_chk:  0
#                  205______Cp0____enable_shift_chk:  0
#                  205______Cp0____pkt_sent.enable:   0
#                  205______Cp23____
#                  205ns:   [ASSERT_aluout] PASS ALUOUT: DUT = fffff48a   & Golden Model = 1fffff48a
# 
#                  215[RECEIVER]  Getting Payload
#                  215[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e291
#                  215[RECEIVER]  Payload Obtained
#                  215[DRIVER] Sending in new packet BEGIN
#                  215ns:  [DRIVER] Sending Payload Begin
#                  215ns:  [DRIVER] Sending in new packet END
#                  215ns:  [DRIVER] Number of packets sent =          18
#                  215ns:  [DRIVER] The number of Packets in the Generator Mailbox =          82
#                  215[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  215ns: [CHECKER] Checker Start
# 
# 
#                  215ns:   [CHECKER] Pkt Contents: src1 = 00001c75, src2 = 0000e291, imm = 0000e28c, 
#                  215ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  215ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e291    mem_GOL = 0000e291
# 
#                  215ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  215ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  215ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  215ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  215ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  215ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  215ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  215ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  215ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  215ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  215ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  215ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  215______Cp0____opselect_chk:      001
#                  215______Cp0____operation_chk:     011
#                  215______Cp0____enable_arith_chk:  0
#                  215______Cp0____enable_shift_chk:  0
#                  215______Cp0____pkt_sent.enable:   0
#                  215______Cp23____
#                  215ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  225[RECEIVER]  Getting Payload
#                  225[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00006408
#                  225[RECEIVER]  Payload Obtained
#                  225[DRIVER] Sending in new packet BEGIN
#                  225ns:  [DRIVER] Sending Payload Begin
#                  225ns:  [DRIVER] Sending in new packet END
#                  225ns:  [DRIVER] Number of packets sent =          19
#                  225ns:  [DRIVER] The number of Packets in the Generator Mailbox =          81
#                  225[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  225ns: [CHECKER] Checker Start
# 
# 
#                  225ns:   [CHECKER] Pkt Contents: src1 = 0000b7fd, src2 = 00006408, imm = 00006715, 
#                  225ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  225ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006408    mem_GOL = 00006408
# 
#                  225ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  225ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  225ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  225ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  225ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  225ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  225ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  225ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  225ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  225ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  225ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  225ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  225______Cp0____opselect_chk:      001
#                  225______Cp0____operation_chk:     011
#                  225______Cp0____enable_arith_chk:  0
#                  225______Cp0____enable_shift_chk:  0
#                  225______Cp0____pkt_sent.enable:   0
#                  225______Cp23____
#                  225ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  235[RECEIVER]  Getting Payload
#                  235[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000969f
#                  235[RECEIVER]  Payload Obtained
#                  235[DRIVER] Sending in new packet BEGIN
#                  235ns:  [DRIVER] Sending Payload Begin
#                  235ns:  [DRIVER] Sending in new packet END
#                  235ns:  [DRIVER] Number of packets sent =          20
#                  235ns:  [DRIVER] The number of Packets in the Generator Mailbox =          80
#                  235[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  235ns: [CHECKER] Checker Start
# 
# 
#                  235ns:   [CHECKER] Pkt Contents: src1 = 00009c58, src2 = 0000969f, imm = 00008e0c, 
#                  235ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  235ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000969f    mem_GOL = 0000969f
# 
#                  235ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  235ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c58   & Golden Model = 00009c58
# 
#                  235ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008e0c   & Golden Model = 00008e0c
# 
#                  235ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  235ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  235ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  235ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  235ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  235ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  235ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  235ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c58  00008e0c 
#                  235ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  235______Cp0____opselect_chk:      001
#                  235______Cp0____operation_chk:     011
#                  235______Cp0____enable_arith_chk:  1
#                  235______Cp0____enable_shift_chk:  0
#                  235______Cp0____pkt_sent.enable:   1
#                  235______Cp4____
#                  235ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  245[RECEIVER]  Getting Payload
#                  245[RECEIVER]  Payload Contents:  Aluout = ffff71f3 mem_write_en = 1 mem_data_write_out = 0000498a
#                  245[RECEIVER]  Payload Obtained
#                  245[DRIVER] Sending in new packet BEGIN
#                  245ns:  [DRIVER] Sending Payload Begin
#                  245ns:  [DRIVER] Sending in new packet END
#                  245ns:  [DRIVER] Number of packets sent =          21
#                  245ns:  [DRIVER] The number of Packets in the Generator Mailbox =          79
#                  245[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  245ns: [CHECKER] Checker Start
# 
# 
#                  245ns:   [CHECKER] Pkt Contents: src1 = 0000658f, src2 = 0000498a, imm = 0000390b, 
#                  245ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  245ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000498a    mem_GOL = 0000498a
# 
#                  245ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  245ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000658f   & Golden Model = 0000658f
# 
#                  245ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000390b   & Golden Model = 0000390b
# 
#                  245ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  245ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  245ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  245ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  245ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  245ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  245ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  245ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000658f  0000390b 
#                  245ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  245______Cp0____opselect_chk:      001
#                  245______Cp0____operation_chk:     101
#                  245______Cp0____enable_arith_chk:  1
#                  245______Cp0____enable_shift_chk:  0
#                  245______Cp0____pkt_sent.enable:   1
#                  245______Cp6____
#                  245ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff71f3   & Golden Model = 1ffff71f3
# 
#                  255[RECEIVER]  Getting Payload
#                  255[RECEIVER]  Payload Contents:  Aluout = 00007d8f mem_write_en = 1 mem_data_write_out = 0000daf8
#                  255[RECEIVER]  Payload Obtained
#                  255[DRIVER] Sending in new packet BEGIN
#                  255ns:  [DRIVER] Sending Payload Begin
#                  255ns:  [DRIVER] Sending in new packet END
#                  255ns:  [DRIVER] Number of packets sent =          22
#                  255ns:  [DRIVER] The number of Packets in the Generator Mailbox =          78
#                  255[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  255ns: [CHECKER] Checker Start
# 
# 
#                  255ns:   [CHECKER] Pkt Contents: src1 = 000000e2, src2 = 0000daf8, imm = 00005c36, 
#                  255ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  255ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000daf8    mem_GOL = 0000daf8
# 
#                  255ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  255ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000000e2   & Golden Model = 000000e2
# 
#                  255ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005c36   & Golden Model = 00005c36
# 
#                  255ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  255ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  255ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  255ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  255ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  255ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  255ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  255ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000000e2  00005c36 
#                  255ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  255______Cp0____opselect_chk:      001
#                  255______Cp0____operation_chk:     010
#                  255______Cp0____enable_arith_chk:  1
#                  255______Cp0____enable_shift_chk:  0
#                  255______Cp0____pkt_sent.enable:   1
#                  255______Cp3____
#                  255ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00007d8f   & Golden Model = 000007d8f
# 
#                  265[RECEIVER]  Getting Payload
#                  265[RECEIVER]  Payload Contents:  Aluout = ffffa4ac mem_write_en = 1 mem_data_write_out = 0000ae45
#                  265[RECEIVER]  Payload Obtained
#                  265[DRIVER] Sending in new packet BEGIN
#                  265ns:  [DRIVER] Sending Payload Begin
#                  265ns:  [DRIVER] Sending in new packet END
#                  265ns:  [DRIVER] Number of packets sent =          23
#                  265ns:  [DRIVER] The number of Packets in the Generator Mailbox =          77
#                  265[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  265ns: [CHECKER] Checker Start
# 
# 
#                  265ns:   [CHECKER] Pkt Contents: src1 = 00009d08, src2 = 0000ae45, imm = 00007769, 
#                  265ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  265ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ae45    mem_GOL = 0000ae45
# 
#                  265ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  265ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009d08   & Golden Model = 00009d08
# 
#                  265ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007769   & Golden Model = 00007769
# 
#                  265ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  265ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  265ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  265ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  265ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  265ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  265ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  265ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009d08  00007769 
#                  265ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  265______Cp0____opselect_chk:      001
#                  265______Cp0____operation_chk:     100
#                  265______Cp0____enable_arith_chk:  1
#                  265______Cp0____enable_shift_chk:  0
#                  265______Cp0____pkt_sent.enable:   1
#                  265______Cp5____
#                  265ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffa4ac   & Golden Model = 1ffffa4ac
# 
#                  275[RECEIVER]  Getting Payload
#                  275[RECEIVER]  Payload Contents:  Aluout = 00001508 mem_write_en = 1 mem_data_write_out = 00009c7d
#                  275[RECEIVER]  Payload Obtained
#                  275[DRIVER] Sending in new packet BEGIN
#                  275ns:  [DRIVER] Sending Payload Begin
#                  275ns:  [DRIVER] Sending in new packet END
#                  275ns:  [DRIVER] Number of packets sent =          24
#                  275ns:  [DRIVER] The number of Packets in the Generator Mailbox =          76
#                  275[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  275ns: [CHECKER] Checker Start
# 
# 
#                  275ns:   [CHECKER] Pkt Contents: src1 = 00007b70, src2 = 00009c7d, imm = 000018f5, 
#                  275ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  275ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009c7d    mem_GOL = 00009c7d
# 
#                  275ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  275ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00007b70   & Golden Model = 00007b70
# 
#                  275ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000018f5   & Golden Model = 000018f5
# 
#                  275ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  275ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  275ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  275ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  275ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00007b70  000018f5 
#                  275ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  275______Cp0____opselect_chk:      001
#                  275______Cp0____operation_chk:     001
#                  275______Cp0____enable_arith_chk:  1
#                  275______Cp0____enable_shift_chk:  0
#                  275______Cp0____pkt_sent.enable:   1
#                  275
#                  275______Cp2____
#                  275ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00001508   & Golden Model = 000001508
# 
#                  285[RECEIVER]  Getting Payload
#                  285[RECEIVER]  Payload Contents:  Aluout = ffff9465 mem_write_en = 1 mem_data_write_out = 00004308
#                  285[RECEIVER]  Payload Obtained
#                  285[DRIVER] Sending in new packet BEGIN
#                  285ns:  [DRIVER] Sending Payload Begin
#                  285ns:  [DRIVER] Sending in new packet END
#                  285ns:  [DRIVER] Number of packets sent =          25
#                  285ns:  [DRIVER] The number of Packets in the Generator Mailbox =          75
#                  285[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  285ns: [CHECKER] Checker Start
# 
# 
#                  285ns:   [CHECKER] Pkt Contents: src1 = 0000c243, src2 = 00004308, imm = 0000fa80, 
#                  285ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  285ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004308    mem_GOL = 00004308
# 
#                  285ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  285ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c243   & Golden Model = 0000c243
# 
#                  285ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004308   & Golden Model = 00004308
# 
#                  285ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  285ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  285ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  285ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  285ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  285ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  285ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  285ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c243  00004308 
#                  285ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  285______Cp0____opselect_chk:      001
#                  285______Cp0____operation_chk:     000
#                  285______Cp0____enable_arith_chk:  1
#                  285______Cp0____enable_shift_chk:  0
#                  285______Cp0____pkt_sent.enable:   1
#                  285______Cp1____
#                  285ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffff9465   & Golden Model = 000009465
# 
#                  295[RECEIVER]  Getting Payload
#                  295[RECEIVER]  Payload Contents:  Aluout = 0001054b mem_write_en = 1 mem_data_write_out = 000013c8
#                  295[RECEIVER]  Payload Obtained
#                  295[DRIVER] Sending in new packet BEGIN
#                  295ns:  [DRIVER] Sending Payload Begin
#                  295ns:  [DRIVER] Sending in new packet END
#                  295ns:  [DRIVER] Number of packets sent =          26
#                  295ns:  [DRIVER] The number of Packets in the Generator Mailbox =          74
#                  295[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  295ns: [CHECKER] Checker Start
# 
# 
#                  295ns:   [CHECKER] Pkt Contents: src1 = 00005af8, src2 = 000013c8, imm = 00002878, 
#                  295ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  295ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000013c8    mem_GOL = 000013c8
# 
#                  295ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  295ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00005af8   & Golden Model = 00005af8
# 
#                  295ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002878   & Golden Model = 00002878
# 
#                  295ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  295ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  295ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  295ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  295ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  295ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  295ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  295ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00005af8  00002878 
#                  295ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  295______Cp0____opselect_chk:      001
#                  295______Cp0____operation_chk:     111
#                  295______Cp0____enable_arith_chk:  1
#                  295______Cp0____enable_shift_chk:  0
#                  295______Cp0____pkt_sent.enable:   1
#                  295______Cp7____
#                  295ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0001054b   & Golden Model = 00001054b
# 
#                  305[RECEIVER]  Getting Payload
#                  305[RECEIVER]  Payload Contents:  Aluout = 28780000 mem_write_en = 1 mem_data_write_out = 000011dd
#                  305[RECEIVER]  Payload Obtained
#                  305[DRIVER] Sending in new packet BEGIN
#                  305ns:  [DRIVER] Sending Payload Begin
#                  305ns:  [DRIVER] Sending in new packet END
#                  305ns:  [DRIVER] Number of packets sent =          27
#                  305ns:  [DRIVER] The number of Packets in the Generator Mailbox =          73
#                  305[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  305ns: [CHECKER] Checker Start
# 
# 
#                  305ns:   [CHECKER] Pkt Contents: src1 = 00004700, src2 = 000011dd, imm = 00005bbc, 
#                  305ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  305ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000011dd    mem_GOL = 000011dd
# 
#                  305ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  305ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00005af8   & Golden Model = 00005af8
# 
#                  305ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002878   & Golden Model = 00002878
# 
#                  305ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  305ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  305ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  305ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  305ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  305ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  305ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  305ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00005af8  00002878 
#                  305ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  305______Cp0____opselect_chk:      001
#                  305______Cp0____operation_chk:     111
#                  305______Cp0____enable_arith_chk:  0
#                  305______Cp0____enable_shift_chk:  0
#                  305______Cp0____pkt_sent.enable:   0
#                  305______Cp23____
#                  305ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 28780000   & Golden Model = 028780000
# 
#                  315[RECEIVER]  Getting Payload
#                  315[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000af9a
#                  315[RECEIVER]  Payload Obtained
#                  315[DRIVER] Sending in new packet BEGIN
#                  315ns:  [DRIVER] Sending Payload Begin
#                  315ns:  [DRIVER] Sending in new packet END
#                  315ns:  [DRIVER] Number of packets sent =          28
#                  315ns:  [DRIVER] The number of Packets in the Generator Mailbox =          72
#                  315[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  315ns: [CHECKER] Checker Start
# 
# 
#                  315ns:   [CHECKER] Pkt Contents: src1 = 0000a498, src2 = 0000af9a, imm = 0000c7a9, 
#                  315ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  315ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000af9a    mem_GOL = 0000af9a
# 
#                  315ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  315ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a498   & Golden Model = 0000a498
# 
#                  315ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000af9a   & Golden Model = 0000af9a
# 
#                  315ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  315ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  315ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  315ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  315ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  315ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  315ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  315ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a498  0000af9a 
#                  315ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  315______Cp0____opselect_chk:      001
#                  315______Cp0____operation_chk:     101
#                  315______Cp0____enable_arith_chk:  1
#                  315______Cp0____enable_shift_chk:  0
#                  315______Cp0____pkt_sent.enable:   1
#                  315______Cp6____
#                  315ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 028780000
# 
#                  325[RECEIVER]  Getting Payload
#                  325[RECEIVER]  Payload Contents:  Aluout = 0000af9a mem_write_en = 1 mem_data_write_out = 000098ba
#                  325[RECEIVER]  Payload Obtained
#                  325[DRIVER] Sending in new packet BEGIN
#                  325ns:  [DRIVER] Sending Payload Begin
#                  325ns:  [DRIVER] Sending in new packet END
#                  325ns:  [DRIVER] Number of packets sent =          29
#                  325ns:  [DRIVER] The number of Packets in the Generator Mailbox =          71
#                  325[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  325ns: [CHECKER] Checker Start
# 
# 
#                  325ns:   [CHECKER] Pkt Contents: src1 = 0000017e, src2 = 000098ba, imm = 00008b9e, 
#                  325ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  325ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000098ba    mem_GOL = 000098ba
# 
#                  325ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  325ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  325ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  325ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  325ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  325ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  325ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  325ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  325ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  325ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  325ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  325ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  325______Cp0____opselect_chk:      001
#                  325______Cp0____operation_chk:     010
#                  325______Cp0____enable_arith_chk:  1
#                  325______Cp0____enable_shift_chk:  0
#                  325______Cp0____pkt_sent.enable:   1
#                  325______Cp3____
#                  325ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000af9a   & Golden Model = 00000af9a
# 
#                  335[RECEIVER]  Getting Payload
#                  335[RECEIVER]  Payload Contents:  Aluout = ffff75e0 mem_write_en = 1 mem_data_write_out = 00004326
#                  335[RECEIVER]  Payload Obtained
#                  335[DRIVER] Sending in new packet BEGIN
#                  335ns:  [DRIVER] Sending Payload Begin
#                  335ns:  [DRIVER] Sending in new packet END
#                  335ns:  [DRIVER] Number of packets sent =          30
#                  335ns:  [DRIVER] The number of Packets in the Generator Mailbox =          70
#                  335[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  335ns: [CHECKER] Checker Start
# 
# 
#                  335ns:   [CHECKER] Pkt Contents: src1 = 0000275b, src2 = 00004326, imm = 0000e5c6, 
#                  335ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  335ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004326    mem_GOL = 00004326
# 
#                  335ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  335ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  335ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  335ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  335ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  335ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  335ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  335ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  335ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  335ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  335ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  335ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  335______Cp0____opselect_chk:      001
#                  335______Cp0____operation_chk:     010
#                  335______Cp0____enable_arith_chk:  0
#                  335______Cp0____enable_shift_chk:  0
#                  335______Cp0____pkt_sent.enable:   0
#                  335______Cp23____
#                  335ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff75e0   & Golden Model = 1ffff75e0
# 
#                  345[RECEIVER]  Getting Payload
#                  345[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005e1a
#                  345[RECEIVER]  Payload Obtained
#                  345[DRIVER] Sending in new packet BEGIN
#                  345ns:  [DRIVER] Sending Payload Begin
#                  345ns:  [DRIVER] Sending in new packet END
#                  345ns:  [DRIVER] Number of packets sent =          31
#                  345ns:  [DRIVER] The number of Packets in the Generator Mailbox =          69
#                  345[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  345ns: [CHECKER] Checker Start
# 
# 
#                  345ns:   [CHECKER] Pkt Contents: src1 = 000052ac, src2 = 00005e1a, imm = 000041bf, 
#                  345ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  345ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005e1a    mem_GOL = 00005e1a
# 
#                  345ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  345ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  345ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  345ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  345ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  345ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  345ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  345ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  345ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  345ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  345ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  345ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  345______Cp0____opselect_chk:      001
#                  345______Cp0____operation_chk:     010
#                  345______Cp0____enable_arith_chk:  0
#                  345______Cp0____enable_shift_chk:  0
#                  345______Cp0____pkt_sent.enable:   0
#                  345______Cp23____
#                  345ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff75e0
# 
#                  355[RECEIVER]  Getting Payload
#                  355[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000a093
#                  355[RECEIVER]  Payload Obtained
#                  355[DRIVER] Sending in new packet BEGIN
#                  355ns:  [DRIVER] Sending Payload Begin
#                  355ns:  [DRIVER] Sending in new packet END
#                  355ns:  [DRIVER] Number of packets sent =          32
#                  355ns:  [DRIVER] The number of Packets in the Generator Mailbox =          68
#                  355[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  355ns: [CHECKER] Checker Start
# 
# 
#                  355ns:   [CHECKER] Pkt Contents: src1 = 000019d7, src2 = 0000a093, imm = 0000d3b4, 
#                  355ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  355ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000a093    mem_GOL = 0000a093
# 
#                  355ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  355ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000019d7   & Golden Model = 000019d7
# 
#                  355ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a093   & Golden Model = 0000a093
# 
#                  355ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  355ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  355ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  355ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  355ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000019d7  0000a093 
#                  355ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  355______Cp0____opselect_chk:      001
#                  355______Cp0____operation_chk:     001
#                  355______Cp0____enable_arith_chk:  1
#                  355______Cp0____enable_shift_chk:  0
#                  355______Cp0____pkt_sent.enable:   1
#                  355
#                  355______Cp2____
#                  355ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff75e0
# 
#                  365[RECEIVER]  Getting Payload
#                  365[RECEIVER]  Payload Contents:  Aluout = ffffba6a mem_write_en = 1 mem_data_write_out = 0000b226
#                  365[RECEIVER]  Payload Obtained
#                  365[DRIVER] Sending in new packet BEGIN
#                  365ns:  [DRIVER] Sending Payload Begin
#                  365ns:  [DRIVER] Sending in new packet END
#                  365ns:  [DRIVER] Number of packets sent =          33
#                  365ns:  [DRIVER] The number of Packets in the Generator Mailbox =          67
#                  365[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  365ns: [CHECKER] Checker Start
# 
# 
#                  365ns:   [CHECKER] Pkt Contents: src1 = 000035b0, src2 = 0000b226, imm = 0000b9a7, 
#                  365ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  365ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b226    mem_GOL = 0000b226
# 
#                  365ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  365ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000019d7   & Golden Model = 000019d7
# 
#                  365ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a093   & Golden Model = 0000a093
# 
#                  365ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  365ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  365ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  365ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  365ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  365ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  365ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  365ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000019d7  0000a093 
#                  365ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  365______Cp0____opselect_chk:      001
#                  365______Cp0____operation_chk:     001
#                  365______Cp0____enable_arith_chk:  0
#                  365______Cp0____enable_shift_chk:  0
#                  365______Cp0____pkt_sent.enable:   0
#                  365______Cp23____
#                  365ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffba6a   & Golden Model = 00000ba6a
# 
#                  375[RECEIVER]  Getting Payload
#                  375[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002d4b
#                  375[RECEIVER]  Payload Obtained
#                  375[DRIVER] Sending in new packet BEGIN
#                  375ns:  [DRIVER] Sending Payload Begin
#                  375ns:  [DRIVER] Sending in new packet END
#                  375ns:  [DRIVER] Number of packets sent =          34
#                  375ns:  [DRIVER] The number of Packets in the Generator Mailbox =          66
#                  375[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  375ns: [CHECKER] Checker Start
# 
# 
#                  375ns:   [CHECKER] Pkt Contents: src1 = 00008b8b, src2 = 00002d4b, imm = 000084b2, 
#                  375ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  375ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002d4b    mem_GOL = 00002d4b
# 
#                  375ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  375ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00008b8b   & Golden Model = 00008b8b
# 
#                  375ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002d4b   & Golden Model = 00002d4b
# 
#                  375ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  375ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  375ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  375ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  375ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  375ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  375ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  375ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00008b8b  00002d4b 
#                  375ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  375______Cp0____opselect_chk:      001
#                  375______Cp0____operation_chk:     100
#                  375______Cp0____enable_arith_chk:  1
#                  375______Cp0____enable_shift_chk:  0
#                  375______Cp0____pkt_sent.enable:   1
#                  375______Cp5____
#                  375ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ba6a
# 
#                  385[RECEIVER]  Getting Payload
#                  385[RECEIVER]  Payload Contents:  Aluout = 0000090b mem_write_en = 1 mem_data_write_out = 0000bfe4
#                  385[RECEIVER]  Payload Obtained
#                  385[DRIVER] Sending in new packet BEGIN
#                  385ns:  [DRIVER] Sending Payload Begin
#                  385ns:  [DRIVER] Sending in new packet END
#                  385ns:  [DRIVER] Number of packets sent =          35
#                  385ns:  [DRIVER] The number of Packets in the Generator Mailbox =          65
#                  385[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  385ns: [CHECKER] Checker Start
# 
# 
#                  385ns:   [CHECKER] Pkt Contents: src1 = 00007e81, src2 = 0000bfe4, imm = 0000092d, 
#                  385ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  385ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bfe4    mem_GOL = 0000bfe4
# 
#                  385ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  385ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00008b8b   & Golden Model = 00008b8b
# 
#                  385ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002d4b   & Golden Model = 00002d4b
# 
#                  385ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  385ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  385ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  385ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  385ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  385ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  385ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  385ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00008b8b  00002d4b 
#                  385ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  385______Cp0____opselect_chk:      001
#                  385______Cp0____operation_chk:     100
#                  385______Cp0____enable_arith_chk:  0
#                  385______Cp0____enable_shift_chk:  0
#                  385______Cp0____pkt_sent.enable:   0
#                  385______Cp23____
#                  385ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000090b   & Golden Model = 00000090b
# 
#                  395[RECEIVER]  Getting Payload
#                  395[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000c034
#                  395[RECEIVER]  Payload Obtained
#                  395[DRIVER] Sending in new packet BEGIN
#                  395ns:  [DRIVER] Sending Payload Begin
#                  395ns:  [DRIVER] Sending in new packet END
#                  395ns:  [DRIVER] Number of packets sent =          36
#                  395ns:  [DRIVER] The number of Packets in the Generator Mailbox =          64
#                  395[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  395ns: [CHECKER] Checker Start
# 
# 
#                  395ns:   [CHECKER] Pkt Contents: src1 = 0000f8e1, src2 = 0000c034, imm = 0000418c, 
#                  395ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  395ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000c034    mem_GOL = 0000c034
# 
#                  395ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  395ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8e1   & Golden Model = 0000f8e1
# 
#                  395ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000418c   & Golden Model = 0000418c
# 
#                  395ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  395ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  395ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  395ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  395ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  395ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  395ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  395ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8e1  0000418c 
#                  395ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  395______Cp0____opselect_chk:      001
#                  395______Cp0____operation_chk:     111
#                  395______Cp0____enable_arith_chk:  1
#                  395______Cp0____enable_shift_chk:  0
#                  395______Cp0____pkt_sent.enable:   1
#                  395______Cp7____
#                  395ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000090b
# 
#                  405[RECEIVER]  Getting Payload
#                  405[RECEIVER]  Payload Contents:  Aluout = 418c0000 mem_write_en = 1 mem_data_write_out = 00000e42
#                  405[RECEIVER]  Payload Obtained
#                  405[DRIVER] Sending in new packet BEGIN
#                  405ns:  [DRIVER] Sending Payload Begin
#                  405ns:  [DRIVER] Sending in new packet END
#                  405ns:  [DRIVER] Number of packets sent =          37
#                  405ns:  [DRIVER] The number of Packets in the Generator Mailbox =          63
#                  405[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  405ns: [CHECKER] Checker Start
# 
# 
#                  405ns:   [CHECKER] Pkt Contents: src1 = 00002e04, src2 = 00000e42, imm = 0000dc6d, 
#                  405ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  405ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000e42    mem_GOL = 00000e42
# 
#                  405ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  405ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8e1   & Golden Model = 0000f8e1
# 
#                  405ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000418c   & Golden Model = 0000418c
# 
#                  405ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  405ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  405ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  405ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  405ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  405ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  405ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  405ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8e1  0000418c 
#                  405ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  405______Cp0____opselect_chk:      001
#                  405______Cp0____operation_chk:     111
#                  405______Cp0____enable_arith_chk:  0
#                  405______Cp0____enable_shift_chk:  0
#                  405______Cp0____pkt_sent.enable:   0
#                  405______Cp23____
#                  405ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 418c0000   & Golden Model = 0418c0000
# 
#                  415[RECEIVER]  Getting Payload
#                  415[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00004b68
#                  415[RECEIVER]  Payload Obtained
#                  415[DRIVER] Sending in new packet BEGIN
#                  415ns:  [DRIVER] Sending Payload Begin
#                  415ns:  [DRIVER] Sending in new packet END
#                  415ns:  [DRIVER] Number of packets sent =          38
#                  415ns:  [DRIVER] The number of Packets in the Generator Mailbox =          62
#                  415[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  415ns: [CHECKER] Checker Start
# 
# 
#                  415ns:   [CHECKER] Pkt Contents: src1 = 00004de1, src2 = 00004b68, imm = 00003508, 
#                  415ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  415ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004b68    mem_GOL = 00004b68
# 
#                  415ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  415ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004de1   & Golden Model = 00004de1
# 
#                  415ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003508   & Golden Model = 00003508
# 
#                  415ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  415ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  415ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  415ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  415ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  415ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  415ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  415ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004de1  00003508 
#                  415ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  415______Cp0____opselect_chk:      001
#                  415______Cp0____operation_chk:     100
#                  415______Cp0____enable_arith_chk:  1
#                  415______Cp0____enable_shift_chk:  0
#                  415______Cp0____pkt_sent.enable:   1
#                  415______Cp5____
#                  415ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0418c0000
# 
#                  425[RECEIVER]  Getting Payload
#                  425[RECEIVER]  Payload Contents:  Aluout = 00000500 mem_write_en = 1 mem_data_write_out = 00005aed
#                  425[RECEIVER]  Payload Obtained
#                  425[DRIVER] Sending in new packet BEGIN
#                  425ns:  [DRIVER] Sending Payload Begin
#                  425ns:  [DRIVER] Sending in new packet END
#                  425ns:  [DRIVER] Number of packets sent =          39
#                  425ns:  [DRIVER] The number of Packets in the Generator Mailbox =          61
#                  425[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  425ns: [CHECKER] Checker Start
# 
# 
#                  425ns:   [CHECKER] Pkt Contents: src1 = 00000c59, src2 = 00005aed, imm = 00000081, 
#                  425ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  425ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005aed    mem_GOL = 00005aed
# 
#                  425ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  425ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004de1   & Golden Model = 00004de1
# 
#                  425ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003508   & Golden Model = 00003508
# 
#                  425ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  425ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  425ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  425ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  425ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  425ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  425ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  425ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004de1  00003508 
#                  425ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  425______Cp0____opselect_chk:      001
#                  425______Cp0____operation_chk:     100
#                  425______Cp0____enable_arith_chk:  0
#                  425______Cp0____enable_shift_chk:  0
#                  425______Cp0____pkt_sent.enable:   0
#                  425______Cp23____
#                  425ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000500   & Golden Model = 000000500
# 
#                  435[RECEIVER]  Getting Payload
#                  435[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005807
#                  435[RECEIVER]  Payload Obtained
#                  435[DRIVER] Sending in new packet BEGIN
#                  435ns:  [DRIVER] Sending Payload Begin
#                  435ns:  [DRIVER] Sending in new packet END
#                  435ns:  [DRIVER] Number of packets sent =          40
#                  435ns:  [DRIVER] The number of Packets in the Generator Mailbox =          60
#                  435[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  435ns: [CHECKER] Checker Start
# 
# 
#                  435ns:   [CHECKER] Pkt Contents: src1 = 0000a8f8, src2 = 00005807, imm = 00003858, 
#                  435ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  435ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005807    mem_GOL = 00005807
# 
#                  435ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  435ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a8f8   & Golden Model = 0000a8f8
# 
#                  435ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003858   & Golden Model = 00003858
# 
#                  435ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  435ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  435ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  435ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  435ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  435ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  435ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  435ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a8f8  00003858 
#                  435ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  435______Cp0____opselect_chk:      001
#                  435______Cp0____operation_chk:     110
#                  435______Cp0____enable_arith_chk:  1
#                  435______Cp0____enable_shift_chk:  0
#                  435______Cp0____pkt_sent.enable:   1
#                  435______Cp7____
#                  435ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 000000500
# 
#                  445[RECEIVER]  Getting Payload
#                  445[RECEIVER]  Payload Contents:  Aluout = 000090a0 mem_write_en = 1 mem_data_write_out = 000043a1
#                  445[RECEIVER]  Payload Obtained
#                  445[DRIVER] Sending in new packet BEGIN
#                  445ns:  [DRIVER] Sending Payload Begin
#                  445ns:  [DRIVER] Sending in new packet END
#                  445ns:  [DRIVER] Number of packets sent =          41
#                  445ns:  [DRIVER] The number of Packets in the Generator Mailbox =          59
#                  445[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  445ns: [CHECKER] Checker Start
# 
# 
#                  445ns:   [CHECKER] Pkt Contents: src1 = 0000a70e, src2 = 000043a1, imm = 00001897, 
#                  445ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  445ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000043a1    mem_GOL = 000043a1
# 
#                  445ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  445ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  445ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  445ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  445ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  445ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  445ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  445ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  445ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  445ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  445ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  445ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  445______Cp0____opselect_chk:      001
#                  445______Cp0____operation_chk:     010
#                  445______Cp0____enable_arith_chk:  1
#                  445______Cp0____enable_shift_chk:  0
#                  445______Cp0____pkt_sent.enable:   1
#                  445______Cp3____
#                  445ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000090a0   & Golden Model = 0000090a0
# 
#                  455[RECEIVER]  Getting Payload
#                  455[RECEIVER]  Payload Contents:  Aluout = 0000636d mem_write_en = 1 mem_data_write_out = 00002fb1
#                  455[RECEIVER]  Payload Obtained
#                  455[DRIVER] Sending in new packet BEGIN
#                  455ns:  [DRIVER] Sending Payload Begin
#                  455ns:  [DRIVER] Sending in new packet END
#                  455ns:  [DRIVER] Number of packets sent =          42
#                  455ns:  [DRIVER] The number of Packets in the Generator Mailbox =          58
#                  455[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  455ns: [CHECKER] Checker Start
# 
# 
#                  455ns:   [CHECKER] Pkt Contents: src1 = 0000ae7e, src2 = 00002fb1, imm = 0000d2e9, 
#                  455ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  455ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002fb1    mem_GOL = 00002fb1
# 
#                  455ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  455ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  455ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  455ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  455ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  455ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  455ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  455ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  455ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  455ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  455ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  455ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  455______Cp0____opselect_chk:      001
#                  455______Cp0____operation_chk:     010
#                  455______Cp0____enable_arith_chk:  0
#                  455______Cp0____enable_shift_chk:  0
#                  455______Cp0____pkt_sent.enable:   0
#                  455______Cp23____
#                  455ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000636d   & Golden Model = 00000636d
# 
#                  465[RECEIVER]  Getting Payload
#                  465[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00008288
#                  465[RECEIVER]  Payload Obtained
#                  465[DRIVER] Sending in new packet BEGIN
#                  465ns:  [DRIVER] Sending Payload Begin
#                  465ns:  [DRIVER] Sending in new packet END
#                  465ns:  [DRIVER] Number of packets sent =          43
#                  465ns:  [DRIVER] The number of Packets in the Generator Mailbox =          57
#                  465[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  465ns: [CHECKER] Checker Start
# 
# 
#                  465ns:   [CHECKER] Pkt Contents: src1 = 0000b1c9, src2 = 00008288, imm = 0000297e, 
#                  465ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  465ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00008288    mem_GOL = 00008288
# 
#                  465ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  465ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  465ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  465ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  465ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  465ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  465ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  465ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  465ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  465ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  465ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  465ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  465______Cp0____opselect_chk:      001
#                  465______Cp0____operation_chk:     010
#                  465______Cp0____enable_arith_chk:  0
#                  465______Cp0____enable_shift_chk:  0
#                  465______Cp0____pkt_sent.enable:   0
#                  465______Cp23____
#                  465ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  475[RECEIVER]  Getting Payload
#                  475[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002a84
#                  475[RECEIVER]  Payload Obtained
#                  475[DRIVER] Sending in new packet BEGIN
#                  475ns:  [DRIVER] Sending Payload Begin
#                  475ns:  [DRIVER] Sending in new packet END
#                  475ns:  [DRIVER] Number of packets sent =          44
#                  475ns:  [DRIVER] The number of Packets in the Generator Mailbox =          56
#                  475[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  475ns: [CHECKER] Checker Start
# 
# 
#                  475ns:   [CHECKER] Pkt Contents: src1 = 0000b822, src2 = 00002a84, imm = 00005ca4, 
#                  475ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  475ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002a84    mem_GOL = 00002a84
# 
#                  475ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  475ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  475ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  475ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  475ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  475ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  475ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  475ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  475ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  475ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  475ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  475ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  475______Cp0____opselect_chk:      001
#                  475______Cp0____operation_chk:     010
#                  475______Cp0____enable_arith_chk:  0
#                  475______Cp0____enable_shift_chk:  0
#                  475______Cp0____pkt_sent.enable:   0
#                  475______Cp23____
#                  475ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  485[RECEIVER]  Getting Payload
#                  485[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000476d
#                  485[RECEIVER]  Payload Obtained
#                  485[DRIVER] Sending in new packet BEGIN
#                  485ns:  [DRIVER] Sending Payload Begin
#                  485ns:  [DRIVER] Sending in new packet END
#                  485ns:  [DRIVER] Number of packets sent =          45
#                  485ns:  [DRIVER] The number of Packets in the Generator Mailbox =          55
#                  485[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  485ns: [CHECKER] Checker Start
# 
# 
#                  485ns:   [CHECKER] Pkt Contents: src1 = 0000d557, src2 = 0000476d, imm = 0000a59b, 
#                  485ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  485ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000476d    mem_GOL = 0000476d
# 
#                  485ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  485ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  485ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  485ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  485ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  485ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  485ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  485ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  485ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  485ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  485ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  485ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  485______Cp0____opselect_chk:      001
#                  485______Cp0____operation_chk:     010
#                  485______Cp0____enable_arith_chk:  0
#                  485______Cp0____enable_shift_chk:  0
#                  485______Cp0____pkt_sent.enable:   0
#                  485______Cp23____
#                  485ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  495[RECEIVER]  Getting Payload
#                  495[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000aa95
#                  495[RECEIVER]  Payload Obtained
#                  495[DRIVER] Sending in new packet BEGIN
#                  495ns:  [DRIVER] Sending Payload Begin
#                  495ns:  [DRIVER] Sending in new packet END
#                  495ns:  [DRIVER] Number of packets sent =          46
#                  495ns:  [DRIVER] The number of Packets in the Generator Mailbox =          54
#                  495[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  495ns: [CHECKER] Checker Start
# 
# 
#                  495ns:   [CHECKER] Pkt Contents: src1 = 00006868, src2 = 0000aa95, imm = 000057ec, 
#                  495ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  495ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000aa95    mem_GOL = 0000aa95
# 
#                  495ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  495ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  495ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  495ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  495ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  495ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  495ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  495ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  495ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  495ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  495ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  495ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  495______Cp0____opselect_chk:      001
#                  495______Cp0____operation_chk:     010
#                  495______Cp0____enable_arith_chk:  0
#                  495______Cp0____enable_shift_chk:  0
#                  495______Cp0____pkt_sent.enable:   0
#                  495______Cp23____
#                  495ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  505[RECEIVER]  Getting Payload
#                  505[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002acc
#                  505[RECEIVER]  Payload Obtained
#                  505[DRIVER] Sending in new packet BEGIN
#                  505ns:  [DRIVER] Sending Payload Begin
#                  505ns:  [DRIVER] Sending in new packet END
#                  505ns:  [DRIVER] Number of packets sent =          47
#                  505ns:  [DRIVER] The number of Packets in the Generator Mailbox =          53
#                  505[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  505ns: [CHECKER] Checker Start
# 
# 
#                  505ns:   [CHECKER] Pkt Contents: src1 = 00004523, src2 = 00002acc, imm = 00000867, 
#                  505ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  505ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002acc    mem_GOL = 00002acc
# 
#                  505ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  505ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  505ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  505ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  505ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  505ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  505ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  505ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  505ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  505ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  505ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  505ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  505______Cp0____opselect_chk:      001
#                  505______Cp0____operation_chk:     010
#                  505______Cp0____enable_arith_chk:  0
#                  505______Cp0____enable_shift_chk:  0
#                  505______Cp0____pkt_sent.enable:   0
#                  505______Cp23____
#                  505ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  515[RECEIVER]  Getting Payload
#                  515[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d259
#                  515[RECEIVER]  Payload Obtained
#                  515[DRIVER] Sending in new packet BEGIN
#                  515ns:  [DRIVER] Sending Payload Begin
#                  515ns:  [DRIVER] Sending in new packet END
#                  515ns:  [DRIVER] Number of packets sent =          48
#                  515ns:  [DRIVER] The number of Packets in the Generator Mailbox =          52
#                  515[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  515ns: [CHECKER] Checker Start
# 
# 
#                  515ns:   [CHECKER] Pkt Contents: src1 = 0000d4be, src2 = 0000d259, imm = 00002cf5, 
#                  515ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  515ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d259    mem_GOL = 0000d259
# 
#                  515ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  515ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  515ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  515ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  515ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  515ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  515ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  515ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  515ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  515______Cp0____opselect_chk:      001
#                  515______Cp0____operation_chk:     001
#                  515______Cp0____enable_arith_chk:  1
#                  515______Cp0____enable_shift_chk:  0
#                  515______Cp0____pkt_sent.enable:   1
#                  515
#                  515______Cp2____
#                  515ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  525[RECEIVER]  Getting Payload
#                  525[RECEIVER]  Payload Contents:  Aluout = ffffa717 mem_write_en = 1 mem_data_write_out = 00000446
#                  525[RECEIVER]  Payload Obtained
#                  525[DRIVER] Sending in new packet BEGIN
#                  525ns:  [DRIVER] Sending Payload Begin
#                  525ns:  [DRIVER] Sending in new packet END
#                  525ns:  [DRIVER] Number of packets sent =          49
#                  525ns:  [DRIVER] The number of Packets in the Generator Mailbox =          51
#                  525[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  525ns: [CHECKER] Checker Start
# 
# 
#                  525ns:   [CHECKER] Pkt Contents: src1 = 0000f6bf, src2 = 00000446, imm = 000004bc, 
#                  525ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  525ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000446    mem_GOL = 00000446
# 
#                  525ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  525ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  525ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  525ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  525ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  525ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  525ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  525ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  525ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  525ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  525ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  525ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  525______Cp0____opselect_chk:      001
#                  525______Cp0____operation_chk:     001
#                  525______Cp0____enable_arith_chk:  0
#                  525______Cp0____enable_shift_chk:  0
#                  525______Cp0____pkt_sent.enable:   0
#                  525______Cp23____
#                  525ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffa717   & Golden Model = 0ffffa717
# 
#                  535[RECEIVER]  Getting Payload
#                  535[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00006eaa
#                  535[RECEIVER]  Payload Obtained
#                  535[DRIVER] Sending in new packet BEGIN
#                  535ns:  [DRIVER] Sending Payload Begin
#                  535ns:  [DRIVER] Sending in new packet END
#                  535ns:  [DRIVER] Number of packets sent =          50
#                  535ns:  [DRIVER] The number of Packets in the Generator Mailbox =          50
#                  535[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  535ns: [CHECKER] Checker Start
# 
# 
#                  535ns:   [CHECKER] Pkt Contents: src1 = 0000c200, src2 = 00006eaa, imm = 00007ab2, 
#                  535ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  535ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006eaa    mem_GOL = 00006eaa
# 
#                  535ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  535ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  535ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  535ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  535ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  535ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  535ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  535ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  535ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  535ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  535ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  535ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  535______Cp0____opselect_chk:      001
#                  535______Cp0____operation_chk:     001
#                  535______Cp0____enable_arith_chk:  0
#                  535______Cp0____enable_shift_chk:  0
#                  535______Cp0____pkt_sent.enable:   0
#                  535______Cp23____
#                  535ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  545[RECEIVER]  Getting Payload
#                  545[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f077
#                  545[RECEIVER]  Payload Obtained
#                  545[DRIVER] Sending in new packet BEGIN
#                  545ns:  [DRIVER] Sending Payload Begin
#                  545ns:  [DRIVER] Sending in new packet END
#                  545ns:  [DRIVER] Number of packets sent =          51
#                  545ns:  [DRIVER] The number of Packets in the Generator Mailbox =          49
#                  545[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  545ns: [CHECKER] Checker Start
# 
# 
#                  545ns:   [CHECKER] Pkt Contents: src1 = 000042f6, src2 = 0000f077, imm = 0000cb5a, 
#                  545ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  545ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f077    mem_GOL = 0000f077
# 
#                  545ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  545ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  545ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  545ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  545ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  545ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  545ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  545ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  545ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  545ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  545ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  545ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  545______Cp0____opselect_chk:      001
#                  545______Cp0____operation_chk:     001
#                  545______Cp0____enable_arith_chk:  0
#                  545______Cp0____enable_shift_chk:  0
#                  545______Cp0____pkt_sent.enable:   0
#                  545______Cp23____
#                  545ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  555[RECEIVER]  Getting Payload
#                  555[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b136
#                  555[RECEIVER]  Payload Obtained
#                  555[DRIVER] Sending in new packet BEGIN
#                  555ns:  [DRIVER] Sending Payload Begin
#                  555ns:  [DRIVER] Sending in new packet END
#                  555ns:  [DRIVER] Number of packets sent =          52
#                  555ns:  [DRIVER] The number of Packets in the Generator Mailbox =          48
#                  555[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  555ns: [CHECKER] Checker Start
# 
# 
#                  555ns:   [CHECKER] Pkt Contents: src1 = 00007acc, src2 = 0000b136, imm = 000073bc, 
#                  555ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  555ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b136    mem_GOL = 0000b136
# 
#                  555ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  555ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  555ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  555ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  555ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  555ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  555ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  555ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  555ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  555ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  555ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  555ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  555______Cp0____opselect_chk:      001
#                  555______Cp0____operation_chk:     001
#                  555______Cp0____enable_arith_chk:  0
#                  555______Cp0____enable_shift_chk:  0
#                  555______Cp0____pkt_sent.enable:   0
#                  555______Cp23____
#                  555ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  565[RECEIVER]  Getting Payload
#                  565[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b24a
#                  565[RECEIVER]  Payload Obtained
#                  565[DRIVER] Sending in new packet BEGIN
#                  565ns:  [DRIVER] Sending Payload Begin
#                  565ns:  [DRIVER] Sending in new packet END
#                  565ns:  [DRIVER] Number of packets sent =          53
#                  565ns:  [DRIVER] The number of Packets in the Generator Mailbox =          47
#                  565[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  565ns: [CHECKER] Checker Start
# 
# 
#                  565ns:   [CHECKER] Pkt Contents: src1 = 00004d3f, src2 = 0000b24a, imm = 0000b08e, 
#                  565ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  565ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b24a    mem_GOL = 0000b24a
# 
#                  565ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  565ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  565ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  565ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  565ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  565ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  565ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  565ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  565ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  565ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  565ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  565ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  565______Cp0____opselect_chk:      001
#                  565______Cp0____operation_chk:     111
#                  565______Cp0____enable_arith_chk:  1
#                  565______Cp0____enable_shift_chk:  0
#                  565______Cp0____pkt_sent.enable:   1
#                  565______Cp7____
#                  565ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  575[RECEIVER]  Getting Payload
#                  575[RECEIVER]  Payload Contents:  Aluout = b24a0000 mem_write_en = 1 mem_data_write_out = 0000cde4
#                  575[RECEIVER]  Payload Obtained
#                  575[DRIVER] Sending in new packet BEGIN
#                  575ns:  [DRIVER] Sending Payload Begin
#                  575ns:  [DRIVER] Sending in new packet END
#                  575ns:  [DRIVER] Number of packets sent =          54
#                  575ns:  [DRIVER] The number of Packets in the Generator Mailbox =          46
#                  575[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  575ns: [CHECKER] Checker Start
# 
# 
#                  575ns:   [CHECKER] Pkt Contents: src1 = 0000ac5a, src2 = 0000cde4, imm = 00007ea3, 
#                  575ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  575ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000cde4    mem_GOL = 0000cde4
# 
#                  575ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  575ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  575ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  575ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  575ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  575ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  575ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  575ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  575ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  575ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  575ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  575ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  575______Cp0____opselect_chk:      001
#                  575______Cp0____operation_chk:     111
#                  575______Cp0____enable_arith_chk:  0
#                  575______Cp0____enable_shift_chk:  0
#                  575______Cp0____pkt_sent.enable:   0
#                  575______Cp23____
#                  575ns:   [ASSERT_aluout] PASS ALUOUT: DUT = b24a0000   & Golden Model = 0b24a0000
# 
#                  585[RECEIVER]  Getting Payload
#                  585[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f817
#                  585[RECEIVER]  Payload Obtained
#                  585[DRIVER] Sending in new packet BEGIN
#                  585ns:  [DRIVER] Sending Payload Begin
#                  585ns:  [DRIVER] Sending in new packet END
#                  585ns:  [DRIVER] Number of packets sent =          55
#                  585ns:  [DRIVER] The number of Packets in the Generator Mailbox =          45
#                  585[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  585ns: [CHECKER] Checker Start
# 
# 
#                  585ns:   [CHECKER] Pkt Contents: src1 = 0000fa4e, src2 = 0000f817, imm = 0000c3ba, 
#                  585ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  585ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f817    mem_GOL = 0000f817
# 
#                  585ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  585ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  585ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  585ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  585ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  585ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  585ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  585ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  585ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  585ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  585ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  585ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  585______Cp0____opselect_chk:      001
#                  585______Cp0____operation_chk:     111
#                  585______Cp0____enable_arith_chk:  0
#                  585______Cp0____enable_shift_chk:  0
#                  585______Cp0____pkt_sent.enable:   0
#                  585______Cp23____
#                  585ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  595[RECEIVER]  Getting Payload
#                  595[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001baf
#                  595[RECEIVER]  Payload Obtained
#                  595[DRIVER] Sending in new packet BEGIN
#                  595ns:  [DRIVER] Sending Payload Begin
#                  595ns:  [DRIVER] Sending in new packet END
#                  595ns:  [DRIVER] Number of packets sent =          56
#                  595ns:  [DRIVER] The number of Packets in the Generator Mailbox =          44
#                  595[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  595ns: [CHECKER] Checker Start
# 
# 
#                  595ns:   [CHECKER] Pkt Contents: src1 = 00003860, src2 = 00001baf, imm = 00004592, 
#                  595ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  595ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001baf    mem_GOL = 00001baf
# 
#                  595ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  595ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  595ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  595ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  595ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  595ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  595ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  595ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  595ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  595ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  595ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  595ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  595______Cp0____opselect_chk:      001
#                  595______Cp0____operation_chk:     111
#                  595______Cp0____enable_arith_chk:  0
#                  595______Cp0____enable_shift_chk:  0
#                  595______Cp0____pkt_sent.enable:   0
#                  595______Cp23____
#                  595ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  605[RECEIVER]  Getting Payload
#                  605[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000da12
#                  605[RECEIVER]  Payload Obtained
#                  605[DRIVER] Sending in new packet BEGIN
#                  605ns:  [DRIVER] Sending Payload Begin
#                  605ns:  [DRIVER] Sending in new packet END
#                  605ns:  [DRIVER] Number of packets sent =          57
#                  605ns:  [DRIVER] The number of Packets in the Generator Mailbox =          43
#                  605[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  605ns: [CHECKER] Checker Start
# 
# 
#                  605ns:   [CHECKER] Pkt Contents: src1 = 0000b1d6, src2 = 0000da12, imm = 00002a23, 
#                  605ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  605ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000da12    mem_GOL = 0000da12
# 
#                  605ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  605ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  605ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  605ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  605ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  605ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  605ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  605ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  605ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  605ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  605ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  605ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  605______Cp0____opselect_chk:      001
#                  605______Cp0____operation_chk:     111
#                  605______Cp0____enable_arith_chk:  0
#                  605______Cp0____enable_shift_chk:  0
#                  605______Cp0____pkt_sent.enable:   0
#                  605______Cp23____
#                  605ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  615[RECEIVER]  Getting Payload
#                  615[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000ef8e
#                  615[RECEIVER]  Payload Obtained
#                  615[DRIVER] Sending in new packet BEGIN
#                  615ns:  [DRIVER] Sending Payload Begin
#                  615ns:  [DRIVER] Sending in new packet END
#                  615ns:  [DRIVER] Number of packets sent =          58
#                  615ns:  [DRIVER] The number of Packets in the Generator Mailbox =          42
#                  615[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  615ns: [CHECKER] Checker Start
# 
# 
#                  615ns:   [CHECKER] Pkt Contents: src1 = 000039dd, src2 = 0000ef8e, imm = 0000c621, 
#                  615ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  615ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ef8e    mem_GOL = 0000ef8e
# 
#                  615ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  615ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  615ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  615ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  615ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  615ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  615ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  615ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  615ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  615ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  615ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  615ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  615______Cp0____opselect_chk:      001
#                  615______Cp0____operation_chk:     101
#                  615______Cp0____enable_arith_chk:  1
#                  615______Cp0____enable_shift_chk:  0
#                  615______Cp0____pkt_sent.enable:   1
#                  615______Cp6____
#                  615ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  625[RECEIVER]  Getting Payload
#                  625[RECEIVER]  Payload Contents:  Aluout = 0000ffdf mem_write_en = 1 mem_data_write_out = 00002926
#                  625[RECEIVER]  Payload Obtained
#                  625[DRIVER] Sending in new packet BEGIN
#                  625ns:  [DRIVER] Sending Payload Begin
#                  625ns:  [DRIVER] Sending in new packet END
#                  625ns:  [DRIVER] Number of packets sent =          59
#                  625ns:  [DRIVER] The number of Packets in the Generator Mailbox =          41
#                  625[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  625ns: [CHECKER] Checker Start
# 
# 
#                  625ns:   [CHECKER] Pkt Contents: src1 = 0000d637, src2 = 00002926, imm = 0000ac70, 
#                  625ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  625ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002926    mem_GOL = 00002926
# 
#                  625ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  625ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  625ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  625ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  625ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  625ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  625ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  625ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  625ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  625ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  625ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  625ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  625______Cp0____opselect_chk:      001
#                  625______Cp0____operation_chk:     101
#                  625______Cp0____enable_arith_chk:  0
#                  625______Cp0____enable_shift_chk:  0
#                  625______Cp0____pkt_sent.enable:   0
#                  625______Cp23____
#                  625ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ffdf   & Golden Model = 00000ffdf
# 
#                  635[RECEIVER]  Getting Payload
#                  635[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001088
#                  635[RECEIVER]  Payload Obtained
#                  635[DRIVER] Sending in new packet BEGIN
#                  635ns:  [DRIVER] Sending Payload Begin
#                  635ns:  [DRIVER] Sending in new packet END
#                  635ns:  [DRIVER] Number of packets sent =          60
#                  635ns:  [DRIVER] The number of Packets in the Generator Mailbox =          40
#                  635[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  635ns: [CHECKER] Checker Start
# 
# 
#                  635ns:   [CHECKER] Pkt Contents: src1 = 0000a58d, src2 = 00001088, imm = 0000b995, 
#                  635ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  635ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001088    mem_GOL = 00001088
# 
#                  635ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  635ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  635ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  635ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  635ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  635ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  635ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  635ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  635ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  635ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  635ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  635ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  635______Cp0____opselect_chk:      001
#                  635______Cp0____operation_chk:     101
#                  635______Cp0____enable_arith_chk:  0
#                  635______Cp0____enable_shift_chk:  0
#                  635______Cp0____pkt_sent.enable:   0
#                  635______Cp23____
#                  635ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ffdf
# 
#                  645[RECEIVER]  Getting Payload
#                  645[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e068
#                  645[RECEIVER]  Payload Obtained
#                  645[DRIVER] Sending in new packet BEGIN
#                  645ns:  [DRIVER] Sending Payload Begin
#                  645ns:  [DRIVER] Sending in new packet END
#                  645ns:  [DRIVER] Number of packets sent =          61
#                  645ns:  [DRIVER] The number of Packets in the Generator Mailbox =          39
#                  645[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  645ns: [CHECKER] Checker Start
# 
# 
#                  645ns:   [CHECKER] Pkt Contents: src1 = 00004ea5, src2 = 0000e068, imm = 0000f290, 
#                  645ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  645ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e068    mem_GOL = 0000e068
# 
#                  645ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  645ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  645ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  645ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  645ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  645ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  645ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  645ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  645ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  645ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  645ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  645ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  645______Cp0____opselect_chk:      001
#                  645______Cp0____operation_chk:     111
#                  645______Cp0____enable_arith_chk:  1
#                  645______Cp0____enable_shift_chk:  0
#                  645______Cp0____pkt_sent.enable:   1
#                  645______Cp7____
#                  645ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ffdf
# 
#                  655[RECEIVER]  Getting Payload
#                  655[RECEIVER]  Payload Contents:  Aluout = e0680000 mem_write_en = 1 mem_data_write_out = 00007663
#                  655[RECEIVER]  Payload Obtained
#                  655[DRIVER] Sending in new packet BEGIN
#                  655ns:  [DRIVER] Sending Payload Begin
#                  655ns:  [DRIVER] Sending in new packet END
#                  655ns:  [DRIVER] Number of packets sent =          62
#                  655ns:  [DRIVER] The number of Packets in the Generator Mailbox =          38
#                  655[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  655ns: [CHECKER] Checker Start
# 
# 
#                  655ns:   [CHECKER] Pkt Contents: src1 = 0000dec8, src2 = 00007663, imm = 00000842, 
#                  655ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  655ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007663    mem_GOL = 00007663
# 
#                  655ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  655ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  655ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  655ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  655ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  655ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  655ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  655ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  655ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  655ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  655ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  655ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  655______Cp0____opselect_chk:      001
#                  655______Cp0____operation_chk:     111
#                  655______Cp0____enable_arith_chk:  0
#                  655______Cp0____enable_shift_chk:  0
#                  655______Cp0____pkt_sent.enable:   0
#                  655______Cp23____
#                  655ns:   [ASSERT_aluout] PASS ALUOUT: DUT = e0680000   & Golden Model = 0e0680000
# 
#                  665[RECEIVER]  Getting Payload
#                  665[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00009c15
#                  665[RECEIVER]  Payload Obtained
#                  665[DRIVER] Sending in new packet BEGIN
#                  665ns:  [DRIVER] Sending Payload Begin
#                  665ns:  [DRIVER] Sending in new packet END
#                  665ns:  [DRIVER] Number of packets sent =          63
#                  665ns:  [DRIVER] The number of Packets in the Generator Mailbox =          37
#                  665[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  665ns: [CHECKER] Checker Start
# 
# 
#                  665ns:   [CHECKER] Pkt Contents: src1 = 0000d904, src2 = 00009c15, imm = 0000dc36, 
#                  665ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  665ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009c15    mem_GOL = 00009c15
# 
#                  665ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  665ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  665ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  665ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  665ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  665ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  665ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  665ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  665ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  665ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  665ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  665ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  665______Cp0____opselect_chk:      001
#                  665______Cp0____operation_chk:     111
#                  665______Cp0____enable_arith_chk:  0
#                  665______Cp0____enable_shift_chk:  0
#                  665______Cp0____pkt_sent.enable:   0
#                  665______Cp23____
#                  665ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  675[RECEIVER]  Getting Payload
#                  675[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00009f5e
#                  675[RECEIVER]  Payload Obtained
#                  675[DRIVER] Sending in new packet BEGIN
#                  675ns:  [DRIVER] Sending Payload Begin
#                  675ns:  [DRIVER] Sending in new packet END
#                  675ns:  [DRIVER] Number of packets sent =          64
#                  675ns:  [DRIVER] The number of Packets in the Generator Mailbox =          36
#                  675[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  675ns: [CHECKER] Checker Start
# 
# 
#                  675ns:   [CHECKER] Pkt Contents: src1 = 00001ad9, src2 = 00009f5e, imm = 0000f564, 
#                  675ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  675ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009f5e    mem_GOL = 00009f5e
# 
#                  675ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  675ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  675ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  675ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  675ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  675ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  675ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  675ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  675ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  675ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  675ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  675ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  675______Cp0____opselect_chk:      001
#                  675______Cp0____operation_chk:     111
#                  675______Cp0____enable_arith_chk:  0
#                  675______Cp0____enable_shift_chk:  0
#                  675______Cp0____pkt_sent.enable:   0
#                  675______Cp23____
#                  675ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  685[RECEIVER]  Getting Payload
#                  685[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001d33
#                  685[RECEIVER]  Payload Obtained
#                  685[DRIVER] Sending in new packet BEGIN
#                  685ns:  [DRIVER] Sending Payload Begin
#                  685ns:  [DRIVER] Sending in new packet END
#                  685ns:  [DRIVER] Number of packets sent =          65
#                  685ns:  [DRIVER] The number of Packets in the Generator Mailbox =          35
#                  685[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  685ns: [CHECKER] Checker Start
# 
# 
#                  685ns:   [CHECKER] Pkt Contents: src1 = 000092b4, src2 = 00001d33, imm = 00004f41, 
#                  685ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  685ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001d33    mem_GOL = 00001d33
# 
#                  685ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  685ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  685ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  685ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  685ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  685ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  685ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  685ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  685ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  685ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  685ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  685ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  685______Cp0____opselect_chk:      001
#                  685______Cp0____operation_chk:     110
#                  685______Cp0____enable_arith_chk:  1
#                  685______Cp0____enable_shift_chk:  0
#                  685______Cp0____pkt_sent.enable:   1
#                  685______Cp7____
#                  685ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  695[RECEIVER]  Getting Payload
#                  695[RECEIVER]  Payload Contents:  Aluout = 0000ddf5 mem_write_en = 1 mem_data_write_out = 000072b6
#                  695[RECEIVER]  Payload Obtained
#                  695[DRIVER] Sending in new packet BEGIN
#                  695ns:  [DRIVER] Sending Payload Begin
#                  695ns:  [DRIVER] Sending in new packet END
#                  695ns:  [DRIVER] Number of packets sent =          66
#                  695ns:  [DRIVER] The number of Packets in the Generator Mailbox =          34
#                  695[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  695ns: [CHECKER] Checker Start
# 
# 
#                  695ns:   [CHECKER] Pkt Contents: src1 = 00003e55, src2 = 000072b6, imm = 0000ece4, 
#                  695ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  695ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000072b6    mem_GOL = 000072b6
# 
#                  695ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  695ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  695ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  695ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  695ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  695ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  695ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  695ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  695ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  695ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  695ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  695ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  695______Cp0____opselect_chk:      001
#                  695______Cp0____operation_chk:     110
#                  695______Cp0____enable_arith_chk:  0
#                  695______Cp0____enable_shift_chk:  0
#                  695______Cp0____pkt_sent.enable:   0
#                  695______Cp23____
#                  695ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ddf5   & Golden Model = 00000ddf5
# 
#                  705[RECEIVER]  Getting Payload
#                  705[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005b5a
#                  705[RECEIVER]  Payload Obtained
#                  705[DRIVER] Sending in new packet BEGIN
#                  705ns:  [DRIVER] Sending Payload Begin
#                  705ns:  [DRIVER] Sending in new packet END
#                  705ns:  [DRIVER] Number of packets sent =          67
#                  705ns:  [DRIVER] The number of Packets in the Generator Mailbox =          33
#                  705[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  705ns: [CHECKER] Checker Start
# 
# 
#                  705ns:   [CHECKER] Pkt Contents: src1 = 000007bf, src2 = 00005b5a, imm = 0000c7d0, 
#                  705ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  705ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005b5a    mem_GOL = 00005b5a
# 
#                  705ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  705ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  705ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  705ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  705ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  705ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  705ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  705ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  705ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  705ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  705ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  705ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  705______Cp0____opselect_chk:      001
#                  705______Cp0____operation_chk:     110
#                  705______Cp0____enable_arith_chk:  0
#                  705______Cp0____enable_shift_chk:  0
#                  705______Cp0____pkt_sent.enable:   0
#                  705______Cp23____
#                  705ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ddf5
# 
#                  715[RECEIVER]  Getting Payload
#                  715[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007308
#                  715[RECEIVER]  Payload Obtained
#                  715[DRIVER] Sending in new packet BEGIN
#                  715ns:  [DRIVER] Sending Payload Begin
#                  715ns:  [DRIVER] Sending in new packet END
#                  715ns:  [DRIVER] Number of packets sent =          68
#                  715ns:  [DRIVER] The number of Packets in the Generator Mailbox =          32
#                  715[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  715ns: [CHECKER] Checker Start
# 
# 
#                  715ns:   [CHECKER] Pkt Contents: src1 = 000058b0, src2 = 00007308, imm = 0000e01c, 
#                  715ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  715ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007308    mem_GOL = 00007308
# 
#                  715ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  715ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000058b0   & Golden Model = 000058b0
# 
#                  715ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007308   & Golden Model = 00007308
# 
#                  715ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  715ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  715ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  715ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  715ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  715ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  715ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  715ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000058b0  00007308 
#                  715ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  715______Cp0____opselect_chk:      001
#                  715______Cp0____operation_chk:     010
#                  715______Cp0____enable_arith_chk:  1
#                  715______Cp0____enable_shift_chk:  0
#                  715______Cp0____pkt_sent.enable:   1
#                  715______Cp3____
#                  715ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ddf5
# 
#                  725[RECEIVER]  Getting Payload
#                  725[RECEIVER]  Payload Contents:  Aluout = ffffe5a8 mem_write_en = 1 mem_data_write_out = 000040b5
#                  725[RECEIVER]  Payload Obtained
#                  725[DRIVER] Sending in new packet BEGIN
#                  725ns:  [DRIVER] Sending Payload Begin
#                  725ns:  [DRIVER] Sending in new packet END
#                  725ns:  [DRIVER] Number of packets sent =          69
#                  725ns:  [DRIVER] The number of Packets in the Generator Mailbox =          31
#                  725[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  725ns: [CHECKER] Checker Start
# 
# 
#                  725ns:   [CHECKER] Pkt Contents: src1 = 0000fcbc, src2 = 000040b5, imm = 0000c9ed, 
#                  725ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  725ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000040b5    mem_GOL = 000040b5
# 
#                  725ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  725ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000fcbc   & Golden Model = 0000fcbc
# 
#                  725ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000040b5   & Golden Model = 000040b5
# 
#                  725ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  725ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  725ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  725ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  725ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  725ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  725ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  725ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000fcbc  000040b5 
#                  725ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  725______Cp0____opselect_chk:      001
#                  725______Cp0____operation_chk:     101
#                  725______Cp0____enable_arith_chk:  1
#                  725______Cp0____enable_shift_chk:  0
#                  725______Cp0____pkt_sent.enable:   1
#                  725______Cp6____
#                  725ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffe5a8   & Golden Model = 1ffffe5a8
# 
#                  735[RECEIVER]  Getting Payload
#                  735[RECEIVER]  Payload Contents:  Aluout = 0000fcbd mem_write_en = 1 mem_data_write_out = 00006f50
#                  735[RECEIVER]  Payload Obtained
#                  735[DRIVER] Sending in new packet BEGIN
#                  735ns:  [DRIVER] Sending Payload Begin
#                  735ns:  [DRIVER] Sending in new packet END
#                  735ns:  [DRIVER] Number of packets sent =          70
#                  735ns:  [DRIVER] The number of Packets in the Generator Mailbox =          30
#                  735[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  735ns: [CHECKER] Checker Start
# 
# 
#                  735ns:   [CHECKER] Pkt Contents: src1 = 00004d79, src2 = 00006f50, imm = 00008332, 
#                  735ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  735ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006f50    mem_GOL = 00006f50
# 
#                  735ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  735ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d79   & Golden Model = 00004d79
# 
#                  735ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00006f50   & Golden Model = 00006f50
# 
#                  735ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  735ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  735ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  735ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  735ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d79  00006f50 
#                  735ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  735______Cp0____opselect_chk:      001
#                  735______Cp0____operation_chk:     001
#                  735______Cp0____enable_arith_chk:  1
#                  735______Cp0____enable_shift_chk:  0
#                  735______Cp0____pkt_sent.enable:   1
#                  735
#                  735______Cp2____
#                  735ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000fcbd   & Golden Model = 00000fcbd
# 
#                  745[RECEIVER]  Getting Payload
#                  745[RECEIVER]  Payload Contents:  Aluout = ffffbcc9 mem_write_en = 1 mem_data_write_out = 0000e704
#                  745[RECEIVER]  Payload Obtained
#                  745[DRIVER] Sending in new packet BEGIN
#                  745ns:  [DRIVER] Sending Payload Begin
#                  745ns:  [DRIVER] Sending in new packet END
#                  745ns:  [DRIVER] Number of packets sent =          71
#                  745ns:  [DRIVER] The number of Packets in the Generator Mailbox =          29
#                  745[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  745ns: [CHECKER] Checker Start
# 
# 
#                  745ns:   [CHECKER] Pkt Contents: src1 = 00000299, src2 = 0000e704, imm = 000093b1, 
#                  745ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  745ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e704    mem_GOL = 0000e704
# 
#                  745ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  745ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d79   & Golden Model = 00004d79
# 
#                  745ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00006f50   & Golden Model = 00006f50
# 
#                  745ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  745ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  745ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  745ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  745ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  745ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  745ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  745ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d79  00006f50 
#                  745ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  745______Cp0____opselect_chk:      001
#                  745______Cp0____operation_chk:     001
#                  745______Cp0____enable_arith_chk:  0
#                  745______Cp0____enable_shift_chk:  0
#                  745______Cp0____pkt_sent.enable:   0
#                  745______Cp23____
#                  745ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffbcc9   & Golden Model = 00000bcc9
# 
#                  755[RECEIVER]  Getting Payload
#                  755[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e6c8
#                  755[RECEIVER]  Payload Obtained
#                  755[DRIVER] Sending in new packet BEGIN
#                  755ns:  [DRIVER] Sending Payload Begin
#                  755ns:  [DRIVER] Sending in new packet END
#                  755ns:  [DRIVER] Number of packets sent =          72
#                  755ns:  [DRIVER] The number of Packets in the Generator Mailbox =          28
#                  755[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  755ns: [CHECKER] Checker Start
# 
# 
#                  755ns:   [CHECKER] Pkt Contents: src1 = 000053e1, src2 = 0000e6c8, imm = 0000a4a9, 
#                  755ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  755ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e6c8    mem_GOL = 0000e6c8
# 
#                  755ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  755ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000053e1   & Golden Model = 000053e1
# 
#                  755ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a4a9   & Golden Model = 0000a4a9
# 
#                  755ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  755ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  755ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  755ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  755ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  755ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  755ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  755ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000053e1  0000a4a9 
#                  755ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  755______Cp0____opselect_chk:      001
#                  755______Cp0____operation_chk:     011
#                  755______Cp0____enable_arith_chk:  1
#                  755______Cp0____enable_shift_chk:  0
#                  755______Cp0____pkt_sent.enable:   1
#                  755______Cp4____
#                  755ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000bcc9
# 
#                  765[RECEIVER]  Getting Payload
#                  765[RECEIVER]  Payload Contents:  Aluout = ffff5b56 mem_write_en = 1 mem_data_write_out = 00006e2a
#                  765[RECEIVER]  Payload Obtained
#                  765[DRIVER] Sending in new packet BEGIN
#                  765ns:  [DRIVER] Sending Payload Begin
#                  765ns:  [DRIVER] Sending in new packet END
#                  765ns:  [DRIVER] Number of packets sent =          73
#                  765ns:  [DRIVER] The number of Packets in the Generator Mailbox =          27
#                  765[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  765ns: [CHECKER] Checker Start
# 
# 
#                  765ns:   [CHECKER] Pkt Contents: src1 = 0000ad6b, src2 = 00006e2a, imm = 0000ff23, 
#                  765ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  765ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006e2a    mem_GOL = 00006e2a
# 
#                  765ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  765ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000053e1   & Golden Model = 000053e1
# 
#                  765ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a4a9   & Golden Model = 0000a4a9
# 
#                  765ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  765ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  765ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  765ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  765ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  765ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  765ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  765ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000053e1  0000a4a9 
#                  765ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  765______Cp0____opselect_chk:      001
#                  765______Cp0____operation_chk:     011
#                  765______Cp0____enable_arith_chk:  0
#                  765______Cp0____enable_shift_chk:  0
#                  765______Cp0____pkt_sent.enable:   0
#                  765______Cp23____
#                  765ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff5b56   & Golden Model = 1ffff5b56
# 
#                  775[RECEIVER]  Getting Payload
#                  775[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b8e2
#                  775[RECEIVER]  Payload Obtained
#                  775[DRIVER] Sending in new packet BEGIN
#                  775ns:  [DRIVER] Sending Payload Begin
#                  775ns:  [DRIVER] Sending in new packet END
#                  775ns:  [DRIVER] Number of packets sent =          74
#                  775ns:  [DRIVER] The number of Packets in the Generator Mailbox =          26
#                  775[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  775ns: [CHECKER] Checker Start
# 
# 
#                  775ns:   [CHECKER] Pkt Contents: src1 = 00003083, src2 = 0000b8e2, imm = 00009866, 
#                  775ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  775ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b8e2    mem_GOL = 0000b8e2
# 
#                  775ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  775ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  775ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  775ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  775ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  775ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  775ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  775ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  775ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  775ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  775ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  775ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  775______Cp0____opselect_chk:      001
#                  775______Cp0____operation_chk:     000
#                  775______Cp0____enable_arith_chk:  1
#                  775______Cp0____enable_shift_chk:  0
#                  775______Cp0____pkt_sent.enable:   1
#                  775______Cp1____
#                  775ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff5b56
# 
#                  785[RECEIVER]  Getting Payload
#                  785[RECEIVER]  Payload Contents:  Aluout = 0000e965 mem_write_en = 1 mem_data_write_out = 0000bb5d
#                  785[RECEIVER]  Payload Obtained
#                  785[DRIVER] Sending in new packet BEGIN
#                  785ns:  [DRIVER] Sending Payload Begin
#                  785ns:  [DRIVER] Sending in new packet END
#                  785ns:  [DRIVER] Number of packets sent =          75
#                  785ns:  [DRIVER] The number of Packets in the Generator Mailbox =          25
#                  785[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  785ns: [CHECKER] Checker Start
# 
# 
#                  785ns:   [CHECKER] Pkt Contents: src1 = 0000f540, src2 = 0000bb5d, imm = 0000df6e, 
#                  785ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  785ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bb5d    mem_GOL = 0000bb5d
# 
#                  785ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  785ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  785ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  785ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  785ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  785ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  785ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  785ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  785ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  785______Cp0____opselect_chk:      001
#                  785______Cp0____operation_chk:     000
#                  785______Cp0____enable_arith_chk:  0
#                  785______Cp0____enable_shift_chk:  0
#                  785______Cp0____pkt_sent.enable:   0
#                  785______Cp23____
#                  785ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000e965   & Golden Model = 00000e965
# 
#                  795[RECEIVER]  Getting Payload
#                  795[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000bf2b
#                  795[RECEIVER]  Payload Obtained
#                  795[DRIVER] Sending in new packet BEGIN
#                  795ns:  [DRIVER] Sending Payload Begin
#                  795ns:  [DRIVER] Sending in new packet END
#                  795ns:  [DRIVER] Number of packets sent =          76
#                  795ns:  [DRIVER] The number of Packets in the Generator Mailbox =          24
#                  795[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  795ns: [CHECKER] Checker Start
# 
# 
#                  795ns:   [CHECKER] Pkt Contents: src1 = 0000c13c, src2 = 0000bf2b, imm = 0000ef2e, 
#                  795ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  795ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bf2b    mem_GOL = 0000bf2b
# 
#                  795ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  795ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  795ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  795ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  795ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  795ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  795ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  795ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  795ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  795______Cp0____opselect_chk:      001
#                  795______Cp0____operation_chk:     000
#                  795______Cp0____enable_arith_chk:  0
#                  795______Cp0____enable_shift_chk:  0
#                  795______Cp0____pkt_sent.enable:   0
#                  795______Cp23____
#                  795ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  805[RECEIVER]  Getting Payload
#                  805[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005d50
#                  805[RECEIVER]  Payload Obtained
#                  805[DRIVER] Sending in new packet BEGIN
#                  805ns:  [DRIVER] Sending Payload Begin
#                  805ns:  [DRIVER] Sending in new packet END
#                  805ns:  [DRIVER] Number of packets sent =          77
#                  805ns:  [DRIVER] The number of Packets in the Generator Mailbox =          23
#                  805[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  805ns: [CHECKER] Checker Start
# 
# 
#                  805ns:   [CHECKER] Pkt Contents: src1 = 0000b40a, src2 = 00005d50, imm = 0000a7b5, 
#                  805ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  805ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005d50    mem_GOL = 00005d50
# 
#                  805ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  805ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  805ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  805ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  805ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  805ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  805ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  805ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  805ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  805______Cp0____opselect_chk:      001
#                  805______Cp0____operation_chk:     000
#                  805______Cp0____enable_arith_chk:  0
#                  805______Cp0____enable_shift_chk:  0
#                  805______Cp0____pkt_sent.enable:   0
#                  805______Cp23____
#                  805ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  815[RECEIVER]  Getting Payload
#                  815[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 000040ab
#                  815[RECEIVER]  Payload Obtained
#                  815[DRIVER] Sending in new packet BEGIN
#                  815ns:  [DRIVER] Sending Payload Begin
#                  815ns:  [DRIVER] Sending in new packet END
#                  815ns:  [DRIVER] Number of packets sent =          78
#                  815ns:  [DRIVER] The number of Packets in the Generator Mailbox =          22
#                  815[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  815ns: [CHECKER] Checker Start
# 
# 
#                  815ns:   [CHECKER] Pkt Contents: src1 = 00004348, src2 = 000040ab, imm = 0000db6c, 
#                  815ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  815ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000040ab    mem_GOL = 000040ab
# 
#                  815ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  815ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  815ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  815ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  815ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  815ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  815ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  815ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  815ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  815______Cp0____opselect_chk:      001
#                  815______Cp0____operation_chk:     000
#                  815______Cp0____enable_arith_chk:  0
#                  815______Cp0____enable_shift_chk:  0
#                  815______Cp0____pkt_sent.enable:   0
#                  815______Cp23____
#                  815ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  825[RECEIVER]  Getting Payload
#                  825[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f101
#                  825[RECEIVER]  Payload Obtained
#                  825[DRIVER] Sending in new packet BEGIN
#                  825ns:  [DRIVER] Sending Payload Begin
#                  825ns:  [DRIVER] Sending in new packet END
#                  825ns:  [DRIVER] Number of packets sent =          79
#                  825ns:  [DRIVER] The number of Packets in the Generator Mailbox =          21
#                  825[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  825ns: [CHECKER] Checker Start
# 
# 
#                  825ns:   [CHECKER] Pkt Contents: src1 = 00004d0f, src2 = 0000f101, imm = 00007681, 
#                  825ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  825ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f101    mem_GOL = 0000f101
# 
#                  825ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  825ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  825ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  825ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  825ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  825ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  825ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  825ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  825ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  825______Cp0____opselect_chk:      001
#                  825______Cp0____operation_chk:     000
#                  825______Cp0____enable_arith_chk:  0
#                  825______Cp0____enable_shift_chk:  0
#                  825______Cp0____pkt_sent.enable:   0
#                  825______Cp23____
#                  825ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  835[RECEIVER]  Getting Payload
#                  835[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000dc66
#                  835[RECEIVER]  Payload Obtained
#                  835[DRIVER] Sending in new packet BEGIN
#                  835ns:  [DRIVER] Sending Payload Begin
#                  835ns:  [DRIVER] Sending in new packet END
#                  835ns:  [DRIVER] Number of packets sent =          80
#                  835ns:  [DRIVER] The number of Packets in the Generator Mailbox =          20
#                  835[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  835ns: [CHECKER] Checker Start
# 
# 
#                  835ns:   [CHECKER] Pkt Contents: src1 = 0000a59e, src2 = 0000dc66, imm = 00002606, 
#                  835ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  835ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000dc66    mem_GOL = 0000dc66
# 
#                  835ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  835ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  835ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  835ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  835ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  835ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  835ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  835ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  835ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  835______Cp0____opselect_chk:      001
#                  835______Cp0____operation_chk:     000
#                  835______Cp0____enable_arith_chk:  0
#                  835______Cp0____enable_shift_chk:  0
#                  835______Cp0____pkt_sent.enable:   0
#                  835______Cp23____
#                  835ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  845[RECEIVER]  Getting Payload
#                  845[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002b95
#                  845[RECEIVER]  Payload Obtained
#                  845[DRIVER] Sending in new packet BEGIN
#                  845ns:  [DRIVER] Sending Payload Begin
#                  845ns:  [DRIVER] Sending in new packet END
#                  845ns:  [DRIVER] Number of packets sent =          81
#                  845ns:  [DRIVER] The number of Packets in the Generator Mailbox =          19
#                  845[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  845ns: [CHECKER] Checker Start
# 
# 
#                  845ns:   [CHECKER] Pkt Contents: src1 = 0000a23e, src2 = 00002b95, imm = 000095d0, 
#                  845ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  845ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002b95    mem_GOL = 00002b95
# 
#                  845ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  845ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  845ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  845ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  845ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  845ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  845ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  845ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  845ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  845______Cp0____opselect_chk:      001
#                  845______Cp0____operation_chk:     000
#                  845______Cp0____enable_arith_chk:  0
#                  845______Cp0____enable_shift_chk:  0
#                  845______Cp0____pkt_sent.enable:   0
#                  845______Cp23____
#                  845ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  855[RECEIVER]  Getting Payload
#                  855[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005d13
#                  855[RECEIVER]  Payload Obtained
#                  855[DRIVER] Sending in new packet BEGIN
#                  855ns:  [DRIVER] Sending Payload Begin
#                  855ns:  [DRIVER] Sending in new packet END
#                  855ns:  [DRIVER] Number of packets sent =          82
#                  855ns:  [DRIVER] The number of Packets in the Generator Mailbox =          18
#                  855[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  855ns: [CHECKER] Checker Start
# 
# 
#                  855ns:   [CHECKER] Pkt Contents: src1 = 00009889, src2 = 00005d13, imm = 00005e48, 
#                  855ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  855ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005d13    mem_GOL = 00005d13
# 
#                  855ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  855ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009889   & Golden Model = 00009889
# 
#                  855ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005e48   & Golden Model = 00005e48
# 
#                  855ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  855ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  855ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  855ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  855ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  855ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  855ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  855ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009889  00005e48 
#                  855ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  855______Cp0____opselect_chk:      001
#                  855______Cp0____operation_chk:     110
#                  855______Cp0____enable_arith_chk:  1
#                  855______Cp0____enable_shift_chk:  0
#                  855______Cp0____pkt_sent.enable:   1
#                  855______Cp7____
#                  855ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  865[RECEIVER]  Getting Payload
#                  865[RECEIVER]  Payload Contents:  Aluout = 0000c6c1 mem_write_en = 1 mem_data_write_out = 000017cd
#                  865[RECEIVER]  Payload Obtained
#                  865[DRIVER] Sending in new packet BEGIN
#                  865ns:  [DRIVER] Sending Payload Begin
#                  865ns:  [DRIVER] Sending in new packet END
#                  865ns:  [DRIVER] Number of packets sent =          83
#                  865ns:  [DRIVER] The number of Packets in the Generator Mailbox =          17
#                  865[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  865ns: [CHECKER] Checker Start
# 
# 
#                  865ns:   [CHECKER] Pkt Contents: src1 = 0000a3d9, src2 = 000017cd, imm = 0000fbda, 
#                  865ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  865ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000017cd    mem_GOL = 000017cd
# 
#                  865ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  865ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009889   & Golden Model = 00009889
# 
#                  865ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005e48   & Golden Model = 00005e48
# 
#                  865ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  865ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  865ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  865ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  865ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  865ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  865ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  865ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009889  00005e48 
#                  865ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  865______Cp0____opselect_chk:      001
#                  865______Cp0____operation_chk:     110
#                  865______Cp0____enable_arith_chk:  0
#                  865______Cp0____enable_shift_chk:  0
#                  865______Cp0____pkt_sent.enable:   0
#                  865______Cp23____
#                  865ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c6c1   & Golden Model = 00000c6c1
# 
#                  875[RECEIVER]  Getting Payload
#                  875[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002cbb
#                  875[RECEIVER]  Payload Obtained
#                  875[DRIVER] Sending in new packet BEGIN
#                  875ns:  [DRIVER] Sending Payload Begin
#                  875ns:  [DRIVER] Sending in new packet END
#                  875ns:  [DRIVER] Number of packets sent =          84
#                  875ns:  [DRIVER] The number of Packets in the Generator Mailbox =          16
#                  875[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  875ns: [CHECKER] Checker Start
# 
# 
#                  875ns:   [CHECKER] Pkt Contents: src1 = 00007500, src2 = 00002cbb, imm = 0000a1c6, 
#                  875ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  875ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002cbb    mem_GOL = 00002cbb
# 
#                  875ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  875ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00007500   & Golden Model = 00007500
# 
#                  875ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002cbb   & Golden Model = 00002cbb
# 
#                  875ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  875ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  875ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  875ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  875ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  875ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  875ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  875ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00007500  00002cbb 
#                  875ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  875______Cp0____opselect_chk:      001
#                  875______Cp0____operation_chk:     111
#                  875______Cp0____enable_arith_chk:  1
#                  875______Cp0____enable_shift_chk:  0
#                  875______Cp0____pkt_sent.enable:   1
#                  875______Cp7____
#                  875ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000c6c1
# 
#                  885[RECEIVER]  Getting Payload
#                  885[RECEIVER]  Payload Contents:  Aluout = 2cbb0000 mem_write_en = 1 mem_data_write_out = 0000dec7
#                  885[RECEIVER]  Payload Obtained
#                  885[DRIVER] Sending in new packet BEGIN
#                  885ns:  [DRIVER] Sending Payload Begin
#                  885ns:  [DRIVER] Sending in new packet END
#                  885ns:  [DRIVER] Number of packets sent =          85
#                  885ns:  [DRIVER] The number of Packets in the Generator Mailbox =          15
#                  885[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  885ns: [CHECKER] Checker Start
# 
# 
#                  885ns:   [CHECKER] Pkt Contents: src1 = 0000fbc7, src2 = 0000dec7, imm = 00003468, 
#                  885ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  885ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000dec7    mem_GOL = 0000dec7
# 
#                  885ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  885ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000fbc7   & Golden Model = 0000fbc7
# 
#                  885ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003468   & Golden Model = 00003468
# 
#                  885ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  885ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  885ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  885ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  885ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  885ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  885ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  885ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000fbc7  00003468 
#                  885ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  885______Cp0____opselect_chk:      001
#                  885______Cp0____operation_chk:     010
#                  885______Cp0____enable_arith_chk:  1
#                  885______Cp0____enable_shift_chk:  0
#                  885______Cp0____pkt_sent.enable:   1
#                  885______Cp3____
#                  885ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 2cbb0000   & Golden Model = 02cbb0000
# 
#                  895[RECEIVER]  Getting Payload
#                  895[RECEIVER]  Payload Contents:  Aluout = 0000c75f mem_write_en = 1 mem_data_write_out = 000026fd
#                  895[RECEIVER]  Payload Obtained
#                  895[DRIVER] Sending in new packet BEGIN
#                  895ns:  [DRIVER] Sending Payload Begin
#                  895ns:  [DRIVER] Sending in new packet END
#                  895ns:  [DRIVER] Number of packets sent =          86
#                  895ns:  [DRIVER] The number of Packets in the Generator Mailbox =          14
#                  895[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  895ns: [CHECKER] Checker Start
# 
# 
#                  895ns:   [CHECKER] Pkt Contents: src1 = 0000aad9, src2 = 000026fd, imm = 000006ab, 
#                  895ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  895ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000026fd    mem_GOL = 000026fd
# 
#                  895ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  895ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000aad9   & Golden Model = 0000aad9
# 
#                  895ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000026fd   & Golden Model = 000026fd
# 
#                  895ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  895ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  895ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  895ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  895ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  895ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  895ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  895ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000aad9  000026fd 
#                  895ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  895______Cp0____opselect_chk:      001
#                  895______Cp0____operation_chk:     101
#                  895______Cp0____enable_arith_chk:  1
#                  895______Cp0____enable_shift_chk:  0
#                  895______Cp0____pkt_sent.enable:   1
#                  895______Cp6____
#                  895ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c75f   & Golden Model = 00000c75f
# 
#                  905[RECEIVER]  Getting Payload
#                  905[RECEIVER]  Payload Contents:  Aluout = 0000aefd mem_write_en = 1 mem_data_write_out = 00002139
#                  905[RECEIVER]  Payload Obtained
#                  905[DRIVER] Sending in new packet BEGIN
#                  905ns:  [DRIVER] Sending Payload Begin
#                  905ns:  [DRIVER] Sending in new packet END
#                  905ns:  [DRIVER] Number of packets sent =          87
#                  905ns:  [DRIVER] The number of Packets in the Generator Mailbox =          13
#                  905[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  905ns: [CHECKER] Checker Start
# 
# 
#                  905ns:   [CHECKER] Pkt Contents: src1 = 0000d2c1, src2 = 00002139, imm = 00001d2a, 
#                  905ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  905ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002139    mem_GOL = 00002139
# 
#                  905ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  905ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d2c1   & Golden Model = 0000d2c1
# 
#                  905ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001d2a   & Golden Model = 00001d2a
# 
#                  905ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  905ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  905ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  905ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  905ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  905ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  905ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  905ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d2c1  00001d2a 
#                  905ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  905______Cp0____opselect_chk:      001
#                  905______Cp0____operation_chk:     000
#                  905______Cp0____enable_arith_chk:  1
#                  905______Cp0____enable_shift_chk:  0
#                  905______Cp0____pkt_sent.enable:   1
#                  905______Cp1____
#                  905ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000aefd   & Golden Model = 00000aefd
# 
#                  915[RECEIVER]  Getting Payload
#                  915[RECEIVER]  Payload Contents:  Aluout = 0000efeb mem_write_en = 1 mem_data_write_out = 0000e01c
#                  915[RECEIVER]  Payload Obtained
#                  915[DRIVER] Sending in new packet BEGIN
#                  915ns:  [DRIVER] Sending Payload Begin
#                  915ns:  [DRIVER] Sending in new packet END
#                  915ns:  [DRIVER] Number of packets sent =          88
#                  915ns:  [DRIVER] The number of Packets in the Generator Mailbox =          12
#                  915[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  915ns: [CHECKER] Checker Start
# 
# 
#                  915ns:   [CHECKER] Pkt Contents: src1 = 0000b578, src2 = 0000e01c, imm = 00003797, 
#                  915ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  915ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e01c    mem_GOL = 0000e01c
# 
#                  915ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  915ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b578   & Golden Model = 0000b578
# 
#                  915ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003797   & Golden Model = 00003797
# 
#                  915ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  915ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  915ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  915ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  915ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  915ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  915ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  915ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b578  00003797 
#                  915ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  915______Cp0____opselect_chk:      001
#                  915______Cp0____operation_chk:     011
#                  915______Cp0____enable_arith_chk:  1
#                  915______Cp0____enable_shift_chk:  0
#                  915______Cp0____pkt_sent.enable:   1
#                  915______Cp4____
#                  915ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000efeb   & Golden Model = 00000efeb
# 
#                  925[RECEIVER]  Getting Payload
#                  925[RECEIVER]  Payload Contents:  Aluout = ffffc868 mem_write_en = 1 mem_data_write_out = 0000d296
#                  925[RECEIVER]  Payload Obtained
#                  925[DRIVER] Sending in new packet BEGIN
#                  925ns:  [DRIVER] Sending Payload Begin
#                  925ns:  [DRIVER] Sending in new packet END
#                  925ns:  [DRIVER] Number of packets sent =          89
#                  925ns:  [DRIVER] The number of Packets in the Generator Mailbox =          11
#                  925[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  925ns: [CHECKER] Checker Start
# 
# 
#                  925ns:   [CHECKER] Pkt Contents: src1 = 0000ef89, src2 = 0000d296, imm = 000063e2, 
#                  925ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  925ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d296    mem_GOL = 0000d296
# 
#                  925ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  925ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b578   & Golden Model = 0000b578
# 
#                  925ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003797   & Golden Model = 00003797
# 
#                  925ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  925ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  925ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  925ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  925ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  925ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  925ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  925ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b578  00003797 
#                  925ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  925______Cp0____opselect_chk:      001
#                  925______Cp0____operation_chk:     011
#                  925______Cp0____enable_arith_chk:  0
#                  925______Cp0____enable_shift_chk:  0
#                  925______Cp0____pkt_sent.enable:   0
#                  925______Cp23____
#                  925ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffc868   & Golden Model = 1ffffc868
# 
#                  935[RECEIVER]  Getting Payload
#                  935[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000300b
#                  935[RECEIVER]  Payload Obtained
#                  935[DRIVER] Sending in new packet BEGIN
#                  935ns:  [DRIVER] Sending Payload Begin
#                  935ns:  [DRIVER] Sending in new packet END
#                  935ns:  [DRIVER] Number of packets sent =          90
#                  935ns:  [DRIVER] The number of Packets in the Generator Mailbox =          10
#                  935[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  935ns: [CHECKER] Checker Start
# 
# 
#                  935ns:   [CHECKER] Pkt Contents: src1 = 0000b127, src2 = 0000300b, imm = 00008894, 
#                  935ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  935ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000300b    mem_GOL = 0000300b
# 
#                  935ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  935ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  935ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  935ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  935ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  935ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  935ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  935ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  935ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  935ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  935ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  935ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  935______Cp0____opselect_chk:      001
#                  935______Cp0____operation_chk:     110
#                  935______Cp0____enable_arith_chk:  1
#                  935______Cp0____enable_shift_chk:  0
#                  935______Cp0____pkt_sent.enable:   1
#                  935______Cp7____
#                  935ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffffc868
# 
#                  945[RECEIVER]  Getting Payload
#                  945[RECEIVER]  Payload Contents:  Aluout = 0000812c mem_write_en = 1 mem_data_write_out = 0000b83b
#                  945[RECEIVER]  Payload Obtained
#                  945[DRIVER] Sending in new packet BEGIN
#                  945ns:  [DRIVER] Sending Payload Begin
#                  945ns:  [DRIVER] Sending in new packet END
#                  945ns:  [DRIVER] Number of packets sent =          91
#                  945ns:  [DRIVER] The number of Packets in the Generator Mailbox =           9
#                  945[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  945ns: [CHECKER] Checker Start
# 
# 
#                  945ns:   [CHECKER] Pkt Contents: src1 = 0000e454, src2 = 0000b83b, imm = 0000dadf, 
#                  945ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  945ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b83b    mem_GOL = 0000b83b
# 
#                  945ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  945ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  945ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  945ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  945ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  945ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  945ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  945ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  945ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  945ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  945ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  945ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  945______Cp0____opselect_chk:      001
#                  945______Cp0____operation_chk:     110
#                  945______Cp0____enable_arith_chk:  0
#                  945______Cp0____enable_shift_chk:  0
#                  945______Cp0____pkt_sent.enable:   0
#                  945______Cp23____
#                  945ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000812c   & Golden Model = 00000812c
# 
#                  955[RECEIVER]  Getting Payload
#                  955[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002efc
#                  955[RECEIVER]  Payload Obtained
#                  955[DRIVER] Sending in new packet BEGIN
#                  955ns:  [DRIVER] Sending Payload Begin
#                  955ns:  [DRIVER] Sending in new packet END
#                  955ns:  [DRIVER] Number of packets sent =          92
#                  955ns:  [DRIVER] The number of Packets in the Generator Mailbox =           8
#                  955[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  955ns: [CHECKER] Checker Start
# 
# 
#                  955ns:   [CHECKER] Pkt Contents: src1 = 000051cd, src2 = 00002efc, imm = 0000d256, 
#                  955ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  955ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002efc    mem_GOL = 00002efc
# 
#                  955ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  955ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  955ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  955ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  955ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  955ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  955ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  955ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  955ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  955ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  955ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  955ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  955______Cp0____opselect_chk:      001
#                  955______Cp0____operation_chk:     110
#                  955______Cp0____enable_arith_chk:  0
#                  955______Cp0____enable_shift_chk:  0
#                  955______Cp0____pkt_sent.enable:   0
#                  955______Cp23____
#                  955ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  965[RECEIVER]  Getting Payload
#                  965[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007944
#                  965[RECEIVER]  Payload Obtained
#                  965[DRIVER] Sending in new packet BEGIN
#                  965ns:  [DRIVER] Sending Payload Begin
#                  965ns:  [DRIVER] Sending in new packet END
#                  965ns:  [DRIVER] Number of packets sent =          93
#                  965ns:  [DRIVER] The number of Packets in the Generator Mailbox =           7
#                  965[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  965ns: [CHECKER] Checker Start
# 
# 
#                  965ns:   [CHECKER] Pkt Contents: src1 = 000023c8, src2 = 00007944, imm = 000020cc, 
#                  965ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  965ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007944    mem_GOL = 00007944
# 
#                  965ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  965ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  965ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  965ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  965ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  965ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  965ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  965ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  965ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  965ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  965ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  965ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  965______Cp0____opselect_chk:      001
#                  965______Cp0____operation_chk:     110
#                  965______Cp0____enable_arith_chk:  0
#                  965______Cp0____enable_shift_chk:  0
#                  965______Cp0____pkt_sent.enable:   0
#                  965______Cp23____
#                  965ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  975[RECEIVER]  Getting Payload
#                  975[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000be00
#                  975[RECEIVER]  Payload Obtained
#                  975[DRIVER] Sending in new packet BEGIN
#                  975ns:  [DRIVER] Sending Payload Begin
#                  975ns:  [DRIVER] Sending in new packet END
#                  975ns:  [DRIVER] Number of packets sent =          94
#                  975ns:  [DRIVER] The number of Packets in the Generator Mailbox =           6
#                  975[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  975ns: [CHECKER] Checker Start
# 
# 
#                  975ns:   [CHECKER] Pkt Contents: src1 = 0000757d, src2 = 0000be00, imm = 0000fe59, 
#                  975ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  975ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000be00    mem_GOL = 0000be00
# 
#                  975ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  975ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000757d   & Golden Model = 0000757d
# 
#                  975ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000fe59   & Golden Model = 0000fe59
# 
#                  975ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  975ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  975ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  975ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  975ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  975ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  975ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  975ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000757d  0000fe59 
#                  975ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  975______Cp0____opselect_chk:      001
#                  975______Cp0____operation_chk:     110
#                  975______Cp0____enable_arith_chk:  1
#                  975______Cp0____enable_shift_chk:  0
#                  975______Cp0____pkt_sent.enable:   1
#                  975______Cp7____
#                  975ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  985[RECEIVER]  Getting Payload
#                  985[RECEIVER]  Payload Contents:  Aluout = 00008b24 mem_write_en = 1 mem_data_write_out = 00009641
#                  985[RECEIVER]  Payload Obtained
#                  985[DRIVER] Sending in new packet BEGIN
#                  985ns:  [DRIVER] Sending Payload Begin
#                  985ns:  [DRIVER] Sending in new packet END
#                  985ns:  [DRIVER] Number of packets sent =          95
#                  985ns:  [DRIVER] The number of Packets in the Generator Mailbox =           5
#                  985[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  985ns: [CHECKER] Checker Start
# 
# 
#                  985ns:   [CHECKER] Pkt Contents: src1 = 00003e50, src2 = 00009641, imm = 0000890d, 
#                  985ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  985ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009641    mem_GOL = 00009641
# 
#                  985ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  985ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003e50   & Golden Model = 00003e50
# 
#                  985ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00009641   & Golden Model = 00009641
# 
#                  985ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  985ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  985ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  985ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  985ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003e50  00009641 
#                  985ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  985______Cp0____opselect_chk:      001
#                  985______Cp0____operation_chk:     001
#                  985______Cp0____enable_arith_chk:  1
#                  985______Cp0____enable_shift_chk:  0
#                  985______Cp0____pkt_sent.enable:   1
#                  985
#                  985______Cp2____
#                  985ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00008b24   & Golden Model = 000008b24
# 
#                  995[RECEIVER]  Getting Payload
#                  995[RECEIVER]  Payload Contents:  Aluout = ffffd491 mem_write_en = 1 mem_data_write_out = 000035de
#                  995[RECEIVER]  Payload Obtained
#                  995[DRIVER] Sending in new packet BEGIN
#                  995ns:  [DRIVER] Sending Payload Begin
#                  995ns:  [DRIVER] Sending in new packet END
#                  995ns:  [DRIVER] Number of packets sent =          96
#                  995ns:  [DRIVER] The number of Packets in the Generator Mailbox =           4
#                  995[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  995ns: [CHECKER] Checker Start
# 
# 
#                  995ns:   [CHECKER] Pkt Contents: src1 = 00004b86, src2 = 000035de, imm = 00007e50, 
#                  995ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  995ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000035de    mem_GOL = 000035de
# 
#                  995ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  995ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004b86   & Golden Model = 00004b86
# 
#                  995ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007e50   & Golden Model = 00007e50
# 
#                  995ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  995ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  995ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  995ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  995ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  995ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  995ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  995ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004b86  00007e50 
#                  995ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  995______Cp0____opselect_chk:      001
#                  995______Cp0____operation_chk:     100
#                  995______Cp0____enable_arith_chk:  1
#                  995______Cp0____enable_shift_chk:  0
#                  995______Cp0____pkt_sent.enable:   1
#                  995______Cp5____
#                  995ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffd491   & Golden Model = 00000d491
# 
#                 1005[RECEIVER]  Getting Payload
#                 1005[RECEIVER]  Payload Contents:  Aluout = 00004a00 mem_write_en = 1 mem_data_write_out = 000072ae
#                 1005[RECEIVER]  Payload Obtained
#                 1005[DRIVER] Sending in new packet BEGIN
#                 1005ns:  [DRIVER] Sending Payload Begin
#                 1005ns:  [DRIVER] Sending in new packet END
#                 1005ns:  [DRIVER] Number of packets sent =          97
#                 1005ns:  [DRIVER] The number of Packets in the Generator Mailbox =           3
#                 1005[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1005ns: [CHECKER] Checker Start
# 
# 
#                 1005ns:   [CHECKER] Pkt Contents: src1 = 0000c9fb, src2 = 000072ae, imm = 0000b046, 
#                 1005ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                 1005ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000072ae    mem_GOL = 000072ae
# 
#                 1005ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1005ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c9fb   & Golden Model = 0000c9fb
# 
#                 1005ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b046   & Golden Model = 0000b046
# 
#                 1005ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1005ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1005ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1005ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1005ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1005ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1005ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1005ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c9fb  0000b046 
#                 1005ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1005______Cp0____opselect_chk:      001
#                 1005______Cp0____operation_chk:     010
#                 1005______Cp0____enable_arith_chk:  1
#                 1005______Cp0____enable_shift_chk:  0
#                 1005______Cp0____pkt_sent.enable:   1
#                 1005______Cp3____
#                 1005ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00004a00   & Golden Model = 000004a00
# 
#                 1015[RECEIVER]  Getting Payload
#                 1015[RECEIVER]  Payload Contents:  Aluout = 000019b5 mem_write_en = 1 mem_data_write_out = 0000d5be
#                 1015[RECEIVER]  Payload Obtained
#                 1015[DRIVER] Sending in new packet BEGIN
#                 1015ns:  [DRIVER] Sending Payload Begin
#                 1015ns:  [DRIVER] Sending in new packet END
#                 1015ns:  [DRIVER] Number of packets sent =          98
#                 1015ns:  [DRIVER] The number of Packets in the Generator Mailbox =           2
#                 1015[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1015ns: [CHECKER] Checker Start
# 
# 
#                 1015ns:   [CHECKER] Pkt Contents: src1 = 0000f8c3, src2 = 0000d5be, imm = 0000b214, 
#                 1015ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                 1015ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d5be    mem_GOL = 0000d5be
# 
#                 1015ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1015ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1015ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1015ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1015ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1015ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1015ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1015ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1015ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1015ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1015ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1015ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1015______Cp0____opselect_chk:      001
#                 1015______Cp0____operation_chk:     111
#                 1015______Cp0____enable_arith_chk:  1
#                 1015______Cp0____enable_shift_chk:  0
#                 1015______Cp0____pkt_sent.enable:   1
#                 1015______Cp7____
#                 1015ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000019b5   & Golden Model = 0000019b5
# 
#                 1025[RECEIVER]  Getting Payload
#                 1025[RECEIVER]  Payload Contents:  Aluout = d5be0000 mem_write_en = 1 mem_data_write_out = 0000105a
#                 1025[RECEIVER]  Payload Obtained
#                 1025[DRIVER] Sending in new packet BEGIN
#                 1025ns:  [DRIVER] Sending Payload Begin
#                 1025ns:  [DRIVER] Sending in new packet END
#                 1025ns:  [DRIVER] Number of packets sent =          99
#                 1025ns:  [DRIVER] The number of Packets in the Generator Mailbox =           1
#                 1025[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1025ns: [CHECKER] Checker Start
# 
# 
#                 1025ns:   [CHECKER] Pkt Contents: src1 = 0000d7fc, src2 = 0000105a, imm = 00004e3d, 
#                 1025ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                 1025ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000105a    mem_GOL = 0000105a
# 
#                 1025ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1025ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1025ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1025ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1025ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1025ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1025ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1025ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1025ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1025ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1025ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1025ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1025______Cp0____opselect_chk:      001
#                 1025______Cp0____operation_chk:     111
#                 1025______Cp0____enable_arith_chk:  0
#                 1025______Cp0____enable_shift_chk:  0
#                 1025______Cp0____pkt_sent.enable:   0
#                 1025______Cp23____
#                 1025ns:   [ASSERT_aluout] PASS ALUOUT: DUT = d5be0000   & Golden Model = 0d5be0000
# 
#                 1035[RECEIVER]  Getting Payload
#                 1035[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007f8c
#                 1035[RECEIVER]  Payload Obtained
#                 1035[DRIVER] Sending in new packet BEGIN
#                 1035ns:  [DRIVER] Sending Payload Begin
#                 1035ns:  [DRIVER] Sending in new packet END
#                 1035ns:  [DRIVER] Number of packets sent =         100
#                 1035ns:  [DRIVER] The number of Packets in the Generator Mailbox =           0
#                 1035[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1035ns: [CHECKER] Checker Start
# 
# 
#                 1035ns:   [CHECKER] Pkt Contents: src1 = 0000eb5f, src2 = 00007f8c, imm = 0000c5cb, 
#                 1035ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                 1035ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007f8c    mem_GOL = 00007f8c
# 
#                 1035ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1035ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1035ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1035ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1035ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1035ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1035ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1035ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1035ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1035ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1035ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1035ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1035______Cp0____opselect_chk:      001
#                 1035______Cp0____operation_chk:     111
#                 1035______Cp0____enable_arith_chk:  0
#                 1035______Cp0____enable_shift_chk:  0
#                 1035______Cp0____pkt_sent.enable:   0
#                 1035______Cp23____
#                 1035ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0d5be0000
# 
#                 1045[RECEIVER]  Getting Payload
#                 1045[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000fa73
#                 1045[RECEIVER]  Payload Obtained
#                 1045[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1045ns: [CHECKER] Checker Start
# 
# 
#                 1045ns:   [CHECKER] Pkt Contents: src1 = 0000f5d5, src2 = 0000fa73, imm = 0000f4e6, 
#                 1045ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                 1045ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000fa73    mem_GOL = 0000fa73
# 
#                 1045ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1045ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f5d5   & Golden Model = 0000f5d5
# 
#                 1045ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000f4e6   & Golden Model = 0000f4e6
# 
#                 1045ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1045ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1045ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1045ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1045ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1045ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1045ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1045ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f5d5  0000f4e6 
#                 1045ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1045______Cp0____opselect_chk:      001
#                 1045______Cp0____operation_chk:     010
#                 1045______Cp0____enable_arith_chk:  1
#                 1045______Cp0____enable_shift_chk:  0
#                 1045______Cp0____pkt_sent.enable:   1
#                 1045______Cp3____
#                 1045ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0d5be0000
# 
#                 1055[RECEIVER]  Getting Payload
#                 1055[RECEIVER]  Payload Contents:  Aluout = 000000ef mem_write_en = 1 mem_data_write_out = 0000f0b4
#                 1055[RECEIVER]  Payload Obtained
#                 1055[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1055ns: [CHECKER] Checker Start
# 
# 
#                 1055ns:   [CHECKER] Pkt Contents: src1 = 00003f6e, src2 = 0000f0b4, imm = 00009182, 
#                 1055ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                 1055ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f0b4    mem_GOL = 0000f0b4
# 
#                 1055ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1055ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f5d5   & Golden Model = 0000f5d5
# 
#                 1055ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000f4e6   & Golden Model = 0000f4e6
# 
#                 1055ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1055ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1055ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1055ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1055ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1055ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1055ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1055ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f5d5  0000f4e6 
#                 1055ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1055______Cp0____opselect_chk:      001
#                 1055______Cp0____operation_chk:     010
#                 1055______Cp0____enable_arith_chk:  0
#                 1055______Cp0____enable_shift_chk:  0
#                 1055______Cp0____pkt_sent.enable:   0
#                 1055______Cp23____
#                 1055ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000000ef   & Golden Model = 0000000ef
# 
# Number tests : 1100, Pass: 931, Fail: 169
# Accuracy: 84.00%
#                 1065WE ARE DONE .. GO HOME AND SLEEP!!! .. ACTUALLY NOT YET .. 
# ** Note: implicit $finish from program    : /media/kien/data/kien/20241/design_verify_ic/Lab3_16_11/Lab3/Execute.tb.sv(38)
#    Time: 1065 ns  Iteration: 1  Instance: /Execute_test_top/test
# 1
# Simulation stop requested.
quit -sim
# End time: 11:41:11 on Nov 16,2024, Elapsed time: 0:01:09
# Errors: 0, Warnings: 0
vsim -voptargs=+acc work.Execute_test_top
# vsim -voptargs="+acc" work.Execute_test_top 
# Start time: 11:41:13 on Nov 16,2024
# ** Note: (vsim-8009) Loading existing optimized design _opt
# Loading sv_std.std
# Loading work.Execute_test_top(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
# Loading work.Top(fast)
# Loading work.Ex_Preproc(fast)
# Loading work.ALU(fast)
# Loading work.Arith_ALU(fast)
# Loading work.Shift_ALU(fast)
# Loading work.Execute_tb_sv_unit(fast)
# Loading work.Execute_test(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
add wave -position insertpoint sim:/Execute_test_top/top_io/*
run -all
#                    0ns:  [RESET]  Design Reset Start
#                   45ns:  [RESET]  Design Reset End
# [                  45ns] Start test case for : arith_logic
#                   45ns:  [GENERATOR] Generator Started
#                   45ns:  [DRIVER] Driver Started
#                   45[DRIVER] DRIVER Forking of process is finished
#                   45[SCOREBOARD] Scoreboard Started
#                   45[SCOREBOARD] Receiver Mailbox contents =           0
#                   45[SCOREBOARD] Forking of Process Finished
#                   45[RECEIVER]  RECEIVER STARTED
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
#                   45ns:  [GENERATOR] Generation Finished Creating         100 Packets  
#                   45[DRIVER] Sending in new packet BEGIN
#                   45ns:  [DRIVER] Sending Payload Begin
#                   45ns:  [DRIVER] Sending in new packet END
#                   45ns:  [DRIVER] Number of packets sent =           1
#                   45ns:  [DRIVER] The number of Packets in the Generator Mailbox =          99
#                   55[RECEIVER] Forking of Process Finished
#                   55[DRIVER] Sending in new packet BEGIN
#                   55ns:  [DRIVER] Sending Payload Begin
#                   55ns:  [DRIVER] Sending in new packet END
#                   55ns:  [DRIVER] Number of packets sent =           2
#                   55ns:  [DRIVER] The number of Packets in the Generator Mailbox =          98
#                   65[RECEIVER]  Getting Payload
#                   65[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001eed
#                   65[RECEIVER]  Payload Obtained
#                   65[DRIVER] Sending in new packet BEGIN
#                   65ns:  [DRIVER] Sending Payload Begin
#                   65ns:  [DRIVER] Sending in new packet END
#                   65ns:  [DRIVER] Number of packets sent =           3
#                   65ns:  [DRIVER] The number of Packets in the Generator Mailbox =          97
#                   65[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   65ns: [CHECKER] Checker Start
# 
# 
#                   65ns:   [CHECKER] Pkt Contents: src1 = 000020b0, src2 = 00001eed, imm = 0000429c, 
#                   65ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                   65ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001eed    mem_GOL = 00001eed
# 
#                   65ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   65ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   65ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   65ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   65ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   65ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   65______Cp0____opselect_chk:      000
#                   65______Cp0____operation_chk:     000
#                   65______Cp0____enable_arith_chk:  0
#                   65______Cp0____enable_shift_chk:  0
#                   65______Cp0____pkt_sent.enable:   0
#                   65______Cp23____
#                   65ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   75[RECEIVER]  Getting Payload
#                   75[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d866
#                   75[RECEIVER]  Payload Obtained
#                   75[DRIVER] Sending in new packet BEGIN
#                   75ns:  [DRIVER] Sending Payload Begin
#                   75ns:  [DRIVER] Sending in new packet END
#                   75ns:  [DRIVER] Number of packets sent =           4
#                   75ns:  [DRIVER] The number of Packets in the Generator Mailbox =          96
#                   75[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   75ns: [CHECKER] Checker Start
# 
# 
#                   75ns:   [CHECKER] Pkt Contents: src1 = 0000efe1, src2 = 0000d866, imm = 0000d1e4, 
#                   75ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                   75ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d866    mem_GOL = 0000d866
# 
#                   75ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   75ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   75ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   75ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   75ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   75ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   75______Cp0____opselect_chk:      000
#                   75______Cp0____operation_chk:     000
#                   75______Cp0____enable_arith_chk:  0
#                   75______Cp0____enable_shift_chk:  0
#                   75______Cp0____pkt_sent.enable:   0
#                   75______Cp23____
#                   75ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   85[RECEIVER]  Getting Payload
#                   85[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001dc0
#                   85[RECEIVER]  Payload Obtained
#                   85[DRIVER] Sending in new packet BEGIN
#                   85ns:  [DRIVER] Sending Payload Begin
#                   85ns:  [DRIVER] Sending in new packet END
#                   85ns:  [DRIVER] Number of packets sent =           5
#                   85ns:  [DRIVER] The number of Packets in the Generator Mailbox =          95
#                   85[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   85ns: [CHECKER] Checker Start
# 
# 
#                   85ns:   [CHECKER] Pkt Contents: src1 = 0000b08a, src2 = 00001dc0, imm = 00002342, 
#                   85ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                   85ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001dc0    mem_GOL = 00001dc0
# 
#                   85ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   85ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   85ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001dc0   & Golden Model = 00001dc0
# 
#                   85ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   85ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                   85ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   85ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   85ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                   85ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  00001dc0 
#                   85ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                   85______Cp0____opselect_chk:      001
#                   85______Cp0____operation_chk:     110
#                   85______Cp0____enable_arith_chk:  1
#                   85______Cp0____enable_shift_chk:  0
#                   85______Cp0____pkt_sent.enable:   1
#                   85______Cp7____
#                   85ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   95[RECEIVER]  Getting Payload
#                   95[RECEIVER]  Payload Contents:  Aluout = 0000ad4a mem_write_en = 1 mem_data_write_out = 0000726e
#                   95[RECEIVER]  Payload Obtained
#                   95[DRIVER] Sending in new packet BEGIN
#                   95ns:  [DRIVER] Sending Payload Begin
#                   95ns:  [DRIVER] Sending in new packet END
#                   95ns:  [DRIVER] Number of packets sent =           6
#                   95ns:  [DRIVER] The number of Packets in the Generator Mailbox =          94
#                   95[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   95ns: [CHECKER] Checker Start
# 
# 
#                   95ns:   [CHECKER] Pkt Contents: src1 = 00002ead, src2 = 0000726e, imm = 000087fe, 
#                   95ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                   95ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000726e    mem_GOL = 0000726e
# 
#                   95ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   95ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   95ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001dc0   & Golden Model = 00001dc0
# 
#                   95ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                   95ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                   95ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   95ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   95ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   95ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  00001dc0 
#                   95ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                   95______Cp0____opselect_chk:      001
#                   95______Cp0____operation_chk:     110
#                   95______Cp0____enable_arith_chk:  0
#                   95______Cp0____enable_shift_chk:  0
#                   95______Cp0____pkt_sent.enable:   0
#                   95______Cp23____
#                   95ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ad4a   & Golden Model = 00000ad4a
# 
#                  105[RECEIVER]  Getting Payload
#                  105[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000c3de
#                  105[RECEIVER]  Payload Obtained
#                  105[DRIVER] Sending in new packet BEGIN
#                  105ns:  [DRIVER] Sending Payload Begin
#                  105ns:  [DRIVER] Sending in new packet END
#                  105ns:  [DRIVER] Number of packets sent =           7
#                  105ns:  [DRIVER] The number of Packets in the Generator Mailbox =          93
#                  105[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  105ns: [CHECKER] Checker Start
# 
# 
#                  105ns:   [CHECKER] Pkt Contents: src1 = 00009c52, src2 = 0000c3de, imm = 00000742, 
#                  105ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  105ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000c3de    mem_GOL = 0000c3de
# 
#                  105ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  105ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  105ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000c3de   & Golden Model = 0000c3de
# 
#                  105ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  105ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  105ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  105ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  0000c3de 
#                  105ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  105______Cp0____opselect_chk:      001
#                  105______Cp0____operation_chk:     000
#                  105______Cp0____enable_arith_chk:  1
#                  105______Cp0____enable_shift_chk:  0
#                  105______Cp0____pkt_sent.enable:   1
#                  105______Cp1____
#                  105ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ad4a
# 
#                  115[RECEIVER]  Getting Payload
#                  115[RECEIVER]  Payload Contents:  Aluout = 00016030 mem_write_en = 1 mem_data_write_out = 00005c33
#                  115[RECEIVER]  Payload Obtained
#                  115[DRIVER] Sending in new packet BEGIN
#                  115ns:  [DRIVER] Sending Payload Begin
#                  115ns:  [DRIVER] Sending in new packet END
#                  115ns:  [DRIVER] Number of packets sent =           8
#                  115ns:  [DRIVER] The number of Packets in the Generator Mailbox =          92
#                  115[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  115ns: [CHECKER] Checker Start
# 
# 
#                  115ns:   [CHECKER] Pkt Contents: src1 = 0000c7ba, src2 = 00005c33, imm = 000035f9, 
#                  115ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  115ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005c33    mem_GOL = 00005c33
# 
#                  115ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  115ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  115ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000c3de   & Golden Model = 0000c3de
# 
#                  115ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  115ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  115ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  115ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  115ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  0000c3de 
#                  115ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  115______Cp0____opselect_chk:      001
#                  115______Cp0____operation_chk:     000
#                  115______Cp0____enable_arith_chk:  0
#                  115______Cp0____enable_shift_chk:  0
#                  115______Cp0____pkt_sent.enable:   0
#                  115______Cp23____
#                  115ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00016030   & Golden Model = 000016030
# 
#                  125[RECEIVER]  Getting Payload
#                  125[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d01b
#                  125[RECEIVER]  Payload Obtained
#                  125[DRIVER] Sending in new packet BEGIN
#                  125ns:  [DRIVER] Sending Payload Begin
#                  125ns:  [DRIVER] Sending in new packet END
#                  125ns:  [DRIVER] Number of packets sent =           9
#                  125ns:  [DRIVER] The number of Packets in the Generator Mailbox =          91
#                  125[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  125ns: [CHECKER] Checker Start
# 
# 
#                  125ns:   [CHECKER] Pkt Contents: src1 = 0000f92e, src2 = 0000d01b, imm = 000029f2, 
#                  125ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  125ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d01b    mem_GOL = 0000d01b
# 
#                  125ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  125ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f92e   & Golden Model = 0000f92e
# 
#                  125ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000029f2   & Golden Model = 000029f2
# 
#                  125ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  125ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  125ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  125ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  125ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  125ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f92e  000029f2 
#                  125ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  125______Cp0____opselect_chk:      001
#                  125______Cp0____operation_chk:     100
#                  125______Cp0____enable_arith_chk:  1
#                  125______Cp0____enable_shift_chk:  0
#                  125______Cp0____pkt_sent.enable:   1
#                  125______Cp5____
#                  125ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 000016030
# 
#                  135[RECEIVER]  Getting Payload
#                  135[RECEIVER]  Payload Contents:  Aluout = 00002922 mem_write_en = 1 mem_data_write_out = 0000e9ec
#                  135[RECEIVER]  Payload Obtained
#                  135[DRIVER] Sending in new packet BEGIN
#                  135ns:  [DRIVER] Sending Payload Begin
#                  135ns:  [DRIVER] Sending in new packet END
#                  135ns:  [DRIVER] Number of packets sent =          10
#                  135ns:  [DRIVER] The number of Packets in the Generator Mailbox =          90
#                  135[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  135ns: [CHECKER] Checker Start
# 
# 
#                  135ns:   [CHECKER] Pkt Contents: src1 = 00004170, src2 = 0000e9ec, imm = 000015ae, 
#                  135ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  135ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e9ec    mem_GOL = 0000e9ec
# 
#                  135ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  135ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004170   & Golden Model = 00004170
# 
#                  135ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000015ae   & Golden Model = 000015ae
# 
#                  135ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  135ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  135ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  135ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  135ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  135ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004170  000015ae 
#                  135ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  135______Cp0____opselect_chk:      001
#                  135______Cp0____operation_chk:     011
#                  135______Cp0____enable_arith_chk:  1
#                  135______Cp0____enable_shift_chk:  0
#                  135______Cp0____pkt_sent.enable:   1
#                  135______Cp4____
#                  135ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00002922   & Golden Model = 000002922
# 
#                  145[RECEIVER]  Getting Payload
#                  145[RECEIVER]  Payload Contents:  Aluout = ffffea51 mem_write_en = 1 mem_data_write_out = 0000ec65
#                  145[RECEIVER]  Payload Obtained
#                  145[DRIVER] Sending in new packet BEGIN
#                  145ns:  [DRIVER] Sending Payload Begin
#                  145ns:  [DRIVER] Sending in new packet END
#                  145ns:  [DRIVER] Number of packets sent =          11
#                  145ns:  [DRIVER] The number of Packets in the Generator Mailbox =          89
#                  145[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  145ns: [CHECKER] Checker Start
# 
# 
#                  145ns:   [CHECKER] Pkt Contents: src1 = 0000c030, src2 = 0000ec65, imm = 00007567, 
#                  145ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  145ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ec65    mem_GOL = 0000ec65
# 
#                  145ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  145ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c030   & Golden Model = 0000c030
# 
#                  145ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007567   & Golden Model = 00007567
# 
#                  145ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  145ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  145ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  145ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  145ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  145ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c030  00007567 
#                  145ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  145______Cp0____opselect_chk:      001
#                  145______Cp0____operation_chk:     100
#                  145______Cp0____enable_arith_chk:  1
#                  145______Cp0____enable_shift_chk:  0
#                  145______Cp0____pkt_sent.enable:   1
#                  145______Cp5____
#                  145ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffea51   & Golden Model = 1ffffea51
# 
#                  155[RECEIVER]  Getting Payload
#                  155[RECEIVER]  Payload Contents:  Aluout = 00004020 mem_write_en = 1 mem_data_write_out = 0000e400
#                  155[RECEIVER]  Payload Obtained
#                  155[DRIVER] Sending in new packet BEGIN
#                  155ns:  [DRIVER] Sending Payload Begin
#                  155ns:  [DRIVER] Sending in new packet END
#                  155ns:  [DRIVER] Number of packets sent =          12
#                  155ns:  [DRIVER] The number of Packets in the Generator Mailbox =          88
#                  155[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  155ns: [CHECKER] Checker Start
# 
# 
#                  155ns:   [CHECKER] Pkt Contents: src1 = 00000ef0, src2 = 0000e400, imm = 0000ba65, 
#                  155ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  155ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e400    mem_GOL = 0000e400
# 
#                  155ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  155ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000ef0   & Golden Model = 00000ef0
# 
#                  155ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ba65   & Golden Model = 0000ba65
# 
#                  155ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  155ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  155ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  155ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  155ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  155ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000ef0  0000ba65 
#                  155ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  155______Cp0____opselect_chk:      001
#                  155______Cp0____operation_chk:     111
#                  155______Cp0____enable_arith_chk:  1
#                  155______Cp0____enable_shift_chk:  0
#                  155______Cp0____pkt_sent.enable:   1
#                  155______Cp7____
#                  155ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00004020   & Golden Model = 000004020
# 
#                  165[RECEIVER]  Getting Payload
#                  165[RECEIVER]  Payload Contents:  Aluout = ba650000 mem_write_en = 1 mem_data_write_out = 00002f1f
#                  165[RECEIVER]  Payload Obtained
#                  165[DRIVER] Sending in new packet BEGIN
#                  165ns:  [DRIVER] Sending Payload Begin
#                  165ns:  [DRIVER] Sending in new packet END
#                  165ns:  [DRIVER] Number of packets sent =          13
#                  165ns:  [DRIVER] The number of Packets in the Generator Mailbox =          87
#                  165[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  165ns: [CHECKER] Checker Start
# 
# 
#                  165ns:   [CHECKER] Pkt Contents: src1 = 0000f1a2, src2 = 00002f1f, imm = 0000cbca, 
#                  165ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  165ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002f1f    mem_GOL = 00002f1f
# 
#                  165ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  165ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f1a2   & Golden Model = 0000f1a2
# 
#                  165ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000cbca   & Golden Model = 0000cbca
# 
#                  165ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  165ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  165ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  165ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  165ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  165ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  165ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  165ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f1a2  0000cbca 
#                  165ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  165______Cp0____opselect_chk:      001
#                  165______Cp0____operation_chk:     101
#                  165______Cp0____enable_arith_chk:  1
#                  165______Cp0____enable_shift_chk:  0
#                  165______Cp0____pkt_sent.enable:   1
#                  165______Cp6____
#                  165ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ba650000   & Golden Model = 0ba650000
# 
#                  175[RECEIVER]  Getting Payload
#                  175[RECEIVER]  Payload Contents:  Aluout = 0000fbea mem_write_en = 1 mem_data_write_out = 0000189a
#                  175[RECEIVER]  Payload Obtained
#                  175[DRIVER] Sending in new packet BEGIN
#                  175ns:  [DRIVER] Sending Payload Begin
#                  175ns:  [DRIVER] Sending in new packet END
#                  175ns:  [DRIVER] Number of packets sent =          14
#                  175ns:  [DRIVER] The number of Packets in the Generator Mailbox =          86
#                  175[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  175ns: [CHECKER] Checker Start
# 
# 
#                  175ns:   [CHECKER] Pkt Contents: src1 = 0000362e, src2 = 0000189a, imm = 0000888c, 
#                  175ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  175ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000189a    mem_GOL = 0000189a
# 
#                  175ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  175ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f1a2   & Golden Model = 0000f1a2
# 
#                  175ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000cbca   & Golden Model = 0000cbca
# 
#                  175ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  175ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  175ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  175ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  175ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  175ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  175ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  175ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f1a2  0000cbca 
#                  175ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  175______Cp0____opselect_chk:      001
#                  175______Cp0____operation_chk:     101
#                  175______Cp0____enable_arith_chk:  0
#                  175______Cp0____enable_shift_chk:  0
#                  175______Cp0____pkt_sent.enable:   0
#                  175______Cp23____
#                  175ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000fbea   & Golden Model = 00000fbea
# 
#                  185[RECEIVER]  Getting Payload
#                  185[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00003d82
#                  185[RECEIVER]  Payload Obtained
#                  185[DRIVER] Sending in new packet BEGIN
#                  185ns:  [DRIVER] Sending Payload Begin
#                  185ns:  [DRIVER] Sending in new packet END
#                  185ns:  [DRIVER] Number of packets sent =          15
#                  185ns:  [DRIVER] The number of Packets in the Generator Mailbox =          85
#                  185[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  185ns: [CHECKER] Checker Start
# 
# 
#                  185ns:   [CHECKER] Pkt Contents: src1 = 000085d3, src2 = 00003d82, imm = 00002a36, 
#                  185ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  185ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00003d82    mem_GOL = 00003d82
# 
#                  185ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  185ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000085d3   & Golden Model = 000085d3
# 
#                  185ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003d82   & Golden Model = 00003d82
# 
#                  185ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  185ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  185ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  185ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  185ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  185ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  185ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  185ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000085d3  00003d82 
#                  185ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  185______Cp0____opselect_chk:      001
#                  185______Cp0____operation_chk:     000
#                  185______Cp0____enable_arith_chk:  1
#                  185______Cp0____enable_shift_chk:  0
#                  185______Cp0____pkt_sent.enable:   1
#                  185______Cp1____
#                  185ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000fbea
# 
#                  195[RECEIVER]  Getting Payload
#                  195[RECEIVER]  Payload Contents:  Aluout = 0000c355 mem_write_en = 1 mem_data_write_out = 00000b75
#                  195[RECEIVER]  Payload Obtained
#                  195[DRIVER] Sending in new packet BEGIN
#                  195ns:  [DRIVER] Sending Payload Begin
#                  195ns:  [DRIVER] Sending in new packet END
#                  195ns:  [DRIVER] Number of packets sent =          16
#                  195ns:  [DRIVER] The number of Packets in the Generator Mailbox =          84
#                  195[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  195ns: [CHECKER] Checker Start
# 
# 
#                  195ns:   [CHECKER] Pkt Contents: src1 = 0000dd0c, src2 = 00000b75, imm = 00000f42, 
#                  195ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  195ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000b75    mem_GOL = 00000b75
# 
#                  195ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  195ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  195ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  195ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  195ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  195ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  195ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  195ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  195ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  195ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  195ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  195ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  195______Cp0____opselect_chk:      001
#                  195______Cp0____operation_chk:     011
#                  195______Cp0____enable_arith_chk:  1
#                  195______Cp0____enable_shift_chk:  0
#                  195______Cp0____pkt_sent.enable:   1
#                  195______Cp4____
#                  195ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c355   & Golden Model = 00000c355
# 
#                  205[RECEIVER]  Getting Payload
#                  205[RECEIVER]  Payload Contents:  Aluout = fffff48a mem_write_en = 1 mem_data_write_out = 0000be75
#                  205[RECEIVER]  Payload Obtained
#                  205[DRIVER] Sending in new packet BEGIN
#                  205ns:  [DRIVER] Sending Payload Begin
#                  205ns:  [DRIVER] Sending in new packet END
#                  205ns:  [DRIVER] Number of packets sent =          17
#                  205ns:  [DRIVER] The number of Packets in the Generator Mailbox =          83
#                  205[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  205ns: [CHECKER] Checker Start
# 
# 
#                  205ns:   [CHECKER] Pkt Contents: src1 = 0000914a, src2 = 0000be75, imm = 00007a4d, 
#                  205ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  205ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000be75    mem_GOL = 0000be75
# 
#                  205ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  205ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  205ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  205ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  205ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  205ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  205ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  205ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  205ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  205ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  205ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  205ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  205______Cp0____opselect_chk:      001
#                  205______Cp0____operation_chk:     011
#                  205______Cp0____enable_arith_chk:  0
#                  205______Cp0____enable_shift_chk:  0
#                  205______Cp0____pkt_sent.enable:   0
#                  205______Cp23____
#                  205ns:   [ASSERT_aluout] PASS ALUOUT: DUT = fffff48a   & Golden Model = 1fffff48a
# 
#                  215[RECEIVER]  Getting Payload
#                  215[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e291
#                  215[RECEIVER]  Payload Obtained
#                  215[DRIVER] Sending in new packet BEGIN
#                  215ns:  [DRIVER] Sending Payload Begin
#                  215ns:  [DRIVER] Sending in new packet END
#                  215ns:  [DRIVER] Number of packets sent =          18
#                  215ns:  [DRIVER] The number of Packets in the Generator Mailbox =          82
#                  215[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  215ns: [CHECKER] Checker Start
# 
# 
#                  215ns:   [CHECKER] Pkt Contents: src1 = 00001c75, src2 = 0000e291, imm = 0000e28c, 
#                  215ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  215ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e291    mem_GOL = 0000e291
# 
#                  215ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  215ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  215ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  215ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  215ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  215ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  215ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  215ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  215ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  215ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  215ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  215ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  215______Cp0____opselect_chk:      001
#                  215______Cp0____operation_chk:     011
#                  215______Cp0____enable_arith_chk:  0
#                  215______Cp0____enable_shift_chk:  0
#                  215______Cp0____pkt_sent.enable:   0
#                  215______Cp23____
#                  215ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  225[RECEIVER]  Getting Payload
#                  225[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00006408
#                  225[RECEIVER]  Payload Obtained
#                  225[DRIVER] Sending in new packet BEGIN
#                  225ns:  [DRIVER] Sending Payload Begin
#                  225ns:  [DRIVER] Sending in new packet END
#                  225ns:  [DRIVER] Number of packets sent =          19
#                  225ns:  [DRIVER] The number of Packets in the Generator Mailbox =          81
#                  225[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  225ns: [CHECKER] Checker Start
# 
# 
#                  225ns:   [CHECKER] Pkt Contents: src1 = 0000b7fd, src2 = 00006408, imm = 00006715, 
#                  225ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  225ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006408    mem_GOL = 00006408
# 
#                  225ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  225ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  225ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  225ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  225ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  225ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  225ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  225ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  225ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  225ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  225ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  225ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  225______Cp0____opselect_chk:      001
#                  225______Cp0____operation_chk:     011
#                  225______Cp0____enable_arith_chk:  0
#                  225______Cp0____enable_shift_chk:  0
#                  225______Cp0____pkt_sent.enable:   0
#                  225______Cp23____
#                  225ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  235[RECEIVER]  Getting Payload
#                  235[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000969f
#                  235[RECEIVER]  Payload Obtained
#                  235[DRIVER] Sending in new packet BEGIN
#                  235ns:  [DRIVER] Sending Payload Begin
#                  235ns:  [DRIVER] Sending in new packet END
#                  235ns:  [DRIVER] Number of packets sent =          20
#                  235ns:  [DRIVER] The number of Packets in the Generator Mailbox =          80
#                  235[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  235ns: [CHECKER] Checker Start
# 
# 
#                  235ns:   [CHECKER] Pkt Contents: src1 = 00009c58, src2 = 0000969f, imm = 00008e0c, 
#                  235ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  235ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000969f    mem_GOL = 0000969f
# 
#                  235ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  235ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c58   & Golden Model = 00009c58
# 
#                  235ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008e0c   & Golden Model = 00008e0c
# 
#                  235ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  235ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  235ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  235ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  235ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  235ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  235ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  235ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c58  00008e0c 
#                  235ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  235______Cp0____opselect_chk:      001
#                  235______Cp0____operation_chk:     011
#                  235______Cp0____enable_arith_chk:  1
#                  235______Cp0____enable_shift_chk:  0
#                  235______Cp0____pkt_sent.enable:   1
#                  235______Cp4____
#                  235ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  245[RECEIVER]  Getting Payload
#                  245[RECEIVER]  Payload Contents:  Aluout = ffff71f3 mem_write_en = 1 mem_data_write_out = 0000498a
#                  245[RECEIVER]  Payload Obtained
#                  245[DRIVER] Sending in new packet BEGIN
#                  245ns:  [DRIVER] Sending Payload Begin
#                  245ns:  [DRIVER] Sending in new packet END
#                  245ns:  [DRIVER] Number of packets sent =          21
#                  245ns:  [DRIVER] The number of Packets in the Generator Mailbox =          79
#                  245[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  245ns: [CHECKER] Checker Start
# 
# 
#                  245ns:   [CHECKER] Pkt Contents: src1 = 0000658f, src2 = 0000498a, imm = 0000390b, 
#                  245ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  245ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000498a    mem_GOL = 0000498a
# 
#                  245ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  245ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000658f   & Golden Model = 0000658f
# 
#                  245ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000390b   & Golden Model = 0000390b
# 
#                  245ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  245ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  245ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  245ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  245ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  245ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  245ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  245ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000658f  0000390b 
#                  245ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  245______Cp0____opselect_chk:      001
#                  245______Cp0____operation_chk:     101
#                  245______Cp0____enable_arith_chk:  1
#                  245______Cp0____enable_shift_chk:  0
#                  245______Cp0____pkt_sent.enable:   1
#                  245______Cp6____
#                  245ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff71f3   & Golden Model = 1ffff71f3
# 
#                  255[RECEIVER]  Getting Payload
#                  255[RECEIVER]  Payload Contents:  Aluout = 00007d8f mem_write_en = 1 mem_data_write_out = 0000daf8
#                  255[RECEIVER]  Payload Obtained
#                  255[DRIVER] Sending in new packet BEGIN
#                  255ns:  [DRIVER] Sending Payload Begin
#                  255ns:  [DRIVER] Sending in new packet END
#                  255ns:  [DRIVER] Number of packets sent =          22
#                  255ns:  [DRIVER] The number of Packets in the Generator Mailbox =          78
#                  255[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  255ns: [CHECKER] Checker Start
# 
# 
#                  255ns:   [CHECKER] Pkt Contents: src1 = 000000e2, src2 = 0000daf8, imm = 00005c36, 
#                  255ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  255ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000daf8    mem_GOL = 0000daf8
# 
#                  255ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  255ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000000e2   & Golden Model = 000000e2
# 
#                  255ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005c36   & Golden Model = 00005c36
# 
#                  255ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  255ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  255ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  255ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  255ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  255ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  255ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  255ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000000e2  00005c36 
#                  255ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  255______Cp0____opselect_chk:      001
#                  255______Cp0____operation_chk:     010
#                  255______Cp0____enable_arith_chk:  1
#                  255______Cp0____enable_shift_chk:  0
#                  255______Cp0____pkt_sent.enable:   1
#                  255______Cp3____
#                  255ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00007d8f   & Golden Model = 000007d8f
# 
#                  265[RECEIVER]  Getting Payload
#                  265[RECEIVER]  Payload Contents:  Aluout = ffffa4ac mem_write_en = 1 mem_data_write_out = 0000ae45
#                  265[RECEIVER]  Payload Obtained
#                  265[DRIVER] Sending in new packet BEGIN
#                  265ns:  [DRIVER] Sending Payload Begin
#                  265ns:  [DRIVER] Sending in new packet END
#                  265ns:  [DRIVER] Number of packets sent =          23
#                  265ns:  [DRIVER] The number of Packets in the Generator Mailbox =          77
#                  265[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  265ns: [CHECKER] Checker Start
# 
# 
#                  265ns:   [CHECKER] Pkt Contents: src1 = 00009d08, src2 = 0000ae45, imm = 00007769, 
#                  265ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  265ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ae45    mem_GOL = 0000ae45
# 
#                  265ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  265ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009d08   & Golden Model = 00009d08
# 
#                  265ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007769   & Golden Model = 00007769
# 
#                  265ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  265ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  265ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  265ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  265ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  265ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  265ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  265ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009d08  00007769 
#                  265ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  265______Cp0____opselect_chk:      001
#                  265______Cp0____operation_chk:     100
#                  265______Cp0____enable_arith_chk:  1
#                  265______Cp0____enable_shift_chk:  0
#                  265______Cp0____pkt_sent.enable:   1
#                  265______Cp5____
#                  265ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffa4ac   & Golden Model = 1ffffa4ac
# 
#                  275[RECEIVER]  Getting Payload
#                  275[RECEIVER]  Payload Contents:  Aluout = 00001508 mem_write_en = 1 mem_data_write_out = 00009c7d
#                  275[RECEIVER]  Payload Obtained
#                  275[DRIVER] Sending in new packet BEGIN
#                  275ns:  [DRIVER] Sending Payload Begin
#                  275ns:  [DRIVER] Sending in new packet END
#                  275ns:  [DRIVER] Number of packets sent =          24
#                  275ns:  [DRIVER] The number of Packets in the Generator Mailbox =          76
#                  275[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  275ns: [CHECKER] Checker Start
# 
# 
#                  275ns:   [CHECKER] Pkt Contents: src1 = 00007b70, src2 = 00009c7d, imm = 000018f5, 
#                  275ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  275ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009c7d    mem_GOL = 00009c7d
# 
#                  275ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  275ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00007b70   & Golden Model = 00007b70
# 
#                  275ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000018f5   & Golden Model = 000018f5
# 
#                  275ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  275ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  275ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  275ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  275ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00007b70  000018f5 
#                  275ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  275______Cp0____opselect_chk:      001
#                  275______Cp0____operation_chk:     001
#                  275______Cp0____enable_arith_chk:  1
#                  275______Cp0____enable_shift_chk:  0
#                  275______Cp0____pkt_sent.enable:   1
#                  275
#                  275______Cp2____
#                  275ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00001508   & Golden Model = 000001508
# 
#                  285[RECEIVER]  Getting Payload
#                  285[RECEIVER]  Payload Contents:  Aluout = ffff9465 mem_write_en = 1 mem_data_write_out = 00004308
#                  285[RECEIVER]  Payload Obtained
#                  285[DRIVER] Sending in new packet BEGIN
#                  285ns:  [DRIVER] Sending Payload Begin
#                  285ns:  [DRIVER] Sending in new packet END
#                  285ns:  [DRIVER] Number of packets sent =          25
#                  285ns:  [DRIVER] The number of Packets in the Generator Mailbox =          75
#                  285[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  285ns: [CHECKER] Checker Start
# 
# 
#                  285ns:   [CHECKER] Pkt Contents: src1 = 0000c243, src2 = 00004308, imm = 0000fa80, 
#                  285ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  285ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004308    mem_GOL = 00004308
# 
#                  285ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  285ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c243   & Golden Model = 0000c243
# 
#                  285ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004308   & Golden Model = 00004308
# 
#                  285ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  285ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  285ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  285ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  285ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  285ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  285ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  285ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c243  00004308 
#                  285ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  285______Cp0____opselect_chk:      001
#                  285______Cp0____operation_chk:     000
#                  285______Cp0____enable_arith_chk:  1
#                  285______Cp0____enable_shift_chk:  0
#                  285______Cp0____pkt_sent.enable:   1
#                  285______Cp1____
#                  285ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffff9465   & Golden Model = 000009465
# 
#                  295[RECEIVER]  Getting Payload
#                  295[RECEIVER]  Payload Contents:  Aluout = 0001054b mem_write_en = 1 mem_data_write_out = 000013c8
#                  295[RECEIVER]  Payload Obtained
#                  295[DRIVER] Sending in new packet BEGIN
#                  295ns:  [DRIVER] Sending Payload Begin
#                  295ns:  [DRIVER] Sending in new packet END
#                  295ns:  [DRIVER] Number of packets sent =          26
#                  295ns:  [DRIVER] The number of Packets in the Generator Mailbox =          74
#                  295[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  295ns: [CHECKER] Checker Start
# 
# 
#                  295ns:   [CHECKER] Pkt Contents: src1 = 00005af8, src2 = 000013c8, imm = 00002878, 
#                  295ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  295ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000013c8    mem_GOL = 000013c8
# 
#                  295ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  295ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00005af8   & Golden Model = 00005af8
# 
#                  295ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002878   & Golden Model = 00002878
# 
#                  295ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  295ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  295ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  295ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  295ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  295ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  295ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  295ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00005af8  00002878 
#                  295ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  295______Cp0____opselect_chk:      001
#                  295______Cp0____operation_chk:     111
#                  295______Cp0____enable_arith_chk:  1
#                  295______Cp0____enable_shift_chk:  0
#                  295______Cp0____pkt_sent.enable:   1
#                  295______Cp7____
#                  295ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0001054b   & Golden Model = 00001054b
# 
#                  305[RECEIVER]  Getting Payload
#                  305[RECEIVER]  Payload Contents:  Aluout = 28780000 mem_write_en = 1 mem_data_write_out = 000011dd
#                  305[RECEIVER]  Payload Obtained
#                  305[DRIVER] Sending in new packet BEGIN
#                  305ns:  [DRIVER] Sending Payload Begin
#                  305ns:  [DRIVER] Sending in new packet END
#                  305ns:  [DRIVER] Number of packets sent =          27
#                  305ns:  [DRIVER] The number of Packets in the Generator Mailbox =          73
#                  305[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  305ns: [CHECKER] Checker Start
# 
# 
#                  305ns:   [CHECKER] Pkt Contents: src1 = 00004700, src2 = 000011dd, imm = 00005bbc, 
#                  305ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  305ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000011dd    mem_GOL = 000011dd
# 
#                  305ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  305ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00005af8   & Golden Model = 00005af8
# 
#                  305ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002878   & Golden Model = 00002878
# 
#                  305ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  305ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  305ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  305ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  305ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  305ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  305ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  305ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00005af8  00002878 
#                  305ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  305______Cp0____opselect_chk:      001
#                  305______Cp0____operation_chk:     111
#                  305______Cp0____enable_arith_chk:  0
#                  305______Cp0____enable_shift_chk:  0
#                  305______Cp0____pkt_sent.enable:   0
#                  305______Cp23____
#                  305ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 28780000   & Golden Model = 028780000
# 
#                  315[RECEIVER]  Getting Payload
#                  315[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000af9a
#                  315[RECEIVER]  Payload Obtained
#                  315[DRIVER] Sending in new packet BEGIN
#                  315ns:  [DRIVER] Sending Payload Begin
#                  315ns:  [DRIVER] Sending in new packet END
#                  315ns:  [DRIVER] Number of packets sent =          28
#                  315ns:  [DRIVER] The number of Packets in the Generator Mailbox =          72
#                  315[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  315ns: [CHECKER] Checker Start
# 
# 
#                  315ns:   [CHECKER] Pkt Contents: src1 = 0000a498, src2 = 0000af9a, imm = 0000c7a9, 
#                  315ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  315ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000af9a    mem_GOL = 0000af9a
# 
#                  315ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  315ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a498   & Golden Model = 0000a498
# 
#                  315ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000af9a   & Golden Model = 0000af9a
# 
#                  315ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  315ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  315ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  315ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  315ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  315ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  315ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  315ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a498  0000af9a 
#                  315ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  315______Cp0____opselect_chk:      001
#                  315______Cp0____operation_chk:     101
#                  315______Cp0____enable_arith_chk:  1
#                  315______Cp0____enable_shift_chk:  0
#                  315______Cp0____pkt_sent.enable:   1
#                  315______Cp6____
#                  315ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 028780000
# 
#                  325[RECEIVER]  Getting Payload
#                  325[RECEIVER]  Payload Contents:  Aluout = 0000af9a mem_write_en = 1 mem_data_write_out = 000098ba
#                  325[RECEIVER]  Payload Obtained
#                  325[DRIVER] Sending in new packet BEGIN
#                  325ns:  [DRIVER] Sending Payload Begin
#                  325ns:  [DRIVER] Sending in new packet END
#                  325ns:  [DRIVER] Number of packets sent =          29
#                  325ns:  [DRIVER] The number of Packets in the Generator Mailbox =          71
#                  325[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  325ns: [CHECKER] Checker Start
# 
# 
#                  325ns:   [CHECKER] Pkt Contents: src1 = 0000017e, src2 = 000098ba, imm = 00008b9e, 
#                  325ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  325ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000098ba    mem_GOL = 000098ba
# 
#                  325ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  325ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  325ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  325ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  325ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  325ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  325ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  325ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  325ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  325ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  325ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  325ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  325______Cp0____opselect_chk:      001
#                  325______Cp0____operation_chk:     010
#                  325______Cp0____enable_arith_chk:  1
#                  325______Cp0____enable_shift_chk:  0
#                  325______Cp0____pkt_sent.enable:   1
#                  325______Cp3____
#                  325ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000af9a   & Golden Model = 00000af9a
# 
#                  335[RECEIVER]  Getting Payload
#                  335[RECEIVER]  Payload Contents:  Aluout = ffff75e0 mem_write_en = 1 mem_data_write_out = 00004326
#                  335[RECEIVER]  Payload Obtained
#                  335[DRIVER] Sending in new packet BEGIN
#                  335ns:  [DRIVER] Sending Payload Begin
#                  335ns:  [DRIVER] Sending in new packet END
#                  335ns:  [DRIVER] Number of packets sent =          30
#                  335ns:  [DRIVER] The number of Packets in the Generator Mailbox =          70
#                  335[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  335ns: [CHECKER] Checker Start
# 
# 
#                  335ns:   [CHECKER] Pkt Contents: src1 = 0000275b, src2 = 00004326, imm = 0000e5c6, 
#                  335ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  335ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004326    mem_GOL = 00004326
# 
#                  335ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  335ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  335ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  335ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  335ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  335ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  335ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  335ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  335ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  335ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  335ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  335ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  335______Cp0____opselect_chk:      001
#                  335______Cp0____operation_chk:     010
#                  335______Cp0____enable_arith_chk:  0
#                  335______Cp0____enable_shift_chk:  0
#                  335______Cp0____pkt_sent.enable:   0
#                  335______Cp23____
#                  335ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff75e0   & Golden Model = 1ffff75e0
# 
#                  345[RECEIVER]  Getting Payload
#                  345[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005e1a
#                  345[RECEIVER]  Payload Obtained
#                  345[DRIVER] Sending in new packet BEGIN
#                  345ns:  [DRIVER] Sending Payload Begin
#                  345ns:  [DRIVER] Sending in new packet END
#                  345ns:  [DRIVER] Number of packets sent =          31
#                  345ns:  [DRIVER] The number of Packets in the Generator Mailbox =          69
#                  345[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  345ns: [CHECKER] Checker Start
# 
# 
#                  345ns:   [CHECKER] Pkt Contents: src1 = 000052ac, src2 = 00005e1a, imm = 000041bf, 
#                  345ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  345ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005e1a    mem_GOL = 00005e1a
# 
#                  345ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  345ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  345ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  345ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  345ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  345ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  345ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  345ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  345ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  345ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  345ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  345ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  345______Cp0____opselect_chk:      001
#                  345______Cp0____operation_chk:     010
#                  345______Cp0____enable_arith_chk:  0
#                  345______Cp0____enable_shift_chk:  0
#                  345______Cp0____pkt_sent.enable:   0
#                  345______Cp23____
#                  345ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff75e0
# 
#                  355[RECEIVER]  Getting Payload
#                  355[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000a093
#                  355[RECEIVER]  Payload Obtained
#                  355[DRIVER] Sending in new packet BEGIN
#                  355ns:  [DRIVER] Sending Payload Begin
#                  355ns:  [DRIVER] Sending in new packet END
#                  355ns:  [DRIVER] Number of packets sent =          32
#                  355ns:  [DRIVER] The number of Packets in the Generator Mailbox =          68
#                  355[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  355ns: [CHECKER] Checker Start
# 
# 
#                  355ns:   [CHECKER] Pkt Contents: src1 = 000019d7, src2 = 0000a093, imm = 0000d3b4, 
#                  355ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  355ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000a093    mem_GOL = 0000a093
# 
#                  355ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  355ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000019d7   & Golden Model = 000019d7
# 
#                  355ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a093   & Golden Model = 0000a093
# 
#                  355ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  355ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  355ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  355ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  355ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000019d7  0000a093 
#                  355ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  355______Cp0____opselect_chk:      001
#                  355______Cp0____operation_chk:     001
#                  355______Cp0____enable_arith_chk:  1
#                  355______Cp0____enable_shift_chk:  0
#                  355______Cp0____pkt_sent.enable:   1
#                  355
#                  355______Cp2____
#                  355ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff75e0
# 
#                  365[RECEIVER]  Getting Payload
#                  365[RECEIVER]  Payload Contents:  Aluout = ffffba6a mem_write_en = 1 mem_data_write_out = 0000b226
#                  365[RECEIVER]  Payload Obtained
#                  365[DRIVER] Sending in new packet BEGIN
#                  365ns:  [DRIVER] Sending Payload Begin
#                  365ns:  [DRIVER] Sending in new packet END
#                  365ns:  [DRIVER] Number of packets sent =          33
#                  365ns:  [DRIVER] The number of Packets in the Generator Mailbox =          67
#                  365[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  365ns: [CHECKER] Checker Start
# 
# 
#                  365ns:   [CHECKER] Pkt Contents: src1 = 000035b0, src2 = 0000b226, imm = 0000b9a7, 
#                  365ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  365ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b226    mem_GOL = 0000b226
# 
#                  365ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  365ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000019d7   & Golden Model = 000019d7
# 
#                  365ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a093   & Golden Model = 0000a093
# 
#                  365ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  365ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  365ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  365ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  365ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  365ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  365ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  365ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000019d7  0000a093 
#                  365ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  365______Cp0____opselect_chk:      001
#                  365______Cp0____operation_chk:     001
#                  365______Cp0____enable_arith_chk:  0
#                  365______Cp0____enable_shift_chk:  0
#                  365______Cp0____pkt_sent.enable:   0
#                  365______Cp23____
#                  365ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffba6a   & Golden Model = 00000ba6a
# 
#                  375[RECEIVER]  Getting Payload
#                  375[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002d4b
#                  375[RECEIVER]  Payload Obtained
#                  375[DRIVER] Sending in new packet BEGIN
#                  375ns:  [DRIVER] Sending Payload Begin
#                  375ns:  [DRIVER] Sending in new packet END
#                  375ns:  [DRIVER] Number of packets sent =          34
#                  375ns:  [DRIVER] The number of Packets in the Generator Mailbox =          66
#                  375[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  375ns: [CHECKER] Checker Start
# 
# 
#                  375ns:   [CHECKER] Pkt Contents: src1 = 00008b8b, src2 = 00002d4b, imm = 000084b2, 
#                  375ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  375ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002d4b    mem_GOL = 00002d4b
# 
#                  375ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  375ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00008b8b   & Golden Model = 00008b8b
# 
#                  375ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002d4b   & Golden Model = 00002d4b
# 
#                  375ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  375ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  375ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  375ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  375ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  375ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  375ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  375ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00008b8b  00002d4b 
#                  375ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  375______Cp0____opselect_chk:      001
#                  375______Cp0____operation_chk:     100
#                  375______Cp0____enable_arith_chk:  1
#                  375______Cp0____enable_shift_chk:  0
#                  375______Cp0____pkt_sent.enable:   1
#                  375______Cp5____
#                  375ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ba6a
# 
#                  385[RECEIVER]  Getting Payload
#                  385[RECEIVER]  Payload Contents:  Aluout = 0000090b mem_write_en = 1 mem_data_write_out = 0000bfe4
#                  385[RECEIVER]  Payload Obtained
#                  385[DRIVER] Sending in new packet BEGIN
#                  385ns:  [DRIVER] Sending Payload Begin
#                  385ns:  [DRIVER] Sending in new packet END
#                  385ns:  [DRIVER] Number of packets sent =          35
#                  385ns:  [DRIVER] The number of Packets in the Generator Mailbox =          65
#                  385[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  385ns: [CHECKER] Checker Start
# 
# 
#                  385ns:   [CHECKER] Pkt Contents: src1 = 00007e81, src2 = 0000bfe4, imm = 0000092d, 
#                  385ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  385ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bfe4    mem_GOL = 0000bfe4
# 
#                  385ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  385ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00008b8b   & Golden Model = 00008b8b
# 
#                  385ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002d4b   & Golden Model = 00002d4b
# 
#                  385ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  385ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  385ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  385ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  385ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  385ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  385ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  385ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00008b8b  00002d4b 
#                  385ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  385______Cp0____opselect_chk:      001
#                  385______Cp0____operation_chk:     100
#                  385______Cp0____enable_arith_chk:  0
#                  385______Cp0____enable_shift_chk:  0
#                  385______Cp0____pkt_sent.enable:   0
#                  385______Cp23____
#                  385ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000090b   & Golden Model = 00000090b
# 
#                  395[RECEIVER]  Getting Payload
#                  395[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000c034
#                  395[RECEIVER]  Payload Obtained
#                  395[DRIVER] Sending in new packet BEGIN
#                  395ns:  [DRIVER] Sending Payload Begin
#                  395ns:  [DRIVER] Sending in new packet END
#                  395ns:  [DRIVER] Number of packets sent =          36
#                  395ns:  [DRIVER] The number of Packets in the Generator Mailbox =          64
#                  395[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  395ns: [CHECKER] Checker Start
# 
# 
#                  395ns:   [CHECKER] Pkt Contents: src1 = 0000f8e1, src2 = 0000c034, imm = 0000418c, 
#                  395ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  395ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000c034    mem_GOL = 0000c034
# 
#                  395ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  395ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8e1   & Golden Model = 0000f8e1
# 
#                  395ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000418c   & Golden Model = 0000418c
# 
#                  395ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  395ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  395ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  395ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  395ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  395ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  395ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  395ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8e1  0000418c 
#                  395ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  395______Cp0____opselect_chk:      001
#                  395______Cp0____operation_chk:     111
#                  395______Cp0____enable_arith_chk:  1
#                  395______Cp0____enable_shift_chk:  0
#                  395______Cp0____pkt_sent.enable:   1
#                  395______Cp7____
#                  395ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000090b
# 
#                  405[RECEIVER]  Getting Payload
#                  405[RECEIVER]  Payload Contents:  Aluout = 418c0000 mem_write_en = 1 mem_data_write_out = 00000e42
#                  405[RECEIVER]  Payload Obtained
#                  405[DRIVER] Sending in new packet BEGIN
#                  405ns:  [DRIVER] Sending Payload Begin
#                  405ns:  [DRIVER] Sending in new packet END
#                  405ns:  [DRIVER] Number of packets sent =          37
#                  405ns:  [DRIVER] The number of Packets in the Generator Mailbox =          63
#                  405[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  405ns: [CHECKER] Checker Start
# 
# 
#                  405ns:   [CHECKER] Pkt Contents: src1 = 00002e04, src2 = 00000e42, imm = 0000dc6d, 
#                  405ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  405ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000e42    mem_GOL = 00000e42
# 
#                  405ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  405ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8e1   & Golden Model = 0000f8e1
# 
#                  405ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000418c   & Golden Model = 0000418c
# 
#                  405ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  405ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  405ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  405ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  405ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  405ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  405ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  405ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8e1  0000418c 
#                  405ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  405______Cp0____opselect_chk:      001
#                  405______Cp0____operation_chk:     111
#                  405______Cp0____enable_arith_chk:  0
#                  405______Cp0____enable_shift_chk:  0
#                  405______Cp0____pkt_sent.enable:   0
#                  405______Cp23____
#                  405ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 418c0000   & Golden Model = 0418c0000
# 
#                  415[RECEIVER]  Getting Payload
#                  415[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00004b68
#                  415[RECEIVER]  Payload Obtained
#                  415[DRIVER] Sending in new packet BEGIN
#                  415ns:  [DRIVER] Sending Payload Begin
#                  415ns:  [DRIVER] Sending in new packet END
#                  415ns:  [DRIVER] Number of packets sent =          38
#                  415ns:  [DRIVER] The number of Packets in the Generator Mailbox =          62
#                  415[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  415ns: [CHECKER] Checker Start
# 
# 
#                  415ns:   [CHECKER] Pkt Contents: src1 = 00004de1, src2 = 00004b68, imm = 00003508, 
#                  415ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  415ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004b68    mem_GOL = 00004b68
# 
#                  415ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  415ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004de1   & Golden Model = 00004de1
# 
#                  415ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003508   & Golden Model = 00003508
# 
#                  415ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  415ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  415ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  415ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  415ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  415ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  415ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  415ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004de1  00003508 
#                  415ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  415______Cp0____opselect_chk:      001
#                  415______Cp0____operation_chk:     100
#                  415______Cp0____enable_arith_chk:  1
#                  415______Cp0____enable_shift_chk:  0
#                  415______Cp0____pkt_sent.enable:   1
#                  415______Cp5____
#                  415ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0418c0000
# 
#                  425[RECEIVER]  Getting Payload
#                  425[RECEIVER]  Payload Contents:  Aluout = 00000500 mem_write_en = 1 mem_data_write_out = 00005aed
#                  425[RECEIVER]  Payload Obtained
#                  425[DRIVER] Sending in new packet BEGIN
#                  425ns:  [DRIVER] Sending Payload Begin
#                  425ns:  [DRIVER] Sending in new packet END
#                  425ns:  [DRIVER] Number of packets sent =          39
#                  425ns:  [DRIVER] The number of Packets in the Generator Mailbox =          61
#                  425[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  425ns: [CHECKER] Checker Start
# 
# 
#                  425ns:   [CHECKER] Pkt Contents: src1 = 00000c59, src2 = 00005aed, imm = 00000081, 
#                  425ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  425ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005aed    mem_GOL = 00005aed
# 
#                  425ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  425ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004de1   & Golden Model = 00004de1
# 
#                  425ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003508   & Golden Model = 00003508
# 
#                  425ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  425ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  425ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  425ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  425ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  425ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  425ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  425ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004de1  00003508 
#                  425ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  425______Cp0____opselect_chk:      001
#                  425______Cp0____operation_chk:     100
#                  425______Cp0____enable_arith_chk:  0
#                  425______Cp0____enable_shift_chk:  0
#                  425______Cp0____pkt_sent.enable:   0
#                  425______Cp23____
#                  425ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000500   & Golden Model = 000000500
# 
#                  435[RECEIVER]  Getting Payload
#                  435[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005807
#                  435[RECEIVER]  Payload Obtained
#                  435[DRIVER] Sending in new packet BEGIN
#                  435ns:  [DRIVER] Sending Payload Begin
#                  435ns:  [DRIVER] Sending in new packet END
#                  435ns:  [DRIVER] Number of packets sent =          40
#                  435ns:  [DRIVER] The number of Packets in the Generator Mailbox =          60
#                  435[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  435ns: [CHECKER] Checker Start
# 
# 
#                  435ns:   [CHECKER] Pkt Contents: src1 = 0000a8f8, src2 = 00005807, imm = 00003858, 
#                  435ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  435ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005807    mem_GOL = 00005807
# 
#                  435ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  435ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a8f8   & Golden Model = 0000a8f8
# 
#                  435ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003858   & Golden Model = 00003858
# 
#                  435ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  435ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  435ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  435ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  435ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  435ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  435ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  435ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a8f8  00003858 
#                  435ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  435______Cp0____opselect_chk:      001
#                  435______Cp0____operation_chk:     110
#                  435______Cp0____enable_arith_chk:  1
#                  435______Cp0____enable_shift_chk:  0
#                  435______Cp0____pkt_sent.enable:   1
#                  435______Cp7____
#                  435ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 000000500
# 
#                  445[RECEIVER]  Getting Payload
#                  445[RECEIVER]  Payload Contents:  Aluout = 000090a0 mem_write_en = 1 mem_data_write_out = 000043a1
#                  445[RECEIVER]  Payload Obtained
#                  445[DRIVER] Sending in new packet BEGIN
#                  445ns:  [DRIVER] Sending Payload Begin
#                  445ns:  [DRIVER] Sending in new packet END
#                  445ns:  [DRIVER] Number of packets sent =          41
#                  445ns:  [DRIVER] The number of Packets in the Generator Mailbox =          59
#                  445[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  445ns: [CHECKER] Checker Start
# 
# 
#                  445ns:   [CHECKER] Pkt Contents: src1 = 0000a70e, src2 = 000043a1, imm = 00001897, 
#                  445ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  445ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000043a1    mem_GOL = 000043a1
# 
#                  445ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  445ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  445ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  445ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  445ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  445ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  445ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  445ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  445ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  445ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  445ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  445ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  445______Cp0____opselect_chk:      001
#                  445______Cp0____operation_chk:     010
#                  445______Cp0____enable_arith_chk:  1
#                  445______Cp0____enable_shift_chk:  0
#                  445______Cp0____pkt_sent.enable:   1
#                  445______Cp3____
#                  445ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000090a0   & Golden Model = 0000090a0
# 
#                  455[RECEIVER]  Getting Payload
#                  455[RECEIVER]  Payload Contents:  Aluout = 0000636d mem_write_en = 1 mem_data_write_out = 00002fb1
#                  455[RECEIVER]  Payload Obtained
#                  455[DRIVER] Sending in new packet BEGIN
#                  455ns:  [DRIVER] Sending Payload Begin
#                  455ns:  [DRIVER] Sending in new packet END
#                  455ns:  [DRIVER] Number of packets sent =          42
#                  455ns:  [DRIVER] The number of Packets in the Generator Mailbox =          58
#                  455[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  455ns: [CHECKER] Checker Start
# 
# 
#                  455ns:   [CHECKER] Pkt Contents: src1 = 0000ae7e, src2 = 00002fb1, imm = 0000d2e9, 
#                  455ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  455ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002fb1    mem_GOL = 00002fb1
# 
#                  455ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  455ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  455ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  455ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  455ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  455ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  455ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  455ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  455ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  455ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  455ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  455ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  455______Cp0____opselect_chk:      001
#                  455______Cp0____operation_chk:     010
#                  455______Cp0____enable_arith_chk:  0
#                  455______Cp0____enable_shift_chk:  0
#                  455______Cp0____pkt_sent.enable:   0
#                  455______Cp23____
#                  455ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000636d   & Golden Model = 00000636d
# 
#                  465[RECEIVER]  Getting Payload
#                  465[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00008288
#                  465[RECEIVER]  Payload Obtained
#                  465[DRIVER] Sending in new packet BEGIN
#                  465ns:  [DRIVER] Sending Payload Begin
#                  465ns:  [DRIVER] Sending in new packet END
#                  465ns:  [DRIVER] Number of packets sent =          43
#                  465ns:  [DRIVER] The number of Packets in the Generator Mailbox =          57
#                  465[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  465ns: [CHECKER] Checker Start
# 
# 
#                  465ns:   [CHECKER] Pkt Contents: src1 = 0000b1c9, src2 = 00008288, imm = 0000297e, 
#                  465ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  465ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00008288    mem_GOL = 00008288
# 
#                  465ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  465ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  465ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  465ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  465ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  465ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  465ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  465ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  465ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  465ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  465ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  465ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  465______Cp0____opselect_chk:      001
#                  465______Cp0____operation_chk:     010
#                  465______Cp0____enable_arith_chk:  0
#                  465______Cp0____enable_shift_chk:  0
#                  465______Cp0____pkt_sent.enable:   0
#                  465______Cp23____
#                  465ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  475[RECEIVER]  Getting Payload
#                  475[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002a84
#                  475[RECEIVER]  Payload Obtained
#                  475[DRIVER] Sending in new packet BEGIN
#                  475ns:  [DRIVER] Sending Payload Begin
#                  475ns:  [DRIVER] Sending in new packet END
#                  475ns:  [DRIVER] Number of packets sent =          44
#                  475ns:  [DRIVER] The number of Packets in the Generator Mailbox =          56
#                  475[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  475ns: [CHECKER] Checker Start
# 
# 
#                  475ns:   [CHECKER] Pkt Contents: src1 = 0000b822, src2 = 00002a84, imm = 00005ca4, 
#                  475ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  475ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002a84    mem_GOL = 00002a84
# 
#                  475ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  475ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  475ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  475ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  475ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  475ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  475ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  475ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  475ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  475ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  475ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  475ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  475______Cp0____opselect_chk:      001
#                  475______Cp0____operation_chk:     010
#                  475______Cp0____enable_arith_chk:  0
#                  475______Cp0____enable_shift_chk:  0
#                  475______Cp0____pkt_sent.enable:   0
#                  475______Cp23____
#                  475ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  485[RECEIVER]  Getting Payload
#                  485[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000476d
#                  485[RECEIVER]  Payload Obtained
#                  485[DRIVER] Sending in new packet BEGIN
#                  485ns:  [DRIVER] Sending Payload Begin
#                  485ns:  [DRIVER] Sending in new packet END
#                  485ns:  [DRIVER] Number of packets sent =          45
#                  485ns:  [DRIVER] The number of Packets in the Generator Mailbox =          55
#                  485[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  485ns: [CHECKER] Checker Start
# 
# 
#                  485ns:   [CHECKER] Pkt Contents: src1 = 0000d557, src2 = 0000476d, imm = 0000a59b, 
#                  485ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  485ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000476d    mem_GOL = 0000476d
# 
#                  485ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  485ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  485ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  485ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  485ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  485ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  485ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  485ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  485ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  485ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  485ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  485ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  485______Cp0____opselect_chk:      001
#                  485______Cp0____operation_chk:     010
#                  485______Cp0____enable_arith_chk:  0
#                  485______Cp0____enable_shift_chk:  0
#                  485______Cp0____pkt_sent.enable:   0
#                  485______Cp23____
#                  485ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  495[RECEIVER]  Getting Payload
#                  495[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000aa95
#                  495[RECEIVER]  Payload Obtained
#                  495[DRIVER] Sending in new packet BEGIN
#                  495ns:  [DRIVER] Sending Payload Begin
#                  495ns:  [DRIVER] Sending in new packet END
#                  495ns:  [DRIVER] Number of packets sent =          46
#                  495ns:  [DRIVER] The number of Packets in the Generator Mailbox =          54
#                  495[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  495ns: [CHECKER] Checker Start
# 
# 
#                  495ns:   [CHECKER] Pkt Contents: src1 = 00006868, src2 = 0000aa95, imm = 000057ec, 
#                  495ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  495ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000aa95    mem_GOL = 0000aa95
# 
#                  495ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  495ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  495ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  495ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  495ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  495ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  495ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  495ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  495ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  495ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  495ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  495ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  495______Cp0____opselect_chk:      001
#                  495______Cp0____operation_chk:     010
#                  495______Cp0____enable_arith_chk:  0
#                  495______Cp0____enable_shift_chk:  0
#                  495______Cp0____pkt_sent.enable:   0
#                  495______Cp23____
#                  495ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  505[RECEIVER]  Getting Payload
#                  505[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002acc
#                  505[RECEIVER]  Payload Obtained
#                  505[DRIVER] Sending in new packet BEGIN
#                  505ns:  [DRIVER] Sending Payload Begin
#                  505ns:  [DRIVER] Sending in new packet END
#                  505ns:  [DRIVER] Number of packets sent =          47
#                  505ns:  [DRIVER] The number of Packets in the Generator Mailbox =          53
#                  505[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  505ns: [CHECKER] Checker Start
# 
# 
#                  505ns:   [CHECKER] Pkt Contents: src1 = 00004523, src2 = 00002acc, imm = 00000867, 
#                  505ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  505ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002acc    mem_GOL = 00002acc
# 
#                  505ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  505ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  505ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  505ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  505ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  505ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  505ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  505ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  505ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  505ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  505ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  505ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  505______Cp0____opselect_chk:      001
#                  505______Cp0____operation_chk:     010
#                  505______Cp0____enable_arith_chk:  0
#                  505______Cp0____enable_shift_chk:  0
#                  505______Cp0____pkt_sent.enable:   0
#                  505______Cp23____
#                  505ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  515[RECEIVER]  Getting Payload
#                  515[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d259
#                  515[RECEIVER]  Payload Obtained
#                  515[DRIVER] Sending in new packet BEGIN
#                  515ns:  [DRIVER] Sending Payload Begin
#                  515ns:  [DRIVER] Sending in new packet END
#                  515ns:  [DRIVER] Number of packets sent =          48
#                  515ns:  [DRIVER] The number of Packets in the Generator Mailbox =          52
#                  515[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  515ns: [CHECKER] Checker Start
# 
# 
#                  515ns:   [CHECKER] Pkt Contents: src1 = 0000d4be, src2 = 0000d259, imm = 00002cf5, 
#                  515ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  515ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d259    mem_GOL = 0000d259
# 
#                  515ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  515ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  515ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  515ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  515ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  515ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  515ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  515ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  515ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  515______Cp0____opselect_chk:      001
#                  515______Cp0____operation_chk:     001
#                  515______Cp0____enable_arith_chk:  1
#                  515______Cp0____enable_shift_chk:  0
#                  515______Cp0____pkt_sent.enable:   1
#                  515
#                  515______Cp2____
#                  515ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  525[RECEIVER]  Getting Payload
#                  525[RECEIVER]  Payload Contents:  Aluout = ffffa717 mem_write_en = 1 mem_data_write_out = 00000446
#                  525[RECEIVER]  Payload Obtained
#                  525[DRIVER] Sending in new packet BEGIN
#                  525ns:  [DRIVER] Sending Payload Begin
#                  525ns:  [DRIVER] Sending in new packet END
#                  525ns:  [DRIVER] Number of packets sent =          49
#                  525ns:  [DRIVER] The number of Packets in the Generator Mailbox =          51
#                  525[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  525ns: [CHECKER] Checker Start
# 
# 
#                  525ns:   [CHECKER] Pkt Contents: src1 = 0000f6bf, src2 = 00000446, imm = 000004bc, 
#                  525ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  525ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000446    mem_GOL = 00000446
# 
#                  525ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  525ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  525ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  525ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  525ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  525ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  525ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  525ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  525ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  525ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  525ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  525ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  525______Cp0____opselect_chk:      001
#                  525______Cp0____operation_chk:     001
#                  525______Cp0____enable_arith_chk:  0
#                  525______Cp0____enable_shift_chk:  0
#                  525______Cp0____pkt_sent.enable:   0
#                  525______Cp23____
#                  525ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffa717   & Golden Model = 0ffffa717
# 
#                  535[RECEIVER]  Getting Payload
#                  535[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00006eaa
#                  535[RECEIVER]  Payload Obtained
#                  535[DRIVER] Sending in new packet BEGIN
#                  535ns:  [DRIVER] Sending Payload Begin
#                  535ns:  [DRIVER] Sending in new packet END
#                  535ns:  [DRIVER] Number of packets sent =          50
#                  535ns:  [DRIVER] The number of Packets in the Generator Mailbox =          50
#                  535[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  535ns: [CHECKER] Checker Start
# 
# 
#                  535ns:   [CHECKER] Pkt Contents: src1 = 0000c200, src2 = 00006eaa, imm = 00007ab2, 
#                  535ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  535ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006eaa    mem_GOL = 00006eaa
# 
#                  535ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  535ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  535ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  535ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  535ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  535ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  535ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  535ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  535ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  535ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  535ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  535ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  535______Cp0____opselect_chk:      001
#                  535______Cp0____operation_chk:     001
#                  535______Cp0____enable_arith_chk:  0
#                  535______Cp0____enable_shift_chk:  0
#                  535______Cp0____pkt_sent.enable:   0
#                  535______Cp23____
#                  535ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  545[RECEIVER]  Getting Payload
#                  545[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f077
#                  545[RECEIVER]  Payload Obtained
#                  545[DRIVER] Sending in new packet BEGIN
#                  545ns:  [DRIVER] Sending Payload Begin
#                  545ns:  [DRIVER] Sending in new packet END
#                  545ns:  [DRIVER] Number of packets sent =          51
#                  545ns:  [DRIVER] The number of Packets in the Generator Mailbox =          49
#                  545[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  545ns: [CHECKER] Checker Start
# 
# 
#                  545ns:   [CHECKER] Pkt Contents: src1 = 000042f6, src2 = 0000f077, imm = 0000cb5a, 
#                  545ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  545ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f077    mem_GOL = 0000f077
# 
#                  545ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  545ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  545ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  545ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  545ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  545ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  545ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  545ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  545ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  545ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  545ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  545ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  545______Cp0____opselect_chk:      001
#                  545______Cp0____operation_chk:     001
#                  545______Cp0____enable_arith_chk:  0
#                  545______Cp0____enable_shift_chk:  0
#                  545______Cp0____pkt_sent.enable:   0
#                  545______Cp23____
#                  545ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  555[RECEIVER]  Getting Payload
#                  555[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b136
#                  555[RECEIVER]  Payload Obtained
#                  555[DRIVER] Sending in new packet BEGIN
#                  555ns:  [DRIVER] Sending Payload Begin
#                  555ns:  [DRIVER] Sending in new packet END
#                  555ns:  [DRIVER] Number of packets sent =          52
#                  555ns:  [DRIVER] The number of Packets in the Generator Mailbox =          48
#                  555[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  555ns: [CHECKER] Checker Start
# 
# 
#                  555ns:   [CHECKER] Pkt Contents: src1 = 00007acc, src2 = 0000b136, imm = 000073bc, 
#                  555ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  555ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b136    mem_GOL = 0000b136
# 
#                  555ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  555ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  555ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  555ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  555ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  555ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  555ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  555ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  555ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  555ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  555ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  555ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  555______Cp0____opselect_chk:      001
#                  555______Cp0____operation_chk:     001
#                  555______Cp0____enable_arith_chk:  0
#                  555______Cp0____enable_shift_chk:  0
#                  555______Cp0____pkt_sent.enable:   0
#                  555______Cp23____
#                  555ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  565[RECEIVER]  Getting Payload
#                  565[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b24a
#                  565[RECEIVER]  Payload Obtained
#                  565[DRIVER] Sending in new packet BEGIN
#                  565ns:  [DRIVER] Sending Payload Begin
#                  565ns:  [DRIVER] Sending in new packet END
#                  565ns:  [DRIVER] Number of packets sent =          53
#                  565ns:  [DRIVER] The number of Packets in the Generator Mailbox =          47
#                  565[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  565ns: [CHECKER] Checker Start
# 
# 
#                  565ns:   [CHECKER] Pkt Contents: src1 = 00004d3f, src2 = 0000b24a, imm = 0000b08e, 
#                  565ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  565ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b24a    mem_GOL = 0000b24a
# 
#                  565ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  565ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  565ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  565ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  565ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  565ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  565ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  565ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  565ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  565ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  565ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  565ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  565______Cp0____opselect_chk:      001
#                  565______Cp0____operation_chk:     111
#                  565______Cp0____enable_arith_chk:  1
#                  565______Cp0____enable_shift_chk:  0
#                  565______Cp0____pkt_sent.enable:   1
#                  565______Cp7____
#                  565ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  575[RECEIVER]  Getting Payload
#                  575[RECEIVER]  Payload Contents:  Aluout = b24a0000 mem_write_en = 1 mem_data_write_out = 0000cde4
#                  575[RECEIVER]  Payload Obtained
#                  575[DRIVER] Sending in new packet BEGIN
#                  575ns:  [DRIVER] Sending Payload Begin
#                  575ns:  [DRIVER] Sending in new packet END
#                  575ns:  [DRIVER] Number of packets sent =          54
#                  575ns:  [DRIVER] The number of Packets in the Generator Mailbox =          46
#                  575[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  575ns: [CHECKER] Checker Start
# 
# 
#                  575ns:   [CHECKER] Pkt Contents: src1 = 0000ac5a, src2 = 0000cde4, imm = 00007ea3, 
#                  575ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  575ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000cde4    mem_GOL = 0000cde4
# 
#                  575ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  575ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  575ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  575ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  575ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  575ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  575ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  575ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  575ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  575ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  575ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  575ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  575______Cp0____opselect_chk:      001
#                  575______Cp0____operation_chk:     111
#                  575______Cp0____enable_arith_chk:  0
#                  575______Cp0____enable_shift_chk:  0
#                  575______Cp0____pkt_sent.enable:   0
#                  575______Cp23____
#                  575ns:   [ASSERT_aluout] PASS ALUOUT: DUT = b24a0000   & Golden Model = 0b24a0000
# 
#                  585[RECEIVER]  Getting Payload
#                  585[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f817
#                  585[RECEIVER]  Payload Obtained
#                  585[DRIVER] Sending in new packet BEGIN
#                  585ns:  [DRIVER] Sending Payload Begin
#                  585ns:  [DRIVER] Sending in new packet END
#                  585ns:  [DRIVER] Number of packets sent =          55
#                  585ns:  [DRIVER] The number of Packets in the Generator Mailbox =          45
#                  585[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  585ns: [CHECKER] Checker Start
# 
# 
#                  585ns:   [CHECKER] Pkt Contents: src1 = 0000fa4e, src2 = 0000f817, imm = 0000c3ba, 
#                  585ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  585ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f817    mem_GOL = 0000f817
# 
#                  585ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  585ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  585ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  585ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  585ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  585ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  585ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  585ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  585ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  585ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  585ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  585ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  585______Cp0____opselect_chk:      001
#                  585______Cp0____operation_chk:     111
#                  585______Cp0____enable_arith_chk:  0
#                  585______Cp0____enable_shift_chk:  0
#                  585______Cp0____pkt_sent.enable:   0
#                  585______Cp23____
#                  585ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  595[RECEIVER]  Getting Payload
#                  595[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001baf
#                  595[RECEIVER]  Payload Obtained
#                  595[DRIVER] Sending in new packet BEGIN
#                  595ns:  [DRIVER] Sending Payload Begin
#                  595ns:  [DRIVER] Sending in new packet END
#                  595ns:  [DRIVER] Number of packets sent =          56
#                  595ns:  [DRIVER] The number of Packets in the Generator Mailbox =          44
#                  595[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  595ns: [CHECKER] Checker Start
# 
# 
#                  595ns:   [CHECKER] Pkt Contents: src1 = 00003860, src2 = 00001baf, imm = 00004592, 
#                  595ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  595ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001baf    mem_GOL = 00001baf
# 
#                  595ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  595ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  595ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  595ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  595ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  595ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  595ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  595ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  595ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  595ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  595ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  595ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  595______Cp0____opselect_chk:      001
#                  595______Cp0____operation_chk:     111
#                  595______Cp0____enable_arith_chk:  0
#                  595______Cp0____enable_shift_chk:  0
#                  595______Cp0____pkt_sent.enable:   0
#                  595______Cp23____
#                  595ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  605[RECEIVER]  Getting Payload
#                  605[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000da12
#                  605[RECEIVER]  Payload Obtained
#                  605[DRIVER] Sending in new packet BEGIN
#                  605ns:  [DRIVER] Sending Payload Begin
#                  605ns:  [DRIVER] Sending in new packet END
#                  605ns:  [DRIVER] Number of packets sent =          57
#                  605ns:  [DRIVER] The number of Packets in the Generator Mailbox =          43
#                  605[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  605ns: [CHECKER] Checker Start
# 
# 
#                  605ns:   [CHECKER] Pkt Contents: src1 = 0000b1d6, src2 = 0000da12, imm = 00002a23, 
#                  605ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  605ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000da12    mem_GOL = 0000da12
# 
#                  605ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  605ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  605ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  605ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  605ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  605ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  605ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  605ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  605ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  605ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  605ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  605ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  605______Cp0____opselect_chk:      001
#                  605______Cp0____operation_chk:     111
#                  605______Cp0____enable_arith_chk:  0
#                  605______Cp0____enable_shift_chk:  0
#                  605______Cp0____pkt_sent.enable:   0
#                  605______Cp23____
#                  605ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  615[RECEIVER]  Getting Payload
#                  615[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000ef8e
#                  615[RECEIVER]  Payload Obtained
#                  615[DRIVER] Sending in new packet BEGIN
#                  615ns:  [DRIVER] Sending Payload Begin
#                  615ns:  [DRIVER] Sending in new packet END
#                  615ns:  [DRIVER] Number of packets sent =          58
#                  615ns:  [DRIVER] The number of Packets in the Generator Mailbox =          42
#                  615[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  615ns: [CHECKER] Checker Start
# 
# 
#                  615ns:   [CHECKER] Pkt Contents: src1 = 000039dd, src2 = 0000ef8e, imm = 0000c621, 
#                  615ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  615ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ef8e    mem_GOL = 0000ef8e
# 
#                  615ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  615ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  615ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  615ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  615ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  615ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  615ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  615ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  615ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  615ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  615ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  615ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  615______Cp0____opselect_chk:      001
#                  615______Cp0____operation_chk:     101
#                  615______Cp0____enable_arith_chk:  1
#                  615______Cp0____enable_shift_chk:  0
#                  615______Cp0____pkt_sent.enable:   1
#                  615______Cp6____
#                  615ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  625[RECEIVER]  Getting Payload
#                  625[RECEIVER]  Payload Contents:  Aluout = 0000ffdf mem_write_en = 1 mem_data_write_out = 00002926
#                  625[RECEIVER]  Payload Obtained
#                  625[DRIVER] Sending in new packet BEGIN
#                  625ns:  [DRIVER] Sending Payload Begin
#                  625ns:  [DRIVER] Sending in new packet END
#                  625ns:  [DRIVER] Number of packets sent =          59
#                  625ns:  [DRIVER] The number of Packets in the Generator Mailbox =          41
#                  625[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  625ns: [CHECKER] Checker Start
# 
# 
#                  625ns:   [CHECKER] Pkt Contents: src1 = 0000d637, src2 = 00002926, imm = 0000ac70, 
#                  625ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  625ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002926    mem_GOL = 00002926
# 
#                  625ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  625ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  625ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  625ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  625ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  625ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  625ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  625ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  625ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  625ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  625ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  625ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  625______Cp0____opselect_chk:      001
#                  625______Cp0____operation_chk:     101
#                  625______Cp0____enable_arith_chk:  0
#                  625______Cp0____enable_shift_chk:  0
#                  625______Cp0____pkt_sent.enable:   0
#                  625______Cp23____
#                  625ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ffdf   & Golden Model = 00000ffdf
# 
#                  635[RECEIVER]  Getting Payload
#                  635[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001088
#                  635[RECEIVER]  Payload Obtained
#                  635[DRIVER] Sending in new packet BEGIN
#                  635ns:  [DRIVER] Sending Payload Begin
#                  635ns:  [DRIVER] Sending in new packet END
#                  635ns:  [DRIVER] Number of packets sent =          60
#                  635ns:  [DRIVER] The number of Packets in the Generator Mailbox =          40
#                  635[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  635ns: [CHECKER] Checker Start
# 
# 
#                  635ns:   [CHECKER] Pkt Contents: src1 = 0000a58d, src2 = 00001088, imm = 0000b995, 
#                  635ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  635ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001088    mem_GOL = 00001088
# 
#                  635ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  635ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  635ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  635ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  635ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  635ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  635ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  635ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  635ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  635ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  635ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  635ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  635______Cp0____opselect_chk:      001
#                  635______Cp0____operation_chk:     101
#                  635______Cp0____enable_arith_chk:  0
#                  635______Cp0____enable_shift_chk:  0
#                  635______Cp0____pkt_sent.enable:   0
#                  635______Cp23____
#                  635ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ffdf
# 
#                  645[RECEIVER]  Getting Payload
#                  645[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e068
#                  645[RECEIVER]  Payload Obtained
#                  645[DRIVER] Sending in new packet BEGIN
#                  645ns:  [DRIVER] Sending Payload Begin
#                  645ns:  [DRIVER] Sending in new packet END
#                  645ns:  [DRIVER] Number of packets sent =          61
#                  645ns:  [DRIVER] The number of Packets in the Generator Mailbox =          39
#                  645[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  645ns: [CHECKER] Checker Start
# 
# 
#                  645ns:   [CHECKER] Pkt Contents: src1 = 00004ea5, src2 = 0000e068, imm = 0000f290, 
#                  645ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  645ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e068    mem_GOL = 0000e068
# 
#                  645ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  645ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  645ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  645ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  645ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  645ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  645ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  645ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  645ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  645ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  645ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  645ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  645______Cp0____opselect_chk:      001
#                  645______Cp0____operation_chk:     111
#                  645______Cp0____enable_arith_chk:  1
#                  645______Cp0____enable_shift_chk:  0
#                  645______Cp0____pkt_sent.enable:   1
#                  645______Cp7____
#                  645ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ffdf
# 
#                  655[RECEIVER]  Getting Payload
#                  655[RECEIVER]  Payload Contents:  Aluout = e0680000 mem_write_en = 1 mem_data_write_out = 00007663
#                  655[RECEIVER]  Payload Obtained
#                  655[DRIVER] Sending in new packet BEGIN
#                  655ns:  [DRIVER] Sending Payload Begin
#                  655ns:  [DRIVER] Sending in new packet END
#                  655ns:  [DRIVER] Number of packets sent =          62
#                  655ns:  [DRIVER] The number of Packets in the Generator Mailbox =          38
#                  655[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  655ns: [CHECKER] Checker Start
# 
# 
#                  655ns:   [CHECKER] Pkt Contents: src1 = 0000dec8, src2 = 00007663, imm = 00000842, 
#                  655ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  655ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007663    mem_GOL = 00007663
# 
#                  655ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  655ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  655ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  655ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  655ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  655ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  655ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  655ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  655ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  655ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  655ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  655ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  655______Cp0____opselect_chk:      001
#                  655______Cp0____operation_chk:     111
#                  655______Cp0____enable_arith_chk:  0
#                  655______Cp0____enable_shift_chk:  0
#                  655______Cp0____pkt_sent.enable:   0
#                  655______Cp23____
#                  655ns:   [ASSERT_aluout] PASS ALUOUT: DUT = e0680000   & Golden Model = 0e0680000
# 
#                  665[RECEIVER]  Getting Payload
#                  665[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00009c15
#                  665[RECEIVER]  Payload Obtained
#                  665[DRIVER] Sending in new packet BEGIN
#                  665ns:  [DRIVER] Sending Payload Begin
#                  665ns:  [DRIVER] Sending in new packet END
#                  665ns:  [DRIVER] Number of packets sent =          63
#                  665ns:  [DRIVER] The number of Packets in the Generator Mailbox =          37
#                  665[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  665ns: [CHECKER] Checker Start
# 
# 
#                  665ns:   [CHECKER] Pkt Contents: src1 = 0000d904, src2 = 00009c15, imm = 0000dc36, 
#                  665ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  665ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009c15    mem_GOL = 00009c15
# 
#                  665ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  665ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  665ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  665ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  665ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  665ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  665ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  665ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  665ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  665ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  665ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  665ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  665______Cp0____opselect_chk:      001
#                  665______Cp0____operation_chk:     111
#                  665______Cp0____enable_arith_chk:  0
#                  665______Cp0____enable_shift_chk:  0
#                  665______Cp0____pkt_sent.enable:   0
#                  665______Cp23____
#                  665ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  675[RECEIVER]  Getting Payload
#                  675[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00009f5e
#                  675[RECEIVER]  Payload Obtained
#                  675[DRIVER] Sending in new packet BEGIN
#                  675ns:  [DRIVER] Sending Payload Begin
#                  675ns:  [DRIVER] Sending in new packet END
#                  675ns:  [DRIVER] Number of packets sent =          64
#                  675ns:  [DRIVER] The number of Packets in the Generator Mailbox =          36
#                  675[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  675ns: [CHECKER] Checker Start
# 
# 
#                  675ns:   [CHECKER] Pkt Contents: src1 = 00001ad9, src2 = 00009f5e, imm = 0000f564, 
#                  675ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  675ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009f5e    mem_GOL = 00009f5e
# 
#                  675ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  675ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  675ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  675ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  675ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  675ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  675ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  675ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  675ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  675ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  675ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  675ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  675______Cp0____opselect_chk:      001
#                  675______Cp0____operation_chk:     111
#                  675______Cp0____enable_arith_chk:  0
#                  675______Cp0____enable_shift_chk:  0
#                  675______Cp0____pkt_sent.enable:   0
#                  675______Cp23____
#                  675ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  685[RECEIVER]  Getting Payload
#                  685[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001d33
#                  685[RECEIVER]  Payload Obtained
#                  685[DRIVER] Sending in new packet BEGIN
#                  685ns:  [DRIVER] Sending Payload Begin
#                  685ns:  [DRIVER] Sending in new packet END
#                  685ns:  [DRIVER] Number of packets sent =          65
#                  685ns:  [DRIVER] The number of Packets in the Generator Mailbox =          35
#                  685[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  685ns: [CHECKER] Checker Start
# 
# 
#                  685ns:   [CHECKER] Pkt Contents: src1 = 000092b4, src2 = 00001d33, imm = 00004f41, 
#                  685ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  685ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001d33    mem_GOL = 00001d33
# 
#                  685ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  685ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  685ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  685ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  685ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  685ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  685ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  685ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  685ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  685ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  685ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  685ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  685______Cp0____opselect_chk:      001
#                  685______Cp0____operation_chk:     110
#                  685______Cp0____enable_arith_chk:  1
#                  685______Cp0____enable_shift_chk:  0
#                  685______Cp0____pkt_sent.enable:   1
#                  685______Cp7____
#                  685ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  695[RECEIVER]  Getting Payload
#                  695[RECEIVER]  Payload Contents:  Aluout = 0000ddf5 mem_write_en = 1 mem_data_write_out = 000072b6
#                  695[RECEIVER]  Payload Obtained
#                  695[DRIVER] Sending in new packet BEGIN
#                  695ns:  [DRIVER] Sending Payload Begin
#                  695ns:  [DRIVER] Sending in new packet END
#                  695ns:  [DRIVER] Number of packets sent =          66
#                  695ns:  [DRIVER] The number of Packets in the Generator Mailbox =          34
#                  695[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  695ns: [CHECKER] Checker Start
# 
# 
#                  695ns:   [CHECKER] Pkt Contents: src1 = 00003e55, src2 = 000072b6, imm = 0000ece4, 
#                  695ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  695ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000072b6    mem_GOL = 000072b6
# 
#                  695ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  695ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  695ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  695ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  695ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  695ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  695ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  695ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  695ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  695ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  695ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  695ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  695______Cp0____opselect_chk:      001
#                  695______Cp0____operation_chk:     110
#                  695______Cp0____enable_arith_chk:  0
#                  695______Cp0____enable_shift_chk:  0
#                  695______Cp0____pkt_sent.enable:   0
#                  695______Cp23____
#                  695ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ddf5   & Golden Model = 00000ddf5
# 
#                  705[RECEIVER]  Getting Payload
#                  705[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005b5a
#                  705[RECEIVER]  Payload Obtained
#                  705[DRIVER] Sending in new packet BEGIN
#                  705ns:  [DRIVER] Sending Payload Begin
#                  705ns:  [DRIVER] Sending in new packet END
#                  705ns:  [DRIVER] Number of packets sent =          67
#                  705ns:  [DRIVER] The number of Packets in the Generator Mailbox =          33
#                  705[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  705ns: [CHECKER] Checker Start
# 
# 
#                  705ns:   [CHECKER] Pkt Contents: src1 = 000007bf, src2 = 00005b5a, imm = 0000c7d0, 
#                  705ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  705ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005b5a    mem_GOL = 00005b5a
# 
#                  705ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  705ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  705ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  705ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  705ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  705ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  705ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  705ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  705ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  705ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  705ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  705ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  705______Cp0____opselect_chk:      001
#                  705______Cp0____operation_chk:     110
#                  705______Cp0____enable_arith_chk:  0
#                  705______Cp0____enable_shift_chk:  0
#                  705______Cp0____pkt_sent.enable:   0
#                  705______Cp23____
#                  705ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ddf5
# 
#                  715[RECEIVER]  Getting Payload
#                  715[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007308
#                  715[RECEIVER]  Payload Obtained
#                  715[DRIVER] Sending in new packet BEGIN
#                  715ns:  [DRIVER] Sending Payload Begin
#                  715ns:  [DRIVER] Sending in new packet END
#                  715ns:  [DRIVER] Number of packets sent =          68
#                  715ns:  [DRIVER] The number of Packets in the Generator Mailbox =          32
#                  715[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  715ns: [CHECKER] Checker Start
# 
# 
#                  715ns:   [CHECKER] Pkt Contents: src1 = 000058b0, src2 = 00007308, imm = 0000e01c, 
#                  715ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  715ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007308    mem_GOL = 00007308
# 
#                  715ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  715ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000058b0   & Golden Model = 000058b0
# 
#                  715ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007308   & Golden Model = 00007308
# 
#                  715ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  715ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  715ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  715ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  715ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  715ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  715ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  715ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000058b0  00007308 
#                  715ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  715______Cp0____opselect_chk:      001
#                  715______Cp0____operation_chk:     010
#                  715______Cp0____enable_arith_chk:  1
#                  715______Cp0____enable_shift_chk:  0
#                  715______Cp0____pkt_sent.enable:   1
#                  715______Cp3____
#                  715ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ddf5
# 
#                  725[RECEIVER]  Getting Payload
#                  725[RECEIVER]  Payload Contents:  Aluout = ffffe5a8 mem_write_en = 1 mem_data_write_out = 000040b5
#                  725[RECEIVER]  Payload Obtained
#                  725[DRIVER] Sending in new packet BEGIN
#                  725ns:  [DRIVER] Sending Payload Begin
#                  725ns:  [DRIVER] Sending in new packet END
#                  725ns:  [DRIVER] Number of packets sent =          69
#                  725ns:  [DRIVER] The number of Packets in the Generator Mailbox =          31
#                  725[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  725ns: [CHECKER] Checker Start
# 
# 
#                  725ns:   [CHECKER] Pkt Contents: src1 = 0000fcbc, src2 = 000040b5, imm = 0000c9ed, 
#                  725ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  725ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000040b5    mem_GOL = 000040b5
# 
#                  725ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  725ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000fcbc   & Golden Model = 0000fcbc
# 
#                  725ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000040b5   & Golden Model = 000040b5
# 
#                  725ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  725ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  725ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  725ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  725ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  725ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  725ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  725ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000fcbc  000040b5 
#                  725ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  725______Cp0____opselect_chk:      001
#                  725______Cp0____operation_chk:     101
#                  725______Cp0____enable_arith_chk:  1
#                  725______Cp0____enable_shift_chk:  0
#                  725______Cp0____pkt_sent.enable:   1
#                  725______Cp6____
#                  725ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffe5a8   & Golden Model = 1ffffe5a8
# 
#                  735[RECEIVER]  Getting Payload
#                  735[RECEIVER]  Payload Contents:  Aluout = 0000fcbd mem_write_en = 1 mem_data_write_out = 00006f50
#                  735[RECEIVER]  Payload Obtained
#                  735[DRIVER] Sending in new packet BEGIN
#                  735ns:  [DRIVER] Sending Payload Begin
#                  735ns:  [DRIVER] Sending in new packet END
#                  735ns:  [DRIVER] Number of packets sent =          70
#                  735ns:  [DRIVER] The number of Packets in the Generator Mailbox =          30
#                  735[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  735ns: [CHECKER] Checker Start
# 
# 
#                  735ns:   [CHECKER] Pkt Contents: src1 = 00004d79, src2 = 00006f50, imm = 00008332, 
#                  735ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  735ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006f50    mem_GOL = 00006f50
# 
#                  735ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  735ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d79   & Golden Model = 00004d79
# 
#                  735ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00006f50   & Golden Model = 00006f50
# 
#                  735ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  735ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  735ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  735ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  735ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d79  00006f50 
#                  735ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  735______Cp0____opselect_chk:      001
#                  735______Cp0____operation_chk:     001
#                  735______Cp0____enable_arith_chk:  1
#                  735______Cp0____enable_shift_chk:  0
#                  735______Cp0____pkt_sent.enable:   1
#                  735
#                  735______Cp2____
#                  735ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000fcbd   & Golden Model = 00000fcbd
# 
#                  745[RECEIVER]  Getting Payload
#                  745[RECEIVER]  Payload Contents:  Aluout = ffffbcc9 mem_write_en = 1 mem_data_write_out = 0000e704
#                  745[RECEIVER]  Payload Obtained
#                  745[DRIVER] Sending in new packet BEGIN
#                  745ns:  [DRIVER] Sending Payload Begin
#                  745ns:  [DRIVER] Sending in new packet END
#                  745ns:  [DRIVER] Number of packets sent =          71
#                  745ns:  [DRIVER] The number of Packets in the Generator Mailbox =          29
#                  745[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  745ns: [CHECKER] Checker Start
# 
# 
#                  745ns:   [CHECKER] Pkt Contents: src1 = 00000299, src2 = 0000e704, imm = 000093b1, 
#                  745ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  745ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e704    mem_GOL = 0000e704
# 
#                  745ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  745ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d79   & Golden Model = 00004d79
# 
#                  745ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00006f50   & Golden Model = 00006f50
# 
#                  745ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  745ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  745ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  745ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  745ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  745ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  745ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  745ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d79  00006f50 
#                  745ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  745______Cp0____opselect_chk:      001
#                  745______Cp0____operation_chk:     001
#                  745______Cp0____enable_arith_chk:  0
#                  745______Cp0____enable_shift_chk:  0
#                  745______Cp0____pkt_sent.enable:   0
#                  745______Cp23____
#                  745ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffbcc9   & Golden Model = 00000bcc9
# 
#                  755[RECEIVER]  Getting Payload
#                  755[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e6c8
#                  755[RECEIVER]  Payload Obtained
#                  755[DRIVER] Sending in new packet BEGIN
#                  755ns:  [DRIVER] Sending Payload Begin
#                  755ns:  [DRIVER] Sending in new packet END
#                  755ns:  [DRIVER] Number of packets sent =          72
#                  755ns:  [DRIVER] The number of Packets in the Generator Mailbox =          28
#                  755[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  755ns: [CHECKER] Checker Start
# 
# 
#                  755ns:   [CHECKER] Pkt Contents: src1 = 000053e1, src2 = 0000e6c8, imm = 0000a4a9, 
#                  755ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  755ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e6c8    mem_GOL = 0000e6c8
# 
#                  755ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  755ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000053e1   & Golden Model = 000053e1
# 
#                  755ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a4a9   & Golden Model = 0000a4a9
# 
#                  755ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  755ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  755ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  755ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  755ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  755ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  755ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  755ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000053e1  0000a4a9 
#                  755ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  755______Cp0____opselect_chk:      001
#                  755______Cp0____operation_chk:     011
#                  755______Cp0____enable_arith_chk:  1
#                  755______Cp0____enable_shift_chk:  0
#                  755______Cp0____pkt_sent.enable:   1
#                  755______Cp4____
#                  755ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000bcc9
# 
#                  765[RECEIVER]  Getting Payload
#                  765[RECEIVER]  Payload Contents:  Aluout = ffff5b56 mem_write_en = 1 mem_data_write_out = 00006e2a
#                  765[RECEIVER]  Payload Obtained
#                  765[DRIVER] Sending in new packet BEGIN
#                  765ns:  [DRIVER] Sending Payload Begin
#                  765ns:  [DRIVER] Sending in new packet END
#                  765ns:  [DRIVER] Number of packets sent =          73
#                  765ns:  [DRIVER] The number of Packets in the Generator Mailbox =          27
#                  765[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  765ns: [CHECKER] Checker Start
# 
# 
#                  765ns:   [CHECKER] Pkt Contents: src1 = 0000ad6b, src2 = 00006e2a, imm = 0000ff23, 
#                  765ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  765ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006e2a    mem_GOL = 00006e2a
# 
#                  765ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  765ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000053e1   & Golden Model = 000053e1
# 
#                  765ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a4a9   & Golden Model = 0000a4a9
# 
#                  765ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  765ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  765ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  765ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  765ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  765ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  765ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  765ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000053e1  0000a4a9 
#                  765ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  765______Cp0____opselect_chk:      001
#                  765______Cp0____operation_chk:     011
#                  765______Cp0____enable_arith_chk:  0
#                  765______Cp0____enable_shift_chk:  0
#                  765______Cp0____pkt_sent.enable:   0
#                  765______Cp23____
#                  765ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff5b56   & Golden Model = 1ffff5b56
# 
#                  775[RECEIVER]  Getting Payload
#                  775[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b8e2
#                  775[RECEIVER]  Payload Obtained
#                  775[DRIVER] Sending in new packet BEGIN
#                  775ns:  [DRIVER] Sending Payload Begin
#                  775ns:  [DRIVER] Sending in new packet END
#                  775ns:  [DRIVER] Number of packets sent =          74
#                  775ns:  [DRIVER] The number of Packets in the Generator Mailbox =          26
#                  775[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  775ns: [CHECKER] Checker Start
# 
# 
#                  775ns:   [CHECKER] Pkt Contents: src1 = 00003083, src2 = 0000b8e2, imm = 00009866, 
#                  775ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  775ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b8e2    mem_GOL = 0000b8e2
# 
#                  775ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  775ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  775ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  775ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  775ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  775ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  775ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  775ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  775ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  775ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  775ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  775ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  775______Cp0____opselect_chk:      001
#                  775______Cp0____operation_chk:     000
#                  775______Cp0____enable_arith_chk:  1
#                  775______Cp0____enable_shift_chk:  0
#                  775______Cp0____pkt_sent.enable:   1
#                  775______Cp1____
#                  775ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff5b56
# 
#                  785[RECEIVER]  Getting Payload
#                  785[RECEIVER]  Payload Contents:  Aluout = 0000e965 mem_write_en = 1 mem_data_write_out = 0000bb5d
#                  785[RECEIVER]  Payload Obtained
#                  785[DRIVER] Sending in new packet BEGIN
#                  785ns:  [DRIVER] Sending Payload Begin
#                  785ns:  [DRIVER] Sending in new packet END
#                  785ns:  [DRIVER] Number of packets sent =          75
#                  785ns:  [DRIVER] The number of Packets in the Generator Mailbox =          25
#                  785[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  785ns: [CHECKER] Checker Start
# 
# 
#                  785ns:   [CHECKER] Pkt Contents: src1 = 0000f540, src2 = 0000bb5d, imm = 0000df6e, 
#                  785ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  785ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bb5d    mem_GOL = 0000bb5d
# 
#                  785ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  785ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  785ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  785ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  785ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  785ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  785ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  785ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  785ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  785______Cp0____opselect_chk:      001
#                  785______Cp0____operation_chk:     000
#                  785______Cp0____enable_arith_chk:  0
#                  785______Cp0____enable_shift_chk:  0
#                  785______Cp0____pkt_sent.enable:   0
#                  785______Cp23____
#                  785ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000e965   & Golden Model = 00000e965
# 
#                  795[RECEIVER]  Getting Payload
#                  795[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000bf2b
#                  795[RECEIVER]  Payload Obtained
#                  795[DRIVER] Sending in new packet BEGIN
#                  795ns:  [DRIVER] Sending Payload Begin
#                  795ns:  [DRIVER] Sending in new packet END
#                  795ns:  [DRIVER] Number of packets sent =          76
#                  795ns:  [DRIVER] The number of Packets in the Generator Mailbox =          24
#                  795[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  795ns: [CHECKER] Checker Start
# 
# 
#                  795ns:   [CHECKER] Pkt Contents: src1 = 0000c13c, src2 = 0000bf2b, imm = 0000ef2e, 
#                  795ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  795ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bf2b    mem_GOL = 0000bf2b
# 
#                  795ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  795ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  795ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  795ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  795ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  795ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  795ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  795ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  795ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  795______Cp0____opselect_chk:      001
#                  795______Cp0____operation_chk:     000
#                  795______Cp0____enable_arith_chk:  0
#                  795______Cp0____enable_shift_chk:  0
#                  795______Cp0____pkt_sent.enable:   0
#                  795______Cp23____
#                  795ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  805[RECEIVER]  Getting Payload
#                  805[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005d50
#                  805[RECEIVER]  Payload Obtained
#                  805[DRIVER] Sending in new packet BEGIN
#                  805ns:  [DRIVER] Sending Payload Begin
#                  805ns:  [DRIVER] Sending in new packet END
#                  805ns:  [DRIVER] Number of packets sent =          77
#                  805ns:  [DRIVER] The number of Packets in the Generator Mailbox =          23
#                  805[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  805ns: [CHECKER] Checker Start
# 
# 
#                  805ns:   [CHECKER] Pkt Contents: src1 = 0000b40a, src2 = 00005d50, imm = 0000a7b5, 
#                  805ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  805ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005d50    mem_GOL = 00005d50
# 
#                  805ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  805ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  805ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  805ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  805ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  805ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  805ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  805ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  805ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  805______Cp0____opselect_chk:      001
#                  805______Cp0____operation_chk:     000
#                  805______Cp0____enable_arith_chk:  0
#                  805______Cp0____enable_shift_chk:  0
#                  805______Cp0____pkt_sent.enable:   0
#                  805______Cp23____
#                  805ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  815[RECEIVER]  Getting Payload
#                  815[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 000040ab
#                  815[RECEIVER]  Payload Obtained
#                  815[DRIVER] Sending in new packet BEGIN
#                  815ns:  [DRIVER] Sending Payload Begin
#                  815ns:  [DRIVER] Sending in new packet END
#                  815ns:  [DRIVER] Number of packets sent =          78
#                  815ns:  [DRIVER] The number of Packets in the Generator Mailbox =          22
#                  815[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  815ns: [CHECKER] Checker Start
# 
# 
#                  815ns:   [CHECKER] Pkt Contents: src1 = 00004348, src2 = 000040ab, imm = 0000db6c, 
#                  815ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  815ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000040ab    mem_GOL = 000040ab
# 
#                  815ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  815ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  815ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  815ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  815ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  815ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  815ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  815ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  815ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  815______Cp0____opselect_chk:      001
#                  815______Cp0____operation_chk:     000
#                  815______Cp0____enable_arith_chk:  0
#                  815______Cp0____enable_shift_chk:  0
#                  815______Cp0____pkt_sent.enable:   0
#                  815______Cp23____
#                  815ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  825[RECEIVER]  Getting Payload
#                  825[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f101
#                  825[RECEIVER]  Payload Obtained
#                  825[DRIVER] Sending in new packet BEGIN
#                  825ns:  [DRIVER] Sending Payload Begin
#                  825ns:  [DRIVER] Sending in new packet END
#                  825ns:  [DRIVER] Number of packets sent =          79
#                  825ns:  [DRIVER] The number of Packets in the Generator Mailbox =          21
#                  825[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  825ns: [CHECKER] Checker Start
# 
# 
#                  825ns:   [CHECKER] Pkt Contents: src1 = 00004d0f, src2 = 0000f101, imm = 00007681, 
#                  825ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  825ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f101    mem_GOL = 0000f101
# 
#                  825ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  825ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  825ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  825ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  825ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  825ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  825ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  825ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  825ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  825______Cp0____opselect_chk:      001
#                  825______Cp0____operation_chk:     000
#                  825______Cp0____enable_arith_chk:  0
#                  825______Cp0____enable_shift_chk:  0
#                  825______Cp0____pkt_sent.enable:   0
#                  825______Cp23____
#                  825ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  835[RECEIVER]  Getting Payload
#                  835[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000dc66
#                  835[RECEIVER]  Payload Obtained
#                  835[DRIVER] Sending in new packet BEGIN
#                  835ns:  [DRIVER] Sending Payload Begin
#                  835ns:  [DRIVER] Sending in new packet END
#                  835ns:  [DRIVER] Number of packets sent =          80
#                  835ns:  [DRIVER] The number of Packets in the Generator Mailbox =          20
#                  835[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  835ns: [CHECKER] Checker Start
# 
# 
#                  835ns:   [CHECKER] Pkt Contents: src1 = 0000a59e, src2 = 0000dc66, imm = 00002606, 
#                  835ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  835ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000dc66    mem_GOL = 0000dc66
# 
#                  835ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  835ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  835ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  835ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  835ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  835ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  835ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  835ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  835ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  835______Cp0____opselect_chk:      001
#                  835______Cp0____operation_chk:     000
#                  835______Cp0____enable_arith_chk:  0
#                  835______Cp0____enable_shift_chk:  0
#                  835______Cp0____pkt_sent.enable:   0
#                  835______Cp23____
#                  835ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  845[RECEIVER]  Getting Payload
#                  845[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002b95
#                  845[RECEIVER]  Payload Obtained
#                  845[DRIVER] Sending in new packet BEGIN
#                  845ns:  [DRIVER] Sending Payload Begin
#                  845ns:  [DRIVER] Sending in new packet END
#                  845ns:  [DRIVER] Number of packets sent =          81
#                  845ns:  [DRIVER] The number of Packets in the Generator Mailbox =          19
#                  845[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  845ns: [CHECKER] Checker Start
# 
# 
#                  845ns:   [CHECKER] Pkt Contents: src1 = 0000a23e, src2 = 00002b95, imm = 000095d0, 
#                  845ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  845ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002b95    mem_GOL = 00002b95
# 
#                  845ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  845ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  845ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  845ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  845ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  845ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  845ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  845ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  845ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  845______Cp0____opselect_chk:      001
#                  845______Cp0____operation_chk:     000
#                  845______Cp0____enable_arith_chk:  0
#                  845______Cp0____enable_shift_chk:  0
#                  845______Cp0____pkt_sent.enable:   0
#                  845______Cp23____
#                  845ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  855[RECEIVER]  Getting Payload
#                  855[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005d13
#                  855[RECEIVER]  Payload Obtained
#                  855[DRIVER] Sending in new packet BEGIN
#                  855ns:  [DRIVER] Sending Payload Begin
#                  855ns:  [DRIVER] Sending in new packet END
#                  855ns:  [DRIVER] Number of packets sent =          82
#                  855ns:  [DRIVER] The number of Packets in the Generator Mailbox =          18
#                  855[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  855ns: [CHECKER] Checker Start
# 
# 
#                  855ns:   [CHECKER] Pkt Contents: src1 = 00009889, src2 = 00005d13, imm = 00005e48, 
#                  855ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  855ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005d13    mem_GOL = 00005d13
# 
#                  855ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  855ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009889   & Golden Model = 00009889
# 
#                  855ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005e48   & Golden Model = 00005e48
# 
#                  855ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  855ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  855ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  855ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  855ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  855ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  855ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  855ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009889  00005e48 
#                  855ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  855______Cp0____opselect_chk:      001
#                  855______Cp0____operation_chk:     110
#                  855______Cp0____enable_arith_chk:  1
#                  855______Cp0____enable_shift_chk:  0
#                  855______Cp0____pkt_sent.enable:   1
#                  855______Cp7____
#                  855ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  865[RECEIVER]  Getting Payload
#                  865[RECEIVER]  Payload Contents:  Aluout = 0000c6c1 mem_write_en = 1 mem_data_write_out = 000017cd
#                  865[RECEIVER]  Payload Obtained
#                  865[DRIVER] Sending in new packet BEGIN
#                  865ns:  [DRIVER] Sending Payload Begin
#                  865ns:  [DRIVER] Sending in new packet END
#                  865ns:  [DRIVER] Number of packets sent =          83
#                  865ns:  [DRIVER] The number of Packets in the Generator Mailbox =          17
#                  865[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  865ns: [CHECKER] Checker Start
# 
# 
#                  865ns:   [CHECKER] Pkt Contents: src1 = 0000a3d9, src2 = 000017cd, imm = 0000fbda, 
#                  865ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  865ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000017cd    mem_GOL = 000017cd
# 
#                  865ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  865ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009889   & Golden Model = 00009889
# 
#                  865ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005e48   & Golden Model = 00005e48
# 
#                  865ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  865ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  865ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  865ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  865ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  865ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  865ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  865ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009889  00005e48 
#                  865ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  865______Cp0____opselect_chk:      001
#                  865______Cp0____operation_chk:     110
#                  865______Cp0____enable_arith_chk:  0
#                  865______Cp0____enable_shift_chk:  0
#                  865______Cp0____pkt_sent.enable:   0
#                  865______Cp23____
#                  865ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c6c1   & Golden Model = 00000c6c1
# 
#                  875[RECEIVER]  Getting Payload
#                  875[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002cbb
#                  875[RECEIVER]  Payload Obtained
#                  875[DRIVER] Sending in new packet BEGIN
#                  875ns:  [DRIVER] Sending Payload Begin
#                  875ns:  [DRIVER] Sending in new packet END
#                  875ns:  [DRIVER] Number of packets sent =          84
#                  875ns:  [DRIVER] The number of Packets in the Generator Mailbox =          16
#                  875[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  875ns: [CHECKER] Checker Start
# 
# 
#                  875ns:   [CHECKER] Pkt Contents: src1 = 00007500, src2 = 00002cbb, imm = 0000a1c6, 
#                  875ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  875ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002cbb    mem_GOL = 00002cbb
# 
#                  875ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  875ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00007500   & Golden Model = 00007500
# 
#                  875ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002cbb   & Golden Model = 00002cbb
# 
#                  875ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  875ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  875ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  875ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  875ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  875ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  875ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  875ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00007500  00002cbb 
#                  875ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  875______Cp0____opselect_chk:      001
#                  875______Cp0____operation_chk:     111
#                  875______Cp0____enable_arith_chk:  1
#                  875______Cp0____enable_shift_chk:  0
#                  875______Cp0____pkt_sent.enable:   1
#                  875______Cp7____
#                  875ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000c6c1
# 
#                  885[RECEIVER]  Getting Payload
#                  885[RECEIVER]  Payload Contents:  Aluout = 2cbb0000 mem_write_en = 1 mem_data_write_out = 0000dec7
#                  885[RECEIVER]  Payload Obtained
#                  885[DRIVER] Sending in new packet BEGIN
#                  885ns:  [DRIVER] Sending Payload Begin
#                  885ns:  [DRIVER] Sending in new packet END
#                  885ns:  [DRIVER] Number of packets sent =          85
#                  885ns:  [DRIVER] The number of Packets in the Generator Mailbox =          15
#                  885[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  885ns: [CHECKER] Checker Start
# 
# 
#                  885ns:   [CHECKER] Pkt Contents: src1 = 0000fbc7, src2 = 0000dec7, imm = 00003468, 
#                  885ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  885ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000dec7    mem_GOL = 0000dec7
# 
#                  885ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  885ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000fbc7   & Golden Model = 0000fbc7
# 
#                  885ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003468   & Golden Model = 00003468
# 
#                  885ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  885ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  885ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  885ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  885ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  885ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  885ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  885ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000fbc7  00003468 
#                  885ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  885______Cp0____opselect_chk:      001
#                  885______Cp0____operation_chk:     010
#                  885______Cp0____enable_arith_chk:  1
#                  885______Cp0____enable_shift_chk:  0
#                  885______Cp0____pkt_sent.enable:   1
#                  885______Cp3____
#                  885ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 2cbb0000   & Golden Model = 02cbb0000
# 
#                  895[RECEIVER]  Getting Payload
#                  895[RECEIVER]  Payload Contents:  Aluout = 0000c75f mem_write_en = 1 mem_data_write_out = 000026fd
#                  895[RECEIVER]  Payload Obtained
#                  895[DRIVER] Sending in new packet BEGIN
#                  895ns:  [DRIVER] Sending Payload Begin
#                  895ns:  [DRIVER] Sending in new packet END
#                  895ns:  [DRIVER] Number of packets sent =          86
#                  895ns:  [DRIVER] The number of Packets in the Generator Mailbox =          14
#                  895[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  895ns: [CHECKER] Checker Start
# 
# 
#                  895ns:   [CHECKER] Pkt Contents: src1 = 0000aad9, src2 = 000026fd, imm = 000006ab, 
#                  895ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  895ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000026fd    mem_GOL = 000026fd
# 
#                  895ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  895ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000aad9   & Golden Model = 0000aad9
# 
#                  895ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000026fd   & Golden Model = 000026fd
# 
#                  895ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  895ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  895ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  895ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  895ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  895ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  895ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  895ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000aad9  000026fd 
#                  895ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  895______Cp0____opselect_chk:      001
#                  895______Cp0____operation_chk:     101
#                  895______Cp0____enable_arith_chk:  1
#                  895______Cp0____enable_shift_chk:  0
#                  895______Cp0____pkt_sent.enable:   1
#                  895______Cp6____
#                  895ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c75f   & Golden Model = 00000c75f
# 
#                  905[RECEIVER]  Getting Payload
#                  905[RECEIVER]  Payload Contents:  Aluout = 0000aefd mem_write_en = 1 mem_data_write_out = 00002139
#                  905[RECEIVER]  Payload Obtained
#                  905[DRIVER] Sending in new packet BEGIN
#                  905ns:  [DRIVER] Sending Payload Begin
#                  905ns:  [DRIVER] Sending in new packet END
#                  905ns:  [DRIVER] Number of packets sent =          87
#                  905ns:  [DRIVER] The number of Packets in the Generator Mailbox =          13
#                  905[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  905ns: [CHECKER] Checker Start
# 
# 
#                  905ns:   [CHECKER] Pkt Contents: src1 = 0000d2c1, src2 = 00002139, imm = 00001d2a, 
#                  905ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  905ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002139    mem_GOL = 00002139
# 
#                  905ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  905ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d2c1   & Golden Model = 0000d2c1
# 
#                  905ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001d2a   & Golden Model = 00001d2a
# 
#                  905ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  905ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  905ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  905ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  905ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  905ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  905ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  905ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d2c1  00001d2a 
#                  905ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  905______Cp0____opselect_chk:      001
#                  905______Cp0____operation_chk:     000
#                  905______Cp0____enable_arith_chk:  1
#                  905______Cp0____enable_shift_chk:  0
#                  905______Cp0____pkt_sent.enable:   1
#                  905______Cp1____
#                  905ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000aefd   & Golden Model = 00000aefd
# 
#                  915[RECEIVER]  Getting Payload
#                  915[RECEIVER]  Payload Contents:  Aluout = 0000efeb mem_write_en = 1 mem_data_write_out = 0000e01c
#                  915[RECEIVER]  Payload Obtained
#                  915[DRIVER] Sending in new packet BEGIN
#                  915ns:  [DRIVER] Sending Payload Begin
#                  915ns:  [DRIVER] Sending in new packet END
#                  915ns:  [DRIVER] Number of packets sent =          88
#                  915ns:  [DRIVER] The number of Packets in the Generator Mailbox =          12
#                  915[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  915ns: [CHECKER] Checker Start
# 
# 
#                  915ns:   [CHECKER] Pkt Contents: src1 = 0000b578, src2 = 0000e01c, imm = 00003797, 
#                  915ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  915ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e01c    mem_GOL = 0000e01c
# 
#                  915ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  915ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b578   & Golden Model = 0000b578
# 
#                  915ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003797   & Golden Model = 00003797
# 
#                  915ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  915ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  915ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  915ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  915ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  915ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  915ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  915ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b578  00003797 
#                  915ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  915______Cp0____opselect_chk:      001
#                  915______Cp0____operation_chk:     011
#                  915______Cp0____enable_arith_chk:  1
#                  915______Cp0____enable_shift_chk:  0
#                  915______Cp0____pkt_sent.enable:   1
#                  915______Cp4____
#                  915ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000efeb   & Golden Model = 00000efeb
# 
#                  925[RECEIVER]  Getting Payload
#                  925[RECEIVER]  Payload Contents:  Aluout = ffffc868 mem_write_en = 1 mem_data_write_out = 0000d296
#                  925[RECEIVER]  Payload Obtained
#                  925[DRIVER] Sending in new packet BEGIN
#                  925ns:  [DRIVER] Sending Payload Begin
#                  925ns:  [DRIVER] Sending in new packet END
#                  925ns:  [DRIVER] Number of packets sent =          89
#                  925ns:  [DRIVER] The number of Packets in the Generator Mailbox =          11
#                  925[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  925ns: [CHECKER] Checker Start
# 
# 
#                  925ns:   [CHECKER] Pkt Contents: src1 = 0000ef89, src2 = 0000d296, imm = 000063e2, 
#                  925ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  925ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d296    mem_GOL = 0000d296
# 
#                  925ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  925ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b578   & Golden Model = 0000b578
# 
#                  925ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003797   & Golden Model = 00003797
# 
#                  925ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  925ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  925ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  925ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  925ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  925ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  925ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  925ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b578  00003797 
#                  925ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  925______Cp0____opselect_chk:      001
#                  925______Cp0____operation_chk:     011
#                  925______Cp0____enable_arith_chk:  0
#                  925______Cp0____enable_shift_chk:  0
#                  925______Cp0____pkt_sent.enable:   0
#                  925______Cp23____
#                  925ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffc868   & Golden Model = 1ffffc868
# 
#                  935[RECEIVER]  Getting Payload
#                  935[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000300b
#                  935[RECEIVER]  Payload Obtained
#                  935[DRIVER] Sending in new packet BEGIN
#                  935ns:  [DRIVER] Sending Payload Begin
#                  935ns:  [DRIVER] Sending in new packet END
#                  935ns:  [DRIVER] Number of packets sent =          90
#                  935ns:  [DRIVER] The number of Packets in the Generator Mailbox =          10
#                  935[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  935ns: [CHECKER] Checker Start
# 
# 
#                  935ns:   [CHECKER] Pkt Contents: src1 = 0000b127, src2 = 0000300b, imm = 00008894, 
#                  935ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  935ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000300b    mem_GOL = 0000300b
# 
#                  935ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  935ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  935ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  935ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  935ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  935ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  935ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  935ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  935ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  935ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  935ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  935ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  935______Cp0____opselect_chk:      001
#                  935______Cp0____operation_chk:     110
#                  935______Cp0____enable_arith_chk:  1
#                  935______Cp0____enable_shift_chk:  0
#                  935______Cp0____pkt_sent.enable:   1
#                  935______Cp7____
#                  935ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffffc868
# 
#                  945[RECEIVER]  Getting Payload
#                  945[RECEIVER]  Payload Contents:  Aluout = 0000812c mem_write_en = 1 mem_data_write_out = 0000b83b
#                  945[RECEIVER]  Payload Obtained
#                  945[DRIVER] Sending in new packet BEGIN
#                  945ns:  [DRIVER] Sending Payload Begin
#                  945ns:  [DRIVER] Sending in new packet END
#                  945ns:  [DRIVER] Number of packets sent =          91
#                  945ns:  [DRIVER] The number of Packets in the Generator Mailbox =           9
#                  945[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  945ns: [CHECKER] Checker Start
# 
# 
#                  945ns:   [CHECKER] Pkt Contents: src1 = 0000e454, src2 = 0000b83b, imm = 0000dadf, 
#                  945ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  945ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b83b    mem_GOL = 0000b83b
# 
#                  945ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  945ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  945ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  945ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  945ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  945ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  945ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  945ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  945ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  945ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  945ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  945ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  945______Cp0____opselect_chk:      001
#                  945______Cp0____operation_chk:     110
#                  945______Cp0____enable_arith_chk:  0
#                  945______Cp0____enable_shift_chk:  0
#                  945______Cp0____pkt_sent.enable:   0
#                  945______Cp23____
#                  945ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000812c   & Golden Model = 00000812c
# 
#                  955[RECEIVER]  Getting Payload
#                  955[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002efc
#                  955[RECEIVER]  Payload Obtained
#                  955[DRIVER] Sending in new packet BEGIN
#                  955ns:  [DRIVER] Sending Payload Begin
#                  955ns:  [DRIVER] Sending in new packet END
#                  955ns:  [DRIVER] Number of packets sent =          92
#                  955ns:  [DRIVER] The number of Packets in the Generator Mailbox =           8
#                  955[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  955ns: [CHECKER] Checker Start
# 
# 
#                  955ns:   [CHECKER] Pkt Contents: src1 = 000051cd, src2 = 00002efc, imm = 0000d256, 
#                  955ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  955ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002efc    mem_GOL = 00002efc
# 
#                  955ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  955ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  955ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  955ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  955ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  955ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  955ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  955ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  955ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  955ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  955ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  955ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  955______Cp0____opselect_chk:      001
#                  955______Cp0____operation_chk:     110
#                  955______Cp0____enable_arith_chk:  0
#                  955______Cp0____enable_shift_chk:  0
#                  955______Cp0____pkt_sent.enable:   0
#                  955______Cp23____
#                  955ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  965[RECEIVER]  Getting Payload
#                  965[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007944
#                  965[RECEIVER]  Payload Obtained
#                  965[DRIVER] Sending in new packet BEGIN
#                  965ns:  [DRIVER] Sending Payload Begin
#                  965ns:  [DRIVER] Sending in new packet END
#                  965ns:  [DRIVER] Number of packets sent =          93
#                  965ns:  [DRIVER] The number of Packets in the Generator Mailbox =           7
#                  965[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  965ns: [CHECKER] Checker Start
# 
# 
#                  965ns:   [CHECKER] Pkt Contents: src1 = 000023c8, src2 = 00007944, imm = 000020cc, 
#                  965ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  965ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007944    mem_GOL = 00007944
# 
#                  965ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  965ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  965ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  965ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  965ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  965ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  965ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  965ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  965ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  965ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  965ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  965ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  965______Cp0____opselect_chk:      001
#                  965______Cp0____operation_chk:     110
#                  965______Cp0____enable_arith_chk:  0
#                  965______Cp0____enable_shift_chk:  0
#                  965______Cp0____pkt_sent.enable:   0
#                  965______Cp23____
#                  965ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  975[RECEIVER]  Getting Payload
#                  975[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000be00
#                  975[RECEIVER]  Payload Obtained
#                  975[DRIVER] Sending in new packet BEGIN
#                  975ns:  [DRIVER] Sending Payload Begin
#                  975ns:  [DRIVER] Sending in new packet END
#                  975ns:  [DRIVER] Number of packets sent =          94
#                  975ns:  [DRIVER] The number of Packets in the Generator Mailbox =           6
#                  975[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  975ns: [CHECKER] Checker Start
# 
# 
#                  975ns:   [CHECKER] Pkt Contents: src1 = 0000757d, src2 = 0000be00, imm = 0000fe59, 
#                  975ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  975ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000be00    mem_GOL = 0000be00
# 
#                  975ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  975ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000757d   & Golden Model = 0000757d
# 
#                  975ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000fe59   & Golden Model = 0000fe59
# 
#                  975ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  975ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  975ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  975ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  975ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  975ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  975ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  975ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000757d  0000fe59 
#                  975ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  975______Cp0____opselect_chk:      001
#                  975______Cp0____operation_chk:     110
#                  975______Cp0____enable_arith_chk:  1
#                  975______Cp0____enable_shift_chk:  0
#                  975______Cp0____pkt_sent.enable:   1
#                  975______Cp7____
#                  975ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  985[RECEIVER]  Getting Payload
#                  985[RECEIVER]  Payload Contents:  Aluout = 00008b24 mem_write_en = 1 mem_data_write_out = 00009641
#                  985[RECEIVER]  Payload Obtained
#                  985[DRIVER] Sending in new packet BEGIN
#                  985ns:  [DRIVER] Sending Payload Begin
#                  985ns:  [DRIVER] Sending in new packet END
#                  985ns:  [DRIVER] Number of packets sent =          95
#                  985ns:  [DRIVER] The number of Packets in the Generator Mailbox =           5
#                  985[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  985ns: [CHECKER] Checker Start
# 
# 
#                  985ns:   [CHECKER] Pkt Contents: src1 = 00003e50, src2 = 00009641, imm = 0000890d, 
#                  985ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  985ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009641    mem_GOL = 00009641
# 
#                  985ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  985ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003e50   & Golden Model = 00003e50
# 
#                  985ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00009641   & Golden Model = 00009641
# 
#                  985ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  985ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  985ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  985ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  985ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003e50  00009641 
#                  985ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  985______Cp0____opselect_chk:      001
#                  985______Cp0____operation_chk:     001
#                  985______Cp0____enable_arith_chk:  1
#                  985______Cp0____enable_shift_chk:  0
#                  985______Cp0____pkt_sent.enable:   1
#                  985
#                  985______Cp2____
#                  985ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00008b24   & Golden Model = 000008b24
# 
#                  995[RECEIVER]  Getting Payload
#                  995[RECEIVER]  Payload Contents:  Aluout = ffffd491 mem_write_en = 1 mem_data_write_out = 000035de
#                  995[RECEIVER]  Payload Obtained
#                  995[DRIVER] Sending in new packet BEGIN
#                  995ns:  [DRIVER] Sending Payload Begin
#                  995ns:  [DRIVER] Sending in new packet END
#                  995ns:  [DRIVER] Number of packets sent =          96
#                  995ns:  [DRIVER] The number of Packets in the Generator Mailbox =           4
#                  995[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  995ns: [CHECKER] Checker Start
# 
# 
#                  995ns:   [CHECKER] Pkt Contents: src1 = 00004b86, src2 = 000035de, imm = 00007e50, 
#                  995ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  995ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000035de    mem_GOL = 000035de
# 
#                  995ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  995ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004b86   & Golden Model = 00004b86
# 
#                  995ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007e50   & Golden Model = 00007e50
# 
#                  995ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  995ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  995ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  995ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  995ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  995ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  995ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  995ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004b86  00007e50 
#                  995ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  995______Cp0____opselect_chk:      001
#                  995______Cp0____operation_chk:     100
#                  995______Cp0____enable_arith_chk:  1
#                  995______Cp0____enable_shift_chk:  0
#                  995______Cp0____pkt_sent.enable:   1
#                  995______Cp5____
#                  995ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffd491   & Golden Model = 00000d491
# 
#                 1005[RECEIVER]  Getting Payload
#                 1005[RECEIVER]  Payload Contents:  Aluout = 00004a00 mem_write_en = 1 mem_data_write_out = 000072ae
#                 1005[RECEIVER]  Payload Obtained
#                 1005[DRIVER] Sending in new packet BEGIN
#                 1005ns:  [DRIVER] Sending Payload Begin
#                 1005ns:  [DRIVER] Sending in new packet END
#                 1005ns:  [DRIVER] Number of packets sent =          97
#                 1005ns:  [DRIVER] The number of Packets in the Generator Mailbox =           3
#                 1005[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1005ns: [CHECKER] Checker Start
# 
# 
#                 1005ns:   [CHECKER] Pkt Contents: src1 = 0000c9fb, src2 = 000072ae, imm = 0000b046, 
#                 1005ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                 1005ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000072ae    mem_GOL = 000072ae
# 
#                 1005ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1005ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c9fb   & Golden Model = 0000c9fb
# 
#                 1005ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b046   & Golden Model = 0000b046
# 
#                 1005ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1005ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1005ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1005ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1005ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1005ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1005ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1005ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c9fb  0000b046 
#                 1005ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1005______Cp0____opselect_chk:      001
#                 1005______Cp0____operation_chk:     010
#                 1005______Cp0____enable_arith_chk:  1
#                 1005______Cp0____enable_shift_chk:  0
#                 1005______Cp0____pkt_sent.enable:   1
#                 1005______Cp3____
#                 1005ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00004a00   & Golden Model = 000004a00
# 
#                 1015[RECEIVER]  Getting Payload
#                 1015[RECEIVER]  Payload Contents:  Aluout = 000019b5 mem_write_en = 1 mem_data_write_out = 0000d5be
#                 1015[RECEIVER]  Payload Obtained
#                 1015[DRIVER] Sending in new packet BEGIN
#                 1015ns:  [DRIVER] Sending Payload Begin
#                 1015ns:  [DRIVER] Sending in new packet END
#                 1015ns:  [DRIVER] Number of packets sent =          98
#                 1015ns:  [DRIVER] The number of Packets in the Generator Mailbox =           2
#                 1015[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1015ns: [CHECKER] Checker Start
# 
# 
#                 1015ns:   [CHECKER] Pkt Contents: src1 = 0000f8c3, src2 = 0000d5be, imm = 0000b214, 
#                 1015ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                 1015ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d5be    mem_GOL = 0000d5be
# 
#                 1015ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1015ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1015ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1015ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1015ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1015ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1015ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1015ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1015ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1015ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1015ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1015ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1015______Cp0____opselect_chk:      001
#                 1015______Cp0____operation_chk:     111
#                 1015______Cp0____enable_arith_chk:  1
#                 1015______Cp0____enable_shift_chk:  0
#                 1015______Cp0____pkt_sent.enable:   1
#                 1015______Cp7____
#                 1015ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000019b5   & Golden Model = 0000019b5
# 
#                 1025[RECEIVER]  Getting Payload
#                 1025[RECEIVER]  Payload Contents:  Aluout = d5be0000 mem_write_en = 1 mem_data_write_out = 0000105a
#                 1025[RECEIVER]  Payload Obtained
#                 1025[DRIVER] Sending in new packet BEGIN
#                 1025ns:  [DRIVER] Sending Payload Begin
#                 1025ns:  [DRIVER] Sending in new packet END
#                 1025ns:  [DRIVER] Number of packets sent =          99
#                 1025ns:  [DRIVER] The number of Packets in the Generator Mailbox =           1
#                 1025[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1025ns: [CHECKER] Checker Start
# 
# 
#                 1025ns:   [CHECKER] Pkt Contents: src1 = 0000d7fc, src2 = 0000105a, imm = 00004e3d, 
#                 1025ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                 1025ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000105a    mem_GOL = 0000105a
# 
#                 1025ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1025ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1025ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1025ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1025ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1025ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1025ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1025ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1025ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1025ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1025ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1025ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1025______Cp0____opselect_chk:      001
#                 1025______Cp0____operation_chk:     111
#                 1025______Cp0____enable_arith_chk:  0
#                 1025______Cp0____enable_shift_chk:  0
#                 1025______Cp0____pkt_sent.enable:   0
#                 1025______Cp23____
#                 1025ns:   [ASSERT_aluout] PASS ALUOUT: DUT = d5be0000   & Golden Model = 0d5be0000
# 
#                 1035[RECEIVER]  Getting Payload
#                 1035[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007f8c
#                 1035[RECEIVER]  Payload Obtained
#                 1035[DRIVER] Sending in new packet BEGIN
#                 1035ns:  [DRIVER] Sending Payload Begin
#                 1035ns:  [DRIVER] Sending in new packet END
#                 1035ns:  [DRIVER] Number of packets sent =         100
#                 1035ns:  [DRIVER] The number of Packets in the Generator Mailbox =           0
#                 1035[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1035ns: [CHECKER] Checker Start
# 
# 
#                 1035ns:   [CHECKER] Pkt Contents: src1 = 0000eb5f, src2 = 00007f8c, imm = 0000c5cb, 
#                 1035ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                 1035ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007f8c    mem_GOL = 00007f8c
# 
#                 1035ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1035ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1035ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1035ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1035ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1035ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1035ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1035ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1035ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1035ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1035ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1035ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1035______Cp0____opselect_chk:      001
#                 1035______Cp0____operation_chk:     111
#                 1035______Cp0____enable_arith_chk:  0
#                 1035______Cp0____enable_shift_chk:  0
#                 1035______Cp0____pkt_sent.enable:   0
#                 1035______Cp23____
#                 1035ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0d5be0000
# 
#                 1045[RECEIVER]  Getting Payload
#                 1045[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000fa73
#                 1045[RECEIVER]  Payload Obtained
#                 1045[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1045ns: [CHECKER] Checker Start
# 
# 
#                 1045ns:   [CHECKER] Pkt Contents: src1 = 0000f5d5, src2 = 0000fa73, imm = 0000f4e6, 
#                 1045ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                 1045ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000fa73    mem_GOL = 0000fa73
# 
#                 1045ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1045ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f5d5   & Golden Model = 0000f5d5
# 
#                 1045ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000f4e6   & Golden Model = 0000f4e6
# 
#                 1045ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1045ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1045ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1045ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1045ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1045ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1045ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1045ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f5d5  0000f4e6 
#                 1045ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1045______Cp0____opselect_chk:      001
#                 1045______Cp0____operation_chk:     010
#                 1045______Cp0____enable_arith_chk:  1
#                 1045______Cp0____enable_shift_chk:  0
#                 1045______Cp0____pkt_sent.enable:   1
#                 1045______Cp3____
#                 1045ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0d5be0000
# 
#                 1055[RECEIVER]  Getting Payload
#                 1055[RECEIVER]  Payload Contents:  Aluout = 000000ef mem_write_en = 1 mem_data_write_out = 0000f0b4
#                 1055[RECEIVER]  Payload Obtained
#                 1055[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1055ns: [CHECKER] Checker Start
# 
# 
#                 1055ns:   [CHECKER] Pkt Contents: src1 = 00003f6e, src2 = 0000f0b4, imm = 00009182, 
#                 1055ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                 1055ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f0b4    mem_GOL = 0000f0b4
# 
#                 1055ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1055ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f5d5   & Golden Model = 0000f5d5
# 
#                 1055ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000f4e6   & Golden Model = 0000f4e6
# 
#                 1055ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1055ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1055ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1055ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1055ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1055ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1055ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1055ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f5d5  0000f4e6 
#                 1055ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1055______Cp0____opselect_chk:      001
#                 1055______Cp0____operation_chk:     010
#                 1055______Cp0____enable_arith_chk:  0
#                 1055______Cp0____enable_shift_chk:  0
#                 1055______Cp0____pkt_sent.enable:   0
#                 1055______Cp23____
#                 1055ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000000ef   & Golden Model = 0000000ef
# 
# Number tests : 1100, Pass: 931, Fail: 169
# Accuracy: 84.00%
#                 1065WE ARE DONE .. GO HOME AND SLEEP!!! .. ACTUALLY NOT YET .. 
# ** Note: implicit $finish from program    : /media/kien/data/kien/20241/design_verify_ic/Lab3_16_11/Lab3/Execute.tb.sv(38)
#    Time: 1065 ns  Iteration: 1  Instance: /Execute_test_top/test
# 1
# Simulation stop requested.
# Compile of ALU.vp was successful.
# Compile of Arith_ALU.vp was successful.
# Compile of data_defs.v was successful.
# Compile of Driver.sv was successful.
# Compile of DriverBase.sv was successful.
# Compile of Ex_Preproc.vp was successful.
# Compile of Execute.if.sv was successful.
# Compile of Execute.tb.sv was successful with warnings.
# Compile of Execute.test_top.sv was successful.
# Compile of Generator.sv was successful.
# Compile of OutputPacket.sv was successful.
# Compile of Packet.sv was successful.
# Compile of Receiver.sv was successful.
# Compile of ReceiverBase.sv was successful.
# Compile of Scoreboard.sv was successful with warnings.
# Compile of Shift_ALU.vp was successful.
# Compile of Top.v was successful.
# 17 compiles, 0 failed with no errors.
restart
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# ** Warning: OutputPacket.sv(24): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at OutputPacket.sv(20) for strict LRM compliance.
# ** Warning: ReceiverBase.sv(28): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at ReceiverBase.sv(23) for strict LRM compliance.
# ** Warning: Receiver.sv(11): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at Receiver.sv(7) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'driver_mbox'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'receiver_mbox'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# Loading sv_std.std
# Loading work.Execute_test_top(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
# Loading work.Top(fast)
# Loading work.Ex_Preproc(fast)
# Loading work.ALU(fast)
# Loading work.Arith_ALU(fast)
# Loading work.Shift_ALU(fast)
# Loading work.Execute_tb_sv_unit(fast)
# Loading work.Execute_test(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
run -all
#                    0ns:  [RESET]  Design Reset Start
#                   45ns:  [RESET]  Design Reset End
# [                  45ns] Start test case for : arith_logic
#                   45ns:  [GENERATOR] Generator Started
#                   45ns:  [DRIVER] Driver Started
#                   45[DRIVER] DRIVER Forking of process is finished
#                   45[SCOREBOARD] Scoreboard Started
#                   45[SCOREBOARD] Receiver Mailbox contents =           0
#                   45[SCOREBOARD] Forking of Process Finished
#                   45[RECEIVER]  RECEIVER STARTED
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
#                   45ns:  [GENERATOR] Generation Finished Creating         100 Packets  
#                   45[DRIVER] Sending in new packet BEGIN
#                   45ns:  [DRIVER] Sending Payload Begin
#                   45ns:  [DRIVER] Sending in new packet END
#                   45ns:  [DRIVER] Number of packets sent =           1
#                   45ns:  [DRIVER] The number of Packets in the Generator Mailbox =          99
#                   55[RECEIVER] Forking of Process Finished
#                   55[DRIVER] Sending in new packet BEGIN
#                   55ns:  [DRIVER] Sending Payload Begin
#                   55ns:  [DRIVER] Sending in new packet END
#                   55ns:  [DRIVER] Number of packets sent =           2
#                   55ns:  [DRIVER] The number of Packets in the Generator Mailbox =          98
#                   65[RECEIVER]  Getting Payload
#                   65[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001eed
#                   65[RECEIVER]  Payload Obtained
#                   65[DRIVER] Sending in new packet BEGIN
#                   65ns:  [DRIVER] Sending Payload Begin
#                   65ns:  [DRIVER] Sending in new packet END
#                   65ns:  [DRIVER] Number of packets sent =           3
#                   65ns:  [DRIVER] The number of Packets in the Generator Mailbox =          97
#                   65[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   65ns: [CHECKER] Checker Start
# 
# 
#                   65ns:   [CHECKER] Pkt Contents: src1 = 000020b0, src2 = 00001eed, imm = 0000429c, 
#                   65ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                   65ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001eed    mem_GOL = 00001eed
# 
#                   65ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   65ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   65ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   65ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   65ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   65ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   65______Cp0____opselect_chk:      000
#                   65______Cp0____operation_chk:     000
#                   65______Cp0____enable_arith_chk:  0
#                   65______Cp0____enable_shift_chk:  0
#                   65______Cp0____pkt_sent.enable:   0
#                   65______Cp23____
#                   65ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   75[RECEIVER]  Getting Payload
#                   75[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d866
#                   75[RECEIVER]  Payload Obtained
#                   75[DRIVER] Sending in new packet BEGIN
#                   75ns:  [DRIVER] Sending Payload Begin
#                   75ns:  [DRIVER] Sending in new packet END
#                   75ns:  [DRIVER] Number of packets sent =           4
#                   75ns:  [DRIVER] The number of Packets in the Generator Mailbox =          96
#                   75[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   75ns: [CHECKER] Checker Start
# 
# 
#                   75ns:   [CHECKER] Pkt Contents: src1 = 0000efe1, src2 = 0000d866, imm = 0000d1e4, 
#                   75ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                   75ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d866    mem_GOL = 0000d866
# 
#                   75ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   75ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   75ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   75ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   75ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   75ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   75______Cp0____opselect_chk:      000
#                   75______Cp0____operation_chk:     000
#                   75______Cp0____enable_arith_chk:  0
#                   75______Cp0____enable_shift_chk:  0
#                   75______Cp0____pkt_sent.enable:   0
#                   75______Cp23____
#                   75ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   85[RECEIVER]  Getting Payload
#                   85[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001dc0
#                   85[RECEIVER]  Payload Obtained
#                   85[DRIVER] Sending in new packet BEGIN
#                   85ns:  [DRIVER] Sending Payload Begin
#                   85ns:  [DRIVER] Sending in new packet END
#                   85ns:  [DRIVER] Number of packets sent =           5
#                   85ns:  [DRIVER] The number of Packets in the Generator Mailbox =          95
#                   85[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   85ns: [CHECKER] Checker Start
# 
# 
#                   85ns:   [CHECKER] Pkt Contents: src1 = 0000b08a, src2 = 00001dc0, imm = 00002342, 
#                   85ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                   85ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001dc0    mem_GOL = 00001dc0
# 
#                   85ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   85ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   85ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001dc0   & Golden Model = 00001dc0
# 
#                   85ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   85ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                   85ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   85ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   85ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                   85ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  00001dc0 
#                   85ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                   85______Cp0____opselect_chk:      001
#                   85______Cp0____operation_chk:     110
#                   85______Cp0____enable_arith_chk:  1
#                   85______Cp0____enable_shift_chk:  0
#                   85______Cp0____pkt_sent.enable:   1
#                   85______Cp7____
#                   85ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   95[RECEIVER]  Getting Payload
#                   95[RECEIVER]  Payload Contents:  Aluout = 0000ad4a mem_write_en = 1 mem_data_write_out = 0000726e
#                   95[RECEIVER]  Payload Obtained
#                   95[DRIVER] Sending in new packet BEGIN
#                   95ns:  [DRIVER] Sending Payload Begin
#                   95ns:  [DRIVER] Sending in new packet END
#                   95ns:  [DRIVER] Number of packets sent =           6
#                   95ns:  [DRIVER] The number of Packets in the Generator Mailbox =          94
#                   95[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   95ns: [CHECKER] Checker Start
# 
# 
#                   95ns:   [CHECKER] Pkt Contents: src1 = 00002ead, src2 = 0000726e, imm = 000087fe, 
#                   95ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                   95ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000726e    mem_GOL = 0000726e
# 
#                   95ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   95ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   95ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001dc0   & Golden Model = 00001dc0
# 
#                   95ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                   95ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                   95ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   95ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   95ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   95ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  00001dc0 
#                   95ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                   95______Cp0____opselect_chk:      001
#                   95______Cp0____operation_chk:     110
#                   95______Cp0____enable_arith_chk:  0
#                   95______Cp0____enable_shift_chk:  0
#                   95______Cp0____pkt_sent.enable:   0
#                   95______Cp23____
#                   95ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ad4a   & Golden Model = 00000ad4a
# 
#                  105[RECEIVER]  Getting Payload
#                  105[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000c3de
#                  105[RECEIVER]  Payload Obtained
#                  105[DRIVER] Sending in new packet BEGIN
#                  105ns:  [DRIVER] Sending Payload Begin
#                  105ns:  [DRIVER] Sending in new packet END
#                  105ns:  [DRIVER] Number of packets sent =           7
#                  105ns:  [DRIVER] The number of Packets in the Generator Mailbox =          93
#                  105[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  105ns: [CHECKER] Checker Start
# 
# 
#                  105ns:   [CHECKER] Pkt Contents: src1 = 00009c52, src2 = 0000c3de, imm = 00000742, 
#                  105ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  105ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000c3de    mem_GOL = 0000c3de
# 
#                  105ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  105ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  105ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000c3de   & Golden Model = 0000c3de
# 
#                  105ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  105ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  105ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  105ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  0000c3de 
#                  105ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  105______Cp0____opselect_chk:      001
#                  105______Cp0____operation_chk:     000
#                  105______Cp0____enable_arith_chk:  1
#                  105______Cp0____enable_shift_chk:  0
#                  105______Cp0____pkt_sent.enable:   1
#                  105______Cp1____
#                  105ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ad4a
# 
#                  115[RECEIVER]  Getting Payload
#                  115[RECEIVER]  Payload Contents:  Aluout = 00016030 mem_write_en = 1 mem_data_write_out = 00005c33
#                  115[RECEIVER]  Payload Obtained
#                  115[DRIVER] Sending in new packet BEGIN
#                  115ns:  [DRIVER] Sending Payload Begin
#                  115ns:  [DRIVER] Sending in new packet END
#                  115ns:  [DRIVER] Number of packets sent =           8
#                  115ns:  [DRIVER] The number of Packets in the Generator Mailbox =          92
#                  115[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  115ns: [CHECKER] Checker Start
# 
# 
#                  115ns:   [CHECKER] Pkt Contents: src1 = 0000c7ba, src2 = 00005c33, imm = 000035f9, 
#                  115ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  115ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005c33    mem_GOL = 00005c33
# 
#                  115ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  115ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  115ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000c3de   & Golden Model = 0000c3de
# 
#                  115ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  115ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  115ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  115ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  115ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  0000c3de 
#                  115ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  115______Cp0____opselect_chk:      001
#                  115______Cp0____operation_chk:     000
#                  115______Cp0____enable_arith_chk:  0
#                  115______Cp0____enable_shift_chk:  0
#                  115______Cp0____pkt_sent.enable:   0
#                  115______Cp23____
#                  115ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00016030   & Golden Model = 000016030
# 
#                  125[RECEIVER]  Getting Payload
#                  125[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d01b
#                  125[RECEIVER]  Payload Obtained
#                  125[DRIVER] Sending in new packet BEGIN
#                  125ns:  [DRIVER] Sending Payload Begin
#                  125ns:  [DRIVER] Sending in new packet END
#                  125ns:  [DRIVER] Number of packets sent =           9
#                  125ns:  [DRIVER] The number of Packets in the Generator Mailbox =          91
#                  125[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  125ns: [CHECKER] Checker Start
# 
# 
#                  125ns:   [CHECKER] Pkt Contents: src1 = 0000f92e, src2 = 0000d01b, imm = 000029f2, 
#                  125ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  125ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d01b    mem_GOL = 0000d01b
# 
#                  125ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  125ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f92e   & Golden Model = 0000f92e
# 
#                  125ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000029f2   & Golden Model = 000029f2
# 
#                  125ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  125ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  125ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  125ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  125ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  125ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f92e  000029f2 
#                  125ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  125______Cp0____opselect_chk:      001
#                  125______Cp0____operation_chk:     100
#                  125______Cp0____enable_arith_chk:  1
#                  125______Cp0____enable_shift_chk:  0
#                  125______Cp0____pkt_sent.enable:   1
#                  125______Cp5____
#                  125ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 000016030
# 
#                  135[RECEIVER]  Getting Payload
#                  135[RECEIVER]  Payload Contents:  Aluout = 00002922 mem_write_en = 1 mem_data_write_out = 0000e9ec
#                  135[RECEIVER]  Payload Obtained
#                  135[DRIVER] Sending in new packet BEGIN
#                  135ns:  [DRIVER] Sending Payload Begin
#                  135ns:  [DRIVER] Sending in new packet END
#                  135ns:  [DRIVER] Number of packets sent =          10
#                  135ns:  [DRIVER] The number of Packets in the Generator Mailbox =          90
#                  135[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  135ns: [CHECKER] Checker Start
# 
# 
#                  135ns:   [CHECKER] Pkt Contents: src1 = 00004170, src2 = 0000e9ec, imm = 000015ae, 
#                  135ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  135ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e9ec    mem_GOL = 0000e9ec
# 
#                  135ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  135ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004170   & Golden Model = 00004170
# 
#                  135ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000015ae   & Golden Model = 000015ae
# 
#                  135ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  135ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  135ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  135ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  135ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  135ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004170  000015ae 
#                  135ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  135______Cp0____opselect_chk:      001
#                  135______Cp0____operation_chk:     011
#                  135______Cp0____enable_arith_chk:  1
#                  135______Cp0____enable_shift_chk:  0
#                  135______Cp0____pkt_sent.enable:   1
#                  135______Cp4____
#                  135ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00002922   & Golden Model = 000002922
# 
#                  145[RECEIVER]  Getting Payload
#                  145[RECEIVER]  Payload Contents:  Aluout = ffffea51 mem_write_en = 1 mem_data_write_out = 0000ec65
#                  145[RECEIVER]  Payload Obtained
#                  145[DRIVER] Sending in new packet BEGIN
#                  145ns:  [DRIVER] Sending Payload Begin
#                  145ns:  [DRIVER] Sending in new packet END
#                  145ns:  [DRIVER] Number of packets sent =          11
#                  145ns:  [DRIVER] The number of Packets in the Generator Mailbox =          89
#                  145[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  145ns: [CHECKER] Checker Start
# 
# 
#                  145ns:   [CHECKER] Pkt Contents: src1 = 0000c030, src2 = 0000ec65, imm = 00007567, 
#                  145ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  145ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ec65    mem_GOL = 0000ec65
# 
#                  145ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  145ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c030   & Golden Model = 0000c030
# 
#                  145ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007567   & Golden Model = 00007567
# 
#                  145ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  145ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  145ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  145ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  145ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  145ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c030  00007567 
#                  145ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  145______Cp0____opselect_chk:      001
#                  145______Cp0____operation_chk:     100
#                  145______Cp0____enable_arith_chk:  1
#                  145______Cp0____enable_shift_chk:  0
#                  145______Cp0____pkt_sent.enable:   1
#                  145______Cp5____
#                  145ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffea51   & Golden Model = 1ffffea51
# 
#                  155[RECEIVER]  Getting Payload
#                  155[RECEIVER]  Payload Contents:  Aluout = 00004020 mem_write_en = 1 mem_data_write_out = 0000e400
#                  155[RECEIVER]  Payload Obtained
#                  155[DRIVER] Sending in new packet BEGIN
#                  155ns:  [DRIVER] Sending Payload Begin
#                  155ns:  [DRIVER] Sending in new packet END
#                  155ns:  [DRIVER] Number of packets sent =          12
#                  155ns:  [DRIVER] The number of Packets in the Generator Mailbox =          88
#                  155[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  155ns: [CHECKER] Checker Start
# 
# 
#                  155ns:   [CHECKER] Pkt Contents: src1 = 00000ef0, src2 = 0000e400, imm = 0000ba65, 
#                  155ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  155ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e400    mem_GOL = 0000e400
# 
#                  155ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  155ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000ef0   & Golden Model = 00000ef0
# 
#                  155ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ba65   & Golden Model = 0000ba65
# 
#                  155ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  155ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  155ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  155ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  155ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  155ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000ef0  0000ba65 
#                  155ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  155______Cp0____opselect_chk:      001
#                  155______Cp0____operation_chk:     111
#                  155______Cp0____enable_arith_chk:  1
#                  155______Cp0____enable_shift_chk:  0
#                  155______Cp0____pkt_sent.enable:   1
#                  155______Cp7____
#                  155ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00004020   & Golden Model = 000004020
# 
#                  165[RECEIVER]  Getting Payload
#                  165[RECEIVER]  Payload Contents:  Aluout = ba650000 mem_write_en = 1 mem_data_write_out = 00002f1f
#                  165[RECEIVER]  Payload Obtained
#                  165[DRIVER] Sending in new packet BEGIN
#                  165ns:  [DRIVER] Sending Payload Begin
#                  165ns:  [DRIVER] Sending in new packet END
#                  165ns:  [DRIVER] Number of packets sent =          13
#                  165ns:  [DRIVER] The number of Packets in the Generator Mailbox =          87
#                  165[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  165ns: [CHECKER] Checker Start
# 
# 
#                  165ns:   [CHECKER] Pkt Contents: src1 = 0000f1a2, src2 = 00002f1f, imm = 0000cbca, 
#                  165ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  165ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002f1f    mem_GOL = 00002f1f
# 
#                  165ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  165ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f1a2   & Golden Model = 0000f1a2
# 
#                  165ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000cbca   & Golden Model = 0000cbca
# 
#                  165ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  165ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  165ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  165ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  165ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  165ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  165ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  165ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f1a2  0000cbca 
#                  165ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  165______Cp0____opselect_chk:      001
#                  165______Cp0____operation_chk:     101
#                  165______Cp0____enable_arith_chk:  1
#                  165______Cp0____enable_shift_chk:  0
#                  165______Cp0____pkt_sent.enable:   1
#                  165______Cp6____
#                  165ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ba650000   & Golden Model = 0ba650000
# 
#                  175[RECEIVER]  Getting Payload
#                  175[RECEIVER]  Payload Contents:  Aluout = 0000fbea mem_write_en = 1 mem_data_write_out = 0000189a
#                  175[RECEIVER]  Payload Obtained
#                  175[DRIVER] Sending in new packet BEGIN
#                  175ns:  [DRIVER] Sending Payload Begin
#                  175ns:  [DRIVER] Sending in new packet END
#                  175ns:  [DRIVER] Number of packets sent =          14
#                  175ns:  [DRIVER] The number of Packets in the Generator Mailbox =          86
#                  175[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  175ns: [CHECKER] Checker Start
# 
# 
#                  175ns:   [CHECKER] Pkt Contents: src1 = 0000362e, src2 = 0000189a, imm = 0000888c, 
#                  175ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  175ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000189a    mem_GOL = 0000189a
# 
#                  175ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  175ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f1a2   & Golden Model = 0000f1a2
# 
#                  175ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000cbca   & Golden Model = 0000cbca
# 
#                  175ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  175ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  175ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  175ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  175ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  175ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  175ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  175ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f1a2  0000cbca 
#                  175ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  175______Cp0____opselect_chk:      001
#                  175______Cp0____operation_chk:     101
#                  175______Cp0____enable_arith_chk:  0
#                  175______Cp0____enable_shift_chk:  0
#                  175______Cp0____pkt_sent.enable:   0
#                  175______Cp23____
#                  175ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000fbea   & Golden Model = 00000fbea
# 
#                  185[RECEIVER]  Getting Payload
#                  185[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00003d82
#                  185[RECEIVER]  Payload Obtained
#                  185[DRIVER] Sending in new packet BEGIN
#                  185ns:  [DRIVER] Sending Payload Begin
#                  185ns:  [DRIVER] Sending in new packet END
#                  185ns:  [DRIVER] Number of packets sent =          15
#                  185ns:  [DRIVER] The number of Packets in the Generator Mailbox =          85
#                  185[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  185ns: [CHECKER] Checker Start
# 
# 
#                  185ns:   [CHECKER] Pkt Contents: src1 = 000085d3, src2 = 00003d82, imm = 00002a36, 
#                  185ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  185ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00003d82    mem_GOL = 00003d82
# 
#                  185ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  185ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000085d3   & Golden Model = 000085d3
# 
#                  185ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003d82   & Golden Model = 00003d82
# 
#                  185ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  185ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  185ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  185ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  185ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  185ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  185ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  185ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000085d3  00003d82 
#                  185ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  185______Cp0____opselect_chk:      001
#                  185______Cp0____operation_chk:     000
#                  185______Cp0____enable_arith_chk:  1
#                  185______Cp0____enable_shift_chk:  0
#                  185______Cp0____pkt_sent.enable:   1
#                  185______Cp1____
#                  185ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000fbea
# 
#                  195[RECEIVER]  Getting Payload
#                  195[RECEIVER]  Payload Contents:  Aluout = 0000c355 mem_write_en = 1 mem_data_write_out = 00000b75
#                  195[RECEIVER]  Payload Obtained
#                  195[DRIVER] Sending in new packet BEGIN
#                  195ns:  [DRIVER] Sending Payload Begin
#                  195ns:  [DRIVER] Sending in new packet END
#                  195ns:  [DRIVER] Number of packets sent =          16
#                  195ns:  [DRIVER] The number of Packets in the Generator Mailbox =          84
#                  195[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  195ns: [CHECKER] Checker Start
# 
# 
#                  195ns:   [CHECKER] Pkt Contents: src1 = 0000dd0c, src2 = 00000b75, imm = 00000f42, 
#                  195ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  195ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000b75    mem_GOL = 00000b75
# 
#                  195ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  195ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  195ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  195ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  195ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  195ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  195ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  195ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  195ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  195ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  195ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  195ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  195______Cp0____opselect_chk:      001
#                  195______Cp0____operation_chk:     011
#                  195______Cp0____enable_arith_chk:  1
#                  195______Cp0____enable_shift_chk:  0
#                  195______Cp0____pkt_sent.enable:   1
#                  195______Cp4____
#                  195ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c355   & Golden Model = 00000c355
# 
#                  205[RECEIVER]  Getting Payload
#                  205[RECEIVER]  Payload Contents:  Aluout = fffff48a mem_write_en = 1 mem_data_write_out = 0000be75
#                  205[RECEIVER]  Payload Obtained
#                  205[DRIVER] Sending in new packet BEGIN
#                  205ns:  [DRIVER] Sending Payload Begin
#                  205ns:  [DRIVER] Sending in new packet END
#                  205ns:  [DRIVER] Number of packets sent =          17
#                  205ns:  [DRIVER] The number of Packets in the Generator Mailbox =          83
#                  205[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  205ns: [CHECKER] Checker Start
# 
# 
#                  205ns:   [CHECKER] Pkt Contents: src1 = 0000914a, src2 = 0000be75, imm = 00007a4d, 
#                  205ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  205ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000be75    mem_GOL = 0000be75
# 
#                  205ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  205ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  205ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  205ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  205ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  205ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  205ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  205ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  205ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  205ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  205ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  205ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  205______Cp0____opselect_chk:      001
#                  205______Cp0____operation_chk:     011
#                  205______Cp0____enable_arith_chk:  0
#                  205______Cp0____enable_shift_chk:  0
#                  205______Cp0____pkt_sent.enable:   0
#                  205______Cp23____
#                  205ns:   [ASSERT_aluout] PASS ALUOUT: DUT = fffff48a   & Golden Model = 1fffff48a
# 
#                  215[RECEIVER]  Getting Payload
#                  215[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e291
#                  215[RECEIVER]  Payload Obtained
#                  215[DRIVER] Sending in new packet BEGIN
#                  215ns:  [DRIVER] Sending Payload Begin
#                  215ns:  [DRIVER] Sending in new packet END
#                  215ns:  [DRIVER] Number of packets sent =          18
#                  215ns:  [DRIVER] The number of Packets in the Generator Mailbox =          82
#                  215[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  215ns: [CHECKER] Checker Start
# 
# 
#                  215ns:   [CHECKER] Pkt Contents: src1 = 00001c75, src2 = 0000e291, imm = 0000e28c, 
#                  215ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  215ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e291    mem_GOL = 0000e291
# 
#                  215ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  215ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  215ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  215ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  215ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  215ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  215ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  215ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  215ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  215ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  215ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  215ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  215______Cp0____opselect_chk:      001
#                  215______Cp0____operation_chk:     011
#                  215______Cp0____enable_arith_chk:  0
#                  215______Cp0____enable_shift_chk:  0
#                  215______Cp0____pkt_sent.enable:   0
#                  215______Cp23____
#                  215ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  225[RECEIVER]  Getting Payload
#                  225[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00006408
#                  225[RECEIVER]  Payload Obtained
#                  225[DRIVER] Sending in new packet BEGIN
#                  225ns:  [DRIVER] Sending Payload Begin
#                  225ns:  [DRIVER] Sending in new packet END
#                  225ns:  [DRIVER] Number of packets sent =          19
#                  225ns:  [DRIVER] The number of Packets in the Generator Mailbox =          81
#                  225[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  225ns: [CHECKER] Checker Start
# 
# 
#                  225ns:   [CHECKER] Pkt Contents: src1 = 0000b7fd, src2 = 00006408, imm = 00006715, 
#                  225ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  225ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006408    mem_GOL = 00006408
# 
#                  225ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  225ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000dd0c   & Golden Model = 0000dd0c
# 
#                  225ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000b75   & Golden Model = 00000b75
# 
#                  225ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  225ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  225ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  225ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  225ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  225ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  225ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  225ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000dd0c  00000b75 
#                  225ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  225______Cp0____opselect_chk:      001
#                  225______Cp0____operation_chk:     011
#                  225______Cp0____enable_arith_chk:  0
#                  225______Cp0____enable_shift_chk:  0
#                  225______Cp0____pkt_sent.enable:   0
#                  225______Cp23____
#                  225ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  235[RECEIVER]  Getting Payload
#                  235[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000969f
#                  235[RECEIVER]  Payload Obtained
#                  235[DRIVER] Sending in new packet BEGIN
#                  235ns:  [DRIVER] Sending Payload Begin
#                  235ns:  [DRIVER] Sending in new packet END
#                  235ns:  [DRIVER] Number of packets sent =          20
#                  235ns:  [DRIVER] The number of Packets in the Generator Mailbox =          80
#                  235[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  235ns: [CHECKER] Checker Start
# 
# 
#                  235ns:   [CHECKER] Pkt Contents: src1 = 00009c58, src2 = 0000969f, imm = 00008e0c, 
#                  235ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  235ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000969f    mem_GOL = 0000969f
# 
#                  235ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  235ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c58   & Golden Model = 00009c58
# 
#                  235ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008e0c   & Golden Model = 00008e0c
# 
#                  235ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  235ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  235ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  235ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  235ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  235ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  235ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  235ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c58  00008e0c 
#                  235ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  235______Cp0____opselect_chk:      001
#                  235______Cp0____operation_chk:     011
#                  235______Cp0____enable_arith_chk:  1
#                  235______Cp0____enable_shift_chk:  0
#                  235______Cp0____pkt_sent.enable:   1
#                  235______Cp4____
#                  235ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1fffff48a
# 
#                  245[RECEIVER]  Getting Payload
#                  245[RECEIVER]  Payload Contents:  Aluout = ffff71f3 mem_write_en = 1 mem_data_write_out = 0000498a
#                  245[RECEIVER]  Payload Obtained
#                  245[DRIVER] Sending in new packet BEGIN
#                  245ns:  [DRIVER] Sending Payload Begin
#                  245ns:  [DRIVER] Sending in new packet END
#                  245ns:  [DRIVER] Number of packets sent =          21
#                  245ns:  [DRIVER] The number of Packets in the Generator Mailbox =          79
#                  245[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  245ns: [CHECKER] Checker Start
# 
# 
#                  245ns:   [CHECKER] Pkt Contents: src1 = 0000658f, src2 = 0000498a, imm = 0000390b, 
#                  245ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  245ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000498a    mem_GOL = 0000498a
# 
#                  245ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  245ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000658f   & Golden Model = 0000658f
# 
#                  245ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000390b   & Golden Model = 0000390b
# 
#                  245ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  245ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  245ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  245ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  245ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  245ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  245ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  245ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000658f  0000390b 
#                  245ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  245______Cp0____opselect_chk:      001
#                  245______Cp0____operation_chk:     101
#                  245______Cp0____enable_arith_chk:  1
#                  245______Cp0____enable_shift_chk:  0
#                  245______Cp0____pkt_sent.enable:   1
#                  245______Cp6____
#                  245ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff71f3   & Golden Model = 1ffff71f3
# 
#                  255[RECEIVER]  Getting Payload
#                  255[RECEIVER]  Payload Contents:  Aluout = 00007d8f mem_write_en = 1 mem_data_write_out = 0000daf8
#                  255[RECEIVER]  Payload Obtained
#                  255[DRIVER] Sending in new packet BEGIN
#                  255ns:  [DRIVER] Sending Payload Begin
#                  255ns:  [DRIVER] Sending in new packet END
#                  255ns:  [DRIVER] Number of packets sent =          22
#                  255ns:  [DRIVER] The number of Packets in the Generator Mailbox =          78
#                  255[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  255ns: [CHECKER] Checker Start
# 
# 
#                  255ns:   [CHECKER] Pkt Contents: src1 = 000000e2, src2 = 0000daf8, imm = 00005c36, 
#                  255ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  255ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000daf8    mem_GOL = 0000daf8
# 
#                  255ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  255ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000000e2   & Golden Model = 000000e2
# 
#                  255ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005c36   & Golden Model = 00005c36
# 
#                  255ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  255ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  255ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  255ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  255ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  255ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  255ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  255ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000000e2  00005c36 
#                  255ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  255______Cp0____opselect_chk:      001
#                  255______Cp0____operation_chk:     010
#                  255______Cp0____enable_arith_chk:  1
#                  255______Cp0____enable_shift_chk:  0
#                  255______Cp0____pkt_sent.enable:   1
#                  255______Cp3____
#                  255ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00007d8f   & Golden Model = 000007d8f
# 
#                  265[RECEIVER]  Getting Payload
#                  265[RECEIVER]  Payload Contents:  Aluout = ffffa4ac mem_write_en = 1 mem_data_write_out = 0000ae45
#                  265[RECEIVER]  Payload Obtained
#                  265[DRIVER] Sending in new packet BEGIN
#                  265ns:  [DRIVER] Sending Payload Begin
#                  265ns:  [DRIVER] Sending in new packet END
#                  265ns:  [DRIVER] Number of packets sent =          23
#                  265ns:  [DRIVER] The number of Packets in the Generator Mailbox =          77
#                  265[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  265ns: [CHECKER] Checker Start
# 
# 
#                  265ns:   [CHECKER] Pkt Contents: src1 = 00009d08, src2 = 0000ae45, imm = 00007769, 
#                  265ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  265ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ae45    mem_GOL = 0000ae45
# 
#                  265ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  265ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009d08   & Golden Model = 00009d08
# 
#                  265ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007769   & Golden Model = 00007769
# 
#                  265ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  265ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  265ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  265ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  265ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  265ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  265ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  265ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009d08  00007769 
#                  265ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  265______Cp0____opselect_chk:      001
#                  265______Cp0____operation_chk:     100
#                  265______Cp0____enable_arith_chk:  1
#                  265______Cp0____enable_shift_chk:  0
#                  265______Cp0____pkt_sent.enable:   1
#                  265______Cp5____
#                  265ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffa4ac   & Golden Model = 1ffffa4ac
# 
#                  275[RECEIVER]  Getting Payload
#                  275[RECEIVER]  Payload Contents:  Aluout = 00001508 mem_write_en = 1 mem_data_write_out = 00009c7d
#                  275[RECEIVER]  Payload Obtained
#                  275[DRIVER] Sending in new packet BEGIN
#                  275ns:  [DRIVER] Sending Payload Begin
#                  275ns:  [DRIVER] Sending in new packet END
#                  275ns:  [DRIVER] Number of packets sent =          24
#                  275ns:  [DRIVER] The number of Packets in the Generator Mailbox =          76
#                  275[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  275ns: [CHECKER] Checker Start
# 
# 
#                  275ns:   [CHECKER] Pkt Contents: src1 = 00007b70, src2 = 00009c7d, imm = 000018f5, 
#                  275ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  275ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009c7d    mem_GOL = 00009c7d
# 
#                  275ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  275ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00007b70   & Golden Model = 00007b70
# 
#                  275ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000018f5   & Golden Model = 000018f5
# 
#                  275ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  275ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  275ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  275ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  275ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  275ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00007b70  000018f5 
#                  275ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  275______Cp0____opselect_chk:      001
#                  275______Cp0____operation_chk:     001
#                  275______Cp0____enable_arith_chk:  1
#                  275______Cp0____enable_shift_chk:  0
#                  275______Cp0____pkt_sent.enable:   1
#                  275
#                  275______Cp2____
#                  275ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00001508   & Golden Model = 000001508
# 
#                  285[RECEIVER]  Getting Payload
#                  285[RECEIVER]  Payload Contents:  Aluout = ffff9465 mem_write_en = 1 mem_data_write_out = 00004308
#                  285[RECEIVER]  Payload Obtained
#                  285[DRIVER] Sending in new packet BEGIN
#                  285ns:  [DRIVER] Sending Payload Begin
#                  285ns:  [DRIVER] Sending in new packet END
#                  285ns:  [DRIVER] Number of packets sent =          25
#                  285ns:  [DRIVER] The number of Packets in the Generator Mailbox =          75
#                  285[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  285ns: [CHECKER] Checker Start
# 
# 
#                  285ns:   [CHECKER] Pkt Contents: src1 = 0000c243, src2 = 00004308, imm = 0000fa80, 
#                  285ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  285ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004308    mem_GOL = 00004308
# 
#                  285ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  285ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c243   & Golden Model = 0000c243
# 
#                  285ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004308   & Golden Model = 00004308
# 
#                  285ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  285ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  285ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  285ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  285ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  285ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  285ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  285ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c243  00004308 
#                  285ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  285______Cp0____opselect_chk:      001
#                  285______Cp0____operation_chk:     000
#                  285______Cp0____enable_arith_chk:  1
#                  285______Cp0____enable_shift_chk:  0
#                  285______Cp0____pkt_sent.enable:   1
#                  285______Cp1____
#                  285ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffff9465   & Golden Model = 000009465
# 
#                  295[RECEIVER]  Getting Payload
#                  295[RECEIVER]  Payload Contents:  Aluout = 0001054b mem_write_en = 1 mem_data_write_out = 000013c8
#                  295[RECEIVER]  Payload Obtained
#                  295[DRIVER] Sending in new packet BEGIN
#                  295ns:  [DRIVER] Sending Payload Begin
#                  295ns:  [DRIVER] Sending in new packet END
#                  295ns:  [DRIVER] Number of packets sent =          26
#                  295ns:  [DRIVER] The number of Packets in the Generator Mailbox =          74
#                  295[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  295ns: [CHECKER] Checker Start
# 
# 
#                  295ns:   [CHECKER] Pkt Contents: src1 = 00005af8, src2 = 000013c8, imm = 00002878, 
#                  295ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  295ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000013c8    mem_GOL = 000013c8
# 
#                  295ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  295ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00005af8   & Golden Model = 00005af8
# 
#                  295ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002878   & Golden Model = 00002878
# 
#                  295ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  295ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  295ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  295ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  295ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  295ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  295ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  295ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00005af8  00002878 
#                  295ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  295______Cp0____opselect_chk:      001
#                  295______Cp0____operation_chk:     111
#                  295______Cp0____enable_arith_chk:  1
#                  295______Cp0____enable_shift_chk:  0
#                  295______Cp0____pkt_sent.enable:   1
#                  295______Cp7____
#                  295ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0001054b   & Golden Model = 00001054b
# 
#                  305[RECEIVER]  Getting Payload
#                  305[RECEIVER]  Payload Contents:  Aluout = 28780000 mem_write_en = 1 mem_data_write_out = 000011dd
#                  305[RECEIVER]  Payload Obtained
#                  305[DRIVER] Sending in new packet BEGIN
#                  305ns:  [DRIVER] Sending Payload Begin
#                  305ns:  [DRIVER] Sending in new packet END
#                  305ns:  [DRIVER] Number of packets sent =          27
#                  305ns:  [DRIVER] The number of Packets in the Generator Mailbox =          73
#                  305[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  305ns: [CHECKER] Checker Start
# 
# 
#                  305ns:   [CHECKER] Pkt Contents: src1 = 00004700, src2 = 000011dd, imm = 00005bbc, 
#                  305ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  305ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000011dd    mem_GOL = 000011dd
# 
#                  305ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  305ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00005af8   & Golden Model = 00005af8
# 
#                  305ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002878   & Golden Model = 00002878
# 
#                  305ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  305ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  305ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  305ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  305ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  305ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  305ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  305ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00005af8  00002878 
#                  305ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  305______Cp0____opselect_chk:      001
#                  305______Cp0____operation_chk:     111
#                  305______Cp0____enable_arith_chk:  0
#                  305______Cp0____enable_shift_chk:  0
#                  305______Cp0____pkt_sent.enable:   0
#                  305______Cp23____
#                  305ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 28780000   & Golden Model = 028780000
# 
#                  315[RECEIVER]  Getting Payload
#                  315[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000af9a
#                  315[RECEIVER]  Payload Obtained
#                  315[DRIVER] Sending in new packet BEGIN
#                  315ns:  [DRIVER] Sending Payload Begin
#                  315ns:  [DRIVER] Sending in new packet END
#                  315ns:  [DRIVER] Number of packets sent =          28
#                  315ns:  [DRIVER] The number of Packets in the Generator Mailbox =          72
#                  315[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  315ns: [CHECKER] Checker Start
# 
# 
#                  315ns:   [CHECKER] Pkt Contents: src1 = 0000a498, src2 = 0000af9a, imm = 0000c7a9, 
#                  315ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  315ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000af9a    mem_GOL = 0000af9a
# 
#                  315ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  315ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a498   & Golden Model = 0000a498
# 
#                  315ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000af9a   & Golden Model = 0000af9a
# 
#                  315ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  315ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  315ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  315ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  315ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  315ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  315ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  315ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a498  0000af9a 
#                  315ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  315______Cp0____opselect_chk:      001
#                  315______Cp0____operation_chk:     101
#                  315______Cp0____enable_arith_chk:  1
#                  315______Cp0____enable_shift_chk:  0
#                  315______Cp0____pkt_sent.enable:   1
#                  315______Cp6____
#                  315ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 028780000
# 
#                  325[RECEIVER]  Getting Payload
#                  325[RECEIVER]  Payload Contents:  Aluout = 0000af9a mem_write_en = 1 mem_data_write_out = 000098ba
#                  325[RECEIVER]  Payload Obtained
#                  325[DRIVER] Sending in new packet BEGIN
#                  325ns:  [DRIVER] Sending Payload Begin
#                  325ns:  [DRIVER] Sending in new packet END
#                  325ns:  [DRIVER] Number of packets sent =          29
#                  325ns:  [DRIVER] The number of Packets in the Generator Mailbox =          71
#                  325[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  325ns: [CHECKER] Checker Start
# 
# 
#                  325ns:   [CHECKER] Pkt Contents: src1 = 0000017e, src2 = 000098ba, imm = 00008b9e, 
#                  325ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  325ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000098ba    mem_GOL = 000098ba
# 
#                  325ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  325ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  325ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  325ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  325ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  325ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  325ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  325ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  325ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  325ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  325ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  325ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  325______Cp0____opselect_chk:      001
#                  325______Cp0____operation_chk:     010
#                  325______Cp0____enable_arith_chk:  1
#                  325______Cp0____enable_shift_chk:  0
#                  325______Cp0____pkt_sent.enable:   1
#                  325______Cp3____
#                  325ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000af9a   & Golden Model = 00000af9a
# 
#                  335[RECEIVER]  Getting Payload
#                  335[RECEIVER]  Payload Contents:  Aluout = ffff75e0 mem_write_en = 1 mem_data_write_out = 00004326
#                  335[RECEIVER]  Payload Obtained
#                  335[DRIVER] Sending in new packet BEGIN
#                  335ns:  [DRIVER] Sending Payload Begin
#                  335ns:  [DRIVER] Sending in new packet END
#                  335ns:  [DRIVER] Number of packets sent =          30
#                  335ns:  [DRIVER] The number of Packets in the Generator Mailbox =          70
#                  335[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  335ns: [CHECKER] Checker Start
# 
# 
#                  335ns:   [CHECKER] Pkt Contents: src1 = 0000275b, src2 = 00004326, imm = 0000e5c6, 
#                  335ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  335ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004326    mem_GOL = 00004326
# 
#                  335ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  335ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  335ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  335ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  335ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  335ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  335ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  335ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  335ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  335ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  335ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  335ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  335______Cp0____opselect_chk:      001
#                  335______Cp0____operation_chk:     010
#                  335______Cp0____enable_arith_chk:  0
#                  335______Cp0____enable_shift_chk:  0
#                  335______Cp0____pkt_sent.enable:   0
#                  335______Cp23____
#                  335ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff75e0   & Golden Model = 1ffff75e0
# 
#                  345[RECEIVER]  Getting Payload
#                  345[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005e1a
#                  345[RECEIVER]  Payload Obtained
#                  345[DRIVER] Sending in new packet BEGIN
#                  345ns:  [DRIVER] Sending Payload Begin
#                  345ns:  [DRIVER] Sending in new packet END
#                  345ns:  [DRIVER] Number of packets sent =          31
#                  345ns:  [DRIVER] The number of Packets in the Generator Mailbox =          69
#                  345[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  345ns: [CHECKER] Checker Start
# 
# 
#                  345ns:   [CHECKER] Pkt Contents: src1 = 000052ac, src2 = 00005e1a, imm = 000041bf, 
#                  345ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  345ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005e1a    mem_GOL = 00005e1a
# 
#                  345ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  345ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000017e   & Golden Model = 0000017e
# 
#                  345ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008b9e   & Golden Model = 00008b9e
# 
#                  345ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  345ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  345ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  345ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  345ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  345ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  345ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  345ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000017e  00008b9e 
#                  345ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  345______Cp0____opselect_chk:      001
#                  345______Cp0____operation_chk:     010
#                  345______Cp0____enable_arith_chk:  0
#                  345______Cp0____enable_shift_chk:  0
#                  345______Cp0____pkt_sent.enable:   0
#                  345______Cp23____
#                  345ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff75e0
# 
#                  355[RECEIVER]  Getting Payload
#                  355[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000a093
#                  355[RECEIVER]  Payload Obtained
#                  355[DRIVER] Sending in new packet BEGIN
#                  355ns:  [DRIVER] Sending Payload Begin
#                  355ns:  [DRIVER] Sending in new packet END
#                  355ns:  [DRIVER] Number of packets sent =          32
#                  355ns:  [DRIVER] The number of Packets in the Generator Mailbox =          68
#                  355[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  355ns: [CHECKER] Checker Start
# 
# 
#                  355ns:   [CHECKER] Pkt Contents: src1 = 000019d7, src2 = 0000a093, imm = 0000d3b4, 
#                  355ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  355ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000a093    mem_GOL = 0000a093
# 
#                  355ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  355ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000019d7   & Golden Model = 000019d7
# 
#                  355ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a093   & Golden Model = 0000a093
# 
#                  355ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  355ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  355ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  355ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  355ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  355ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000019d7  0000a093 
#                  355ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  355______Cp0____opselect_chk:      001
#                  355______Cp0____operation_chk:     001
#                  355______Cp0____enable_arith_chk:  1
#                  355______Cp0____enable_shift_chk:  0
#                  355______Cp0____pkt_sent.enable:   1
#                  355
#                  355______Cp2____
#                  355ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff75e0
# 
#                  365[RECEIVER]  Getting Payload
#                  365[RECEIVER]  Payload Contents:  Aluout = ffffba6a mem_write_en = 1 mem_data_write_out = 0000b226
#                  365[RECEIVER]  Payload Obtained
#                  365[DRIVER] Sending in new packet BEGIN
#                  365ns:  [DRIVER] Sending Payload Begin
#                  365ns:  [DRIVER] Sending in new packet END
#                  365ns:  [DRIVER] Number of packets sent =          33
#                  365ns:  [DRIVER] The number of Packets in the Generator Mailbox =          67
#                  365[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  365ns: [CHECKER] Checker Start
# 
# 
#                  365ns:   [CHECKER] Pkt Contents: src1 = 000035b0, src2 = 0000b226, imm = 0000b9a7, 
#                  365ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  365ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b226    mem_GOL = 0000b226
# 
#                  365ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  365ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000019d7   & Golden Model = 000019d7
# 
#                  365ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a093   & Golden Model = 0000a093
# 
#                  365ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  365ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  365ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  365ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  365ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  365ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  365ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  365ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000019d7  0000a093 
#                  365ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  365______Cp0____opselect_chk:      001
#                  365______Cp0____operation_chk:     001
#                  365______Cp0____enable_arith_chk:  0
#                  365______Cp0____enable_shift_chk:  0
#                  365______Cp0____pkt_sent.enable:   0
#                  365______Cp23____
#                  365ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffba6a   & Golden Model = 00000ba6a
# 
#                  375[RECEIVER]  Getting Payload
#                  375[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002d4b
#                  375[RECEIVER]  Payload Obtained
#                  375[DRIVER] Sending in new packet BEGIN
#                  375ns:  [DRIVER] Sending Payload Begin
#                  375ns:  [DRIVER] Sending in new packet END
#                  375ns:  [DRIVER] Number of packets sent =          34
#                  375ns:  [DRIVER] The number of Packets in the Generator Mailbox =          66
#                  375[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  375ns: [CHECKER] Checker Start
# 
# 
#                  375ns:   [CHECKER] Pkt Contents: src1 = 00008b8b, src2 = 00002d4b, imm = 000084b2, 
#                  375ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  375ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002d4b    mem_GOL = 00002d4b
# 
#                  375ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  375ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00008b8b   & Golden Model = 00008b8b
# 
#                  375ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002d4b   & Golden Model = 00002d4b
# 
#                  375ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  375ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  375ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  375ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  375ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  375ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  375ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  375ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00008b8b  00002d4b 
#                  375ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  375______Cp0____opselect_chk:      001
#                  375______Cp0____operation_chk:     100
#                  375______Cp0____enable_arith_chk:  1
#                  375______Cp0____enable_shift_chk:  0
#                  375______Cp0____pkt_sent.enable:   1
#                  375______Cp5____
#                  375ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ba6a
# 
#                  385[RECEIVER]  Getting Payload
#                  385[RECEIVER]  Payload Contents:  Aluout = 0000090b mem_write_en = 1 mem_data_write_out = 0000bfe4
#                  385[RECEIVER]  Payload Obtained
#                  385[DRIVER] Sending in new packet BEGIN
#                  385ns:  [DRIVER] Sending Payload Begin
#                  385ns:  [DRIVER] Sending in new packet END
#                  385ns:  [DRIVER] Number of packets sent =          35
#                  385ns:  [DRIVER] The number of Packets in the Generator Mailbox =          65
#                  385[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  385ns: [CHECKER] Checker Start
# 
# 
#                  385ns:   [CHECKER] Pkt Contents: src1 = 00007e81, src2 = 0000bfe4, imm = 0000092d, 
#                  385ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  385ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bfe4    mem_GOL = 0000bfe4
# 
#                  385ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  385ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00008b8b   & Golden Model = 00008b8b
# 
#                  385ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002d4b   & Golden Model = 00002d4b
# 
#                  385ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  385ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  385ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  385ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  385ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  385ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  385ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  385ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00008b8b  00002d4b 
#                  385ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  385______Cp0____opselect_chk:      001
#                  385______Cp0____operation_chk:     100
#                  385______Cp0____enable_arith_chk:  0
#                  385______Cp0____enable_shift_chk:  0
#                  385______Cp0____pkt_sent.enable:   0
#                  385______Cp23____
#                  385ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000090b   & Golden Model = 00000090b
# 
#                  395[RECEIVER]  Getting Payload
#                  395[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000c034
#                  395[RECEIVER]  Payload Obtained
#                  395[DRIVER] Sending in new packet BEGIN
#                  395ns:  [DRIVER] Sending Payload Begin
#                  395ns:  [DRIVER] Sending in new packet END
#                  395ns:  [DRIVER] Number of packets sent =          36
#                  395ns:  [DRIVER] The number of Packets in the Generator Mailbox =          64
#                  395[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  395ns: [CHECKER] Checker Start
# 
# 
#                  395ns:   [CHECKER] Pkt Contents: src1 = 0000f8e1, src2 = 0000c034, imm = 0000418c, 
#                  395ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  395ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000c034    mem_GOL = 0000c034
# 
#                  395ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  395ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8e1   & Golden Model = 0000f8e1
# 
#                  395ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000418c   & Golden Model = 0000418c
# 
#                  395ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  395ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  395ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  395ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  395ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  395ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  395ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  395ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8e1  0000418c 
#                  395ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  395______Cp0____opselect_chk:      001
#                  395______Cp0____operation_chk:     111
#                  395______Cp0____enable_arith_chk:  1
#                  395______Cp0____enable_shift_chk:  0
#                  395______Cp0____pkt_sent.enable:   1
#                  395______Cp7____
#                  395ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000090b
# 
#                  405[RECEIVER]  Getting Payload
#                  405[RECEIVER]  Payload Contents:  Aluout = 418c0000 mem_write_en = 1 mem_data_write_out = 00000e42
#                  405[RECEIVER]  Payload Obtained
#                  405[DRIVER] Sending in new packet BEGIN
#                  405ns:  [DRIVER] Sending Payload Begin
#                  405ns:  [DRIVER] Sending in new packet END
#                  405ns:  [DRIVER] Number of packets sent =          37
#                  405ns:  [DRIVER] The number of Packets in the Generator Mailbox =          63
#                  405[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  405ns: [CHECKER] Checker Start
# 
# 
#                  405ns:   [CHECKER] Pkt Contents: src1 = 00002e04, src2 = 00000e42, imm = 0000dc6d, 
#                  405ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  405ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000e42    mem_GOL = 00000e42
# 
#                  405ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  405ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8e1   & Golden Model = 0000f8e1
# 
#                  405ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000418c   & Golden Model = 0000418c
# 
#                  405ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  405ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  405ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  405ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  405ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  405ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  405ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  405ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8e1  0000418c 
#                  405ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  405______Cp0____opselect_chk:      001
#                  405______Cp0____operation_chk:     111
#                  405______Cp0____enable_arith_chk:  0
#                  405______Cp0____enable_shift_chk:  0
#                  405______Cp0____pkt_sent.enable:   0
#                  405______Cp23____
#                  405ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 418c0000   & Golden Model = 0418c0000
# 
#                  415[RECEIVER]  Getting Payload
#                  415[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00004b68
#                  415[RECEIVER]  Payload Obtained
#                  415[DRIVER] Sending in new packet BEGIN
#                  415ns:  [DRIVER] Sending Payload Begin
#                  415ns:  [DRIVER] Sending in new packet END
#                  415ns:  [DRIVER] Number of packets sent =          38
#                  415ns:  [DRIVER] The number of Packets in the Generator Mailbox =          62
#                  415[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  415ns: [CHECKER] Checker Start
# 
# 
#                  415ns:   [CHECKER] Pkt Contents: src1 = 00004de1, src2 = 00004b68, imm = 00003508, 
#                  415ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  415ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00004b68    mem_GOL = 00004b68
# 
#                  415ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  415ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004de1   & Golden Model = 00004de1
# 
#                  415ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003508   & Golden Model = 00003508
# 
#                  415ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  415ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  415ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  415ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  415ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  415ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  415ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  415ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004de1  00003508 
#                  415ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  415______Cp0____opselect_chk:      001
#                  415______Cp0____operation_chk:     100
#                  415______Cp0____enable_arith_chk:  1
#                  415______Cp0____enable_shift_chk:  0
#                  415______Cp0____pkt_sent.enable:   1
#                  415______Cp5____
#                  415ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0418c0000
# 
#                  425[RECEIVER]  Getting Payload
#                  425[RECEIVER]  Payload Contents:  Aluout = 00000500 mem_write_en = 1 mem_data_write_out = 00005aed
#                  425[RECEIVER]  Payload Obtained
#                  425[DRIVER] Sending in new packet BEGIN
#                  425ns:  [DRIVER] Sending Payload Begin
#                  425ns:  [DRIVER] Sending in new packet END
#                  425ns:  [DRIVER] Number of packets sent =          39
#                  425ns:  [DRIVER] The number of Packets in the Generator Mailbox =          61
#                  425[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  425ns: [CHECKER] Checker Start
# 
# 
#                  425ns:   [CHECKER] Pkt Contents: src1 = 00000c59, src2 = 00005aed, imm = 00000081, 
#                  425ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  425ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005aed    mem_GOL = 00005aed
# 
#                  425ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  425ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004de1   & Golden Model = 00004de1
# 
#                  425ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003508   & Golden Model = 00003508
# 
#                  425ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  425ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  425ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  425ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  425ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  425ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  425ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  425ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004de1  00003508 
#                  425ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  425______Cp0____opselect_chk:      001
#                  425______Cp0____operation_chk:     100
#                  425______Cp0____enable_arith_chk:  0
#                  425______Cp0____enable_shift_chk:  0
#                  425______Cp0____pkt_sent.enable:   0
#                  425______Cp23____
#                  425ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000500   & Golden Model = 000000500
# 
#                  435[RECEIVER]  Getting Payload
#                  435[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005807
#                  435[RECEIVER]  Payload Obtained
#                  435[DRIVER] Sending in new packet BEGIN
#                  435ns:  [DRIVER] Sending Payload Begin
#                  435ns:  [DRIVER] Sending in new packet END
#                  435ns:  [DRIVER] Number of packets sent =          40
#                  435ns:  [DRIVER] The number of Packets in the Generator Mailbox =          60
#                  435[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  435ns: [CHECKER] Checker Start
# 
# 
#                  435ns:   [CHECKER] Pkt Contents: src1 = 0000a8f8, src2 = 00005807, imm = 00003858, 
#                  435ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  435ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005807    mem_GOL = 00005807
# 
#                  435ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  435ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a8f8   & Golden Model = 0000a8f8
# 
#                  435ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003858   & Golden Model = 00003858
# 
#                  435ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  435ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  435ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  435ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  435ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  435ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  435ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  435ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a8f8  00003858 
#                  435ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  435______Cp0____opselect_chk:      001
#                  435______Cp0____operation_chk:     110
#                  435______Cp0____enable_arith_chk:  1
#                  435______Cp0____enable_shift_chk:  0
#                  435______Cp0____pkt_sent.enable:   1
#                  435______Cp7____
#                  435ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 000000500
# 
#                  445[RECEIVER]  Getting Payload
#                  445[RECEIVER]  Payload Contents:  Aluout = 000090a0 mem_write_en = 1 mem_data_write_out = 000043a1
#                  445[RECEIVER]  Payload Obtained
#                  445[DRIVER] Sending in new packet BEGIN
#                  445ns:  [DRIVER] Sending Payload Begin
#                  445ns:  [DRIVER] Sending in new packet END
#                  445ns:  [DRIVER] Number of packets sent =          41
#                  445ns:  [DRIVER] The number of Packets in the Generator Mailbox =          59
#                  445[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  445ns: [CHECKER] Checker Start
# 
# 
#                  445ns:   [CHECKER] Pkt Contents: src1 = 0000a70e, src2 = 000043a1, imm = 00001897, 
#                  445ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  445ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000043a1    mem_GOL = 000043a1
# 
#                  445ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  445ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  445ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  445ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  445ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  445ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  445ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  445ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  445ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  445ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  445ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  445ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  445______Cp0____opselect_chk:      001
#                  445______Cp0____operation_chk:     010
#                  445______Cp0____enable_arith_chk:  1
#                  445______Cp0____enable_shift_chk:  0
#                  445______Cp0____pkt_sent.enable:   1
#                  445______Cp3____
#                  445ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000090a0   & Golden Model = 0000090a0
# 
#                  455[RECEIVER]  Getting Payload
#                  455[RECEIVER]  Payload Contents:  Aluout = 0000636d mem_write_en = 1 mem_data_write_out = 00002fb1
#                  455[RECEIVER]  Payload Obtained
#                  455[DRIVER] Sending in new packet BEGIN
#                  455ns:  [DRIVER] Sending Payload Begin
#                  455ns:  [DRIVER] Sending in new packet END
#                  455ns:  [DRIVER] Number of packets sent =          42
#                  455ns:  [DRIVER] The number of Packets in the Generator Mailbox =          58
#                  455[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  455ns: [CHECKER] Checker Start
# 
# 
#                  455ns:   [CHECKER] Pkt Contents: src1 = 0000ae7e, src2 = 00002fb1, imm = 0000d2e9, 
#                  455ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  455ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002fb1    mem_GOL = 00002fb1
# 
#                  455ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  455ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  455ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  455ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  455ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  455ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  455ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  455ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  455ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  455ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  455ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  455ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  455______Cp0____opselect_chk:      001
#                  455______Cp0____operation_chk:     010
#                  455______Cp0____enable_arith_chk:  0
#                  455______Cp0____enable_shift_chk:  0
#                  455______Cp0____pkt_sent.enable:   0
#                  455______Cp23____
#                  455ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000636d   & Golden Model = 00000636d
# 
#                  465[RECEIVER]  Getting Payload
#                  465[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00008288
#                  465[RECEIVER]  Payload Obtained
#                  465[DRIVER] Sending in new packet BEGIN
#                  465ns:  [DRIVER] Sending Payload Begin
#                  465ns:  [DRIVER] Sending in new packet END
#                  465ns:  [DRIVER] Number of packets sent =          43
#                  465ns:  [DRIVER] The number of Packets in the Generator Mailbox =          57
#                  465[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  465ns: [CHECKER] Checker Start
# 
# 
#                  465ns:   [CHECKER] Pkt Contents: src1 = 0000b1c9, src2 = 00008288, imm = 0000297e, 
#                  465ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  465ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00008288    mem_GOL = 00008288
# 
#                  465ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  465ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  465ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  465ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  465ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  465ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  465ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  465ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  465ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  465ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  465ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  465ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  465______Cp0____opselect_chk:      001
#                  465______Cp0____operation_chk:     010
#                  465______Cp0____enable_arith_chk:  0
#                  465______Cp0____enable_shift_chk:  0
#                  465______Cp0____pkt_sent.enable:   0
#                  465______Cp23____
#                  465ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  475[RECEIVER]  Getting Payload
#                  475[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002a84
#                  475[RECEIVER]  Payload Obtained
#                  475[DRIVER] Sending in new packet BEGIN
#                  475ns:  [DRIVER] Sending Payload Begin
#                  475ns:  [DRIVER] Sending in new packet END
#                  475ns:  [DRIVER] Number of packets sent =          44
#                  475ns:  [DRIVER] The number of Packets in the Generator Mailbox =          56
#                  475[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  475ns: [CHECKER] Checker Start
# 
# 
#                  475ns:   [CHECKER] Pkt Contents: src1 = 0000b822, src2 = 00002a84, imm = 00005ca4, 
#                  475ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  475ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002a84    mem_GOL = 00002a84
# 
#                  475ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  475ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  475ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  475ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  475ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  475ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  475ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  475ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  475ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  475ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  475ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  475ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  475______Cp0____opselect_chk:      001
#                  475______Cp0____operation_chk:     010
#                  475______Cp0____enable_arith_chk:  0
#                  475______Cp0____enable_shift_chk:  0
#                  475______Cp0____pkt_sent.enable:   0
#                  475______Cp23____
#                  475ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  485[RECEIVER]  Getting Payload
#                  485[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000476d
#                  485[RECEIVER]  Payload Obtained
#                  485[DRIVER] Sending in new packet BEGIN
#                  485ns:  [DRIVER] Sending Payload Begin
#                  485ns:  [DRIVER] Sending in new packet END
#                  485ns:  [DRIVER] Number of packets sent =          45
#                  485ns:  [DRIVER] The number of Packets in the Generator Mailbox =          55
#                  485[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  485ns: [CHECKER] Checker Start
# 
# 
#                  485ns:   [CHECKER] Pkt Contents: src1 = 0000d557, src2 = 0000476d, imm = 0000a59b, 
#                  485ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  485ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000476d    mem_GOL = 0000476d
# 
#                  485ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  485ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  485ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  485ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  485ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  485ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  485ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  485ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  485ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  485ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  485ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  485ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  485______Cp0____opselect_chk:      001
#                  485______Cp0____operation_chk:     010
#                  485______Cp0____enable_arith_chk:  0
#                  485______Cp0____enable_shift_chk:  0
#                  485______Cp0____pkt_sent.enable:   0
#                  485______Cp23____
#                  485ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  495[RECEIVER]  Getting Payload
#                  495[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000aa95
#                  495[RECEIVER]  Payload Obtained
#                  495[DRIVER] Sending in new packet BEGIN
#                  495ns:  [DRIVER] Sending Payload Begin
#                  495ns:  [DRIVER] Sending in new packet END
#                  495ns:  [DRIVER] Number of packets sent =          46
#                  495ns:  [DRIVER] The number of Packets in the Generator Mailbox =          54
#                  495[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  495ns: [CHECKER] Checker Start
# 
# 
#                  495ns:   [CHECKER] Pkt Contents: src1 = 00006868, src2 = 0000aa95, imm = 000057ec, 
#                  495ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  495ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000aa95    mem_GOL = 0000aa95
# 
#                  495ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  495ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  495ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  495ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  495ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  495ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  495ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  495ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  495ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  495ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  495ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  495ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  495______Cp0____opselect_chk:      001
#                  495______Cp0____operation_chk:     010
#                  495______Cp0____enable_arith_chk:  0
#                  495______Cp0____enable_shift_chk:  0
#                  495______Cp0____pkt_sent.enable:   0
#                  495______Cp23____
#                  495ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  505[RECEIVER]  Getting Payload
#                  505[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002acc
#                  505[RECEIVER]  Payload Obtained
#                  505[DRIVER] Sending in new packet BEGIN
#                  505ns:  [DRIVER] Sending Payload Begin
#                  505ns:  [DRIVER] Sending in new packet END
#                  505ns:  [DRIVER] Number of packets sent =          47
#                  505ns:  [DRIVER] The number of Packets in the Generator Mailbox =          53
#                  505[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  505ns: [CHECKER] Checker Start
# 
# 
#                  505ns:   [CHECKER] Pkt Contents: src1 = 00004523, src2 = 00002acc, imm = 00000867, 
#                  505ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  505ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002acc    mem_GOL = 00002acc
# 
#                  505ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  505ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000a70e   & Golden Model = 0000a70e
# 
#                  505ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000043a1   & Golden Model = 000043a1
# 
#                  505ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  505ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  505ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  505ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  505ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  505ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  505ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  505ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000a70e  000043a1 
#                  505ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  505______Cp0____opselect_chk:      001
#                  505______Cp0____operation_chk:     010
#                  505______Cp0____enable_arith_chk:  0
#                  505______Cp0____enable_shift_chk:  0
#                  505______Cp0____pkt_sent.enable:   0
#                  505______Cp23____
#                  505ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  515[RECEIVER]  Getting Payload
#                  515[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d259
#                  515[RECEIVER]  Payload Obtained
#                  515[DRIVER] Sending in new packet BEGIN
#                  515ns:  [DRIVER] Sending Payload Begin
#                  515ns:  [DRIVER] Sending in new packet END
#                  515ns:  [DRIVER] Number of packets sent =          48
#                  515ns:  [DRIVER] The number of Packets in the Generator Mailbox =          52
#                  515[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  515ns: [CHECKER] Checker Start
# 
# 
#                  515ns:   [CHECKER] Pkt Contents: src1 = 0000d4be, src2 = 0000d259, imm = 00002cf5, 
#                  515ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  515ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d259    mem_GOL = 0000d259
# 
#                  515ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  515ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  515ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  515ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  515ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  515ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  515ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  515ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  515ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  515ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  515______Cp0____opselect_chk:      001
#                  515______Cp0____operation_chk:     001
#                  515______Cp0____enable_arith_chk:  1
#                  515______Cp0____enable_shift_chk:  0
#                  515______Cp0____pkt_sent.enable:   1
#                  515
#                  515______Cp2____
#                  515ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000636d
# 
#                  525[RECEIVER]  Getting Payload
#                  525[RECEIVER]  Payload Contents:  Aluout = ffffa717 mem_write_en = 1 mem_data_write_out = 00000446
#                  525[RECEIVER]  Payload Obtained
#                  525[DRIVER] Sending in new packet BEGIN
#                  525ns:  [DRIVER] Sending Payload Begin
#                  525ns:  [DRIVER] Sending in new packet END
#                  525ns:  [DRIVER] Number of packets sent =          49
#                  525ns:  [DRIVER] The number of Packets in the Generator Mailbox =          51
#                  525[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  525ns: [CHECKER] Checker Start
# 
# 
#                  525ns:   [CHECKER] Pkt Contents: src1 = 0000f6bf, src2 = 00000446, imm = 000004bc, 
#                  525ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  525ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00000446    mem_GOL = 00000446
# 
#                  525ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  525ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  525ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  525ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  525ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  525ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  525ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  525ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  525ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  525ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  525ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  525ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  525______Cp0____opselect_chk:      001
#                  525______Cp0____operation_chk:     001
#                  525______Cp0____enable_arith_chk:  0
#                  525______Cp0____enable_shift_chk:  0
#                  525______Cp0____pkt_sent.enable:   0
#                  525______Cp23____
#                  525ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffa717   & Golden Model = 0ffffa717
# 
#                  535[RECEIVER]  Getting Payload
#                  535[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00006eaa
#                  535[RECEIVER]  Payload Obtained
#                  535[DRIVER] Sending in new packet BEGIN
#                  535ns:  [DRIVER] Sending Payload Begin
#                  535ns:  [DRIVER] Sending in new packet END
#                  535ns:  [DRIVER] Number of packets sent =          50
#                  535ns:  [DRIVER] The number of Packets in the Generator Mailbox =          50
#                  535[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  535ns: [CHECKER] Checker Start
# 
# 
#                  535ns:   [CHECKER] Pkt Contents: src1 = 0000c200, src2 = 00006eaa, imm = 00007ab2, 
#                  535ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  535ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006eaa    mem_GOL = 00006eaa
# 
#                  535ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  535ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  535ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  535ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  535ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  535ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  535ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  535ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  535ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  535ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  535ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  535ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  535______Cp0____opselect_chk:      001
#                  535______Cp0____operation_chk:     001
#                  535______Cp0____enable_arith_chk:  0
#                  535______Cp0____enable_shift_chk:  0
#                  535______Cp0____pkt_sent.enable:   0
#                  535______Cp23____
#                  535ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  545[RECEIVER]  Getting Payload
#                  545[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f077
#                  545[RECEIVER]  Payload Obtained
#                  545[DRIVER] Sending in new packet BEGIN
#                  545ns:  [DRIVER] Sending Payload Begin
#                  545ns:  [DRIVER] Sending in new packet END
#                  545ns:  [DRIVER] Number of packets sent =          51
#                  545ns:  [DRIVER] The number of Packets in the Generator Mailbox =          49
#                  545[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  545ns: [CHECKER] Checker Start
# 
# 
#                  545ns:   [CHECKER] Pkt Contents: src1 = 000042f6, src2 = 0000f077, imm = 0000cb5a, 
#                  545ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  545ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f077    mem_GOL = 0000f077
# 
#                  545ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  545ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  545ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  545ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  545ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  545ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  545ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  545ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  545ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  545ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  545ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  545ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  545______Cp0____opselect_chk:      001
#                  545______Cp0____operation_chk:     001
#                  545______Cp0____enable_arith_chk:  0
#                  545______Cp0____enable_shift_chk:  0
#                  545______Cp0____pkt_sent.enable:   0
#                  545______Cp23____
#                  545ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  555[RECEIVER]  Getting Payload
#                  555[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b136
#                  555[RECEIVER]  Payload Obtained
#                  555[DRIVER] Sending in new packet BEGIN
#                  555ns:  [DRIVER] Sending Payload Begin
#                  555ns:  [DRIVER] Sending in new packet END
#                  555ns:  [DRIVER] Number of packets sent =          52
#                  555ns:  [DRIVER] The number of Packets in the Generator Mailbox =          48
#                  555[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  555ns: [CHECKER] Checker Start
# 
# 
#                  555ns:   [CHECKER] Pkt Contents: src1 = 00007acc, src2 = 0000b136, imm = 000073bc, 
#                  555ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  555ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b136    mem_GOL = 0000b136
# 
#                  555ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  555ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d4be   & Golden Model = 0000d4be
# 
#                  555ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d259   & Golden Model = 0000d259
# 
#                  555ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  555ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  555ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  555ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  555ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  555ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  555ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  555ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d4be  0000d259 
#                  555ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  555______Cp0____opselect_chk:      001
#                  555______Cp0____operation_chk:     001
#                  555______Cp0____enable_arith_chk:  0
#                  555______Cp0____enable_shift_chk:  0
#                  555______Cp0____pkt_sent.enable:   0
#                  555______Cp23____
#                  555ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  565[RECEIVER]  Getting Payload
#                  565[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b24a
#                  565[RECEIVER]  Payload Obtained
#                  565[DRIVER] Sending in new packet BEGIN
#                  565ns:  [DRIVER] Sending Payload Begin
#                  565ns:  [DRIVER] Sending in new packet END
#                  565ns:  [DRIVER] Number of packets sent =          53
#                  565ns:  [DRIVER] The number of Packets in the Generator Mailbox =          47
#                  565[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  565ns: [CHECKER] Checker Start
# 
# 
#                  565ns:   [CHECKER] Pkt Contents: src1 = 00004d3f, src2 = 0000b24a, imm = 0000b08e, 
#                  565ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  565ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b24a    mem_GOL = 0000b24a
# 
#                  565ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  565ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  565ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  565ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  565ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  565ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  565ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  565ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  565ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  565ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  565ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  565ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  565______Cp0____opselect_chk:      001
#                  565______Cp0____operation_chk:     111
#                  565______Cp0____enable_arith_chk:  1
#                  565______Cp0____enable_shift_chk:  0
#                  565______Cp0____pkt_sent.enable:   1
#                  565______Cp7____
#                  565ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0ffffa717
# 
#                  575[RECEIVER]  Getting Payload
#                  575[RECEIVER]  Payload Contents:  Aluout = b24a0000 mem_write_en = 1 mem_data_write_out = 0000cde4
#                  575[RECEIVER]  Payload Obtained
#                  575[DRIVER] Sending in new packet BEGIN
#                  575ns:  [DRIVER] Sending Payload Begin
#                  575ns:  [DRIVER] Sending in new packet END
#                  575ns:  [DRIVER] Number of packets sent =          54
#                  575ns:  [DRIVER] The number of Packets in the Generator Mailbox =          46
#                  575[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  575ns: [CHECKER] Checker Start
# 
# 
#                  575ns:   [CHECKER] Pkt Contents: src1 = 0000ac5a, src2 = 0000cde4, imm = 00007ea3, 
#                  575ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  575ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000cde4    mem_GOL = 0000cde4
# 
#                  575ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  575ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  575ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  575ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  575ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  575ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  575ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  575ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  575ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  575ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  575ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  575ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  575______Cp0____opselect_chk:      001
#                  575______Cp0____operation_chk:     111
#                  575______Cp0____enable_arith_chk:  0
#                  575______Cp0____enable_shift_chk:  0
#                  575______Cp0____pkt_sent.enable:   0
#                  575______Cp23____
#                  575ns:   [ASSERT_aluout] PASS ALUOUT: DUT = b24a0000   & Golden Model = 0b24a0000
# 
#                  585[RECEIVER]  Getting Payload
#                  585[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f817
#                  585[RECEIVER]  Payload Obtained
#                  585[DRIVER] Sending in new packet BEGIN
#                  585ns:  [DRIVER] Sending Payload Begin
#                  585ns:  [DRIVER] Sending in new packet END
#                  585ns:  [DRIVER] Number of packets sent =          55
#                  585ns:  [DRIVER] The number of Packets in the Generator Mailbox =          45
#                  585[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  585ns: [CHECKER] Checker Start
# 
# 
#                  585ns:   [CHECKER] Pkt Contents: src1 = 0000fa4e, src2 = 0000f817, imm = 0000c3ba, 
#                  585ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  585ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f817    mem_GOL = 0000f817
# 
#                  585ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  585ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  585ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  585ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  585ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  585ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  585ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  585ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  585ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  585ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  585ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  585ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  585______Cp0____opselect_chk:      001
#                  585______Cp0____operation_chk:     111
#                  585______Cp0____enable_arith_chk:  0
#                  585______Cp0____enable_shift_chk:  0
#                  585______Cp0____pkt_sent.enable:   0
#                  585______Cp23____
#                  585ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  595[RECEIVER]  Getting Payload
#                  595[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001baf
#                  595[RECEIVER]  Payload Obtained
#                  595[DRIVER] Sending in new packet BEGIN
#                  595ns:  [DRIVER] Sending Payload Begin
#                  595ns:  [DRIVER] Sending in new packet END
#                  595ns:  [DRIVER] Number of packets sent =          56
#                  595ns:  [DRIVER] The number of Packets in the Generator Mailbox =          44
#                  595[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  595ns: [CHECKER] Checker Start
# 
# 
#                  595ns:   [CHECKER] Pkt Contents: src1 = 00003860, src2 = 00001baf, imm = 00004592, 
#                  595ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  595ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001baf    mem_GOL = 00001baf
# 
#                  595ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  595ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  595ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  595ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  595ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  595ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  595ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  595ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  595ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  595ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  595ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  595ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  595______Cp0____opselect_chk:      001
#                  595______Cp0____operation_chk:     111
#                  595______Cp0____enable_arith_chk:  0
#                  595______Cp0____enable_shift_chk:  0
#                  595______Cp0____pkt_sent.enable:   0
#                  595______Cp23____
#                  595ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  605[RECEIVER]  Getting Payload
#                  605[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000da12
#                  605[RECEIVER]  Payload Obtained
#                  605[DRIVER] Sending in new packet BEGIN
#                  605ns:  [DRIVER] Sending Payload Begin
#                  605ns:  [DRIVER] Sending in new packet END
#                  605ns:  [DRIVER] Number of packets sent =          57
#                  605ns:  [DRIVER] The number of Packets in the Generator Mailbox =          43
#                  605[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  605ns: [CHECKER] Checker Start
# 
# 
#                  605ns:   [CHECKER] Pkt Contents: src1 = 0000b1d6, src2 = 0000da12, imm = 00002a23, 
#                  605ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  605ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000da12    mem_GOL = 0000da12
# 
#                  605ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  605ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d3f   & Golden Model = 00004d3f
# 
#                  605ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b24a   & Golden Model = 0000b24a
# 
#                  605ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  605ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  605ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  605ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  605ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  605ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  605ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  605ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d3f  0000b24a 
#                  605ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  605______Cp0____opselect_chk:      001
#                  605______Cp0____operation_chk:     111
#                  605______Cp0____enable_arith_chk:  0
#                  605______Cp0____enable_shift_chk:  0
#                  605______Cp0____pkt_sent.enable:   0
#                  605______Cp23____
#                  605ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  615[RECEIVER]  Getting Payload
#                  615[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000ef8e
#                  615[RECEIVER]  Payload Obtained
#                  615[DRIVER] Sending in new packet BEGIN
#                  615ns:  [DRIVER] Sending Payload Begin
#                  615ns:  [DRIVER] Sending in new packet END
#                  615ns:  [DRIVER] Number of packets sent =          58
#                  615ns:  [DRIVER] The number of Packets in the Generator Mailbox =          42
#                  615[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  615ns: [CHECKER] Checker Start
# 
# 
#                  615ns:   [CHECKER] Pkt Contents: src1 = 000039dd, src2 = 0000ef8e, imm = 0000c621, 
#                  615ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  615ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ef8e    mem_GOL = 0000ef8e
# 
#                  615ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  615ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  615ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  615ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  615ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  615ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  615ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  615ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  615ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  615ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  615ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  615ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  615______Cp0____opselect_chk:      001
#                  615______Cp0____operation_chk:     101
#                  615______Cp0____enable_arith_chk:  1
#                  615______Cp0____enable_shift_chk:  0
#                  615______Cp0____pkt_sent.enable:   1
#                  615______Cp6____
#                  615ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0b24a0000
# 
#                  625[RECEIVER]  Getting Payload
#                  625[RECEIVER]  Payload Contents:  Aluout = 0000ffdf mem_write_en = 1 mem_data_write_out = 00002926
#                  625[RECEIVER]  Payload Obtained
#                  625[DRIVER] Sending in new packet BEGIN
#                  625ns:  [DRIVER] Sending Payload Begin
#                  625ns:  [DRIVER] Sending in new packet END
#                  625ns:  [DRIVER] Number of packets sent =          59
#                  625ns:  [DRIVER] The number of Packets in the Generator Mailbox =          41
#                  625[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  625ns: [CHECKER] Checker Start
# 
# 
#                  625ns:   [CHECKER] Pkt Contents: src1 = 0000d637, src2 = 00002926, imm = 0000ac70, 
#                  625ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 100, 
#                  625ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002926    mem_GOL = 00002926
# 
#                  625ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  625ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  625ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  625ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  625ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  625ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  625ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  625ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  625ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  625ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  625ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  625ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  625______Cp0____opselect_chk:      001
#                  625______Cp0____operation_chk:     101
#                  625______Cp0____enable_arith_chk:  0
#                  625______Cp0____enable_shift_chk:  0
#                  625______Cp0____pkt_sent.enable:   0
#                  625______Cp23____
#                  625ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ffdf   & Golden Model = 00000ffdf
# 
#                  635[RECEIVER]  Getting Payload
#                  635[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001088
#                  635[RECEIVER]  Payload Obtained
#                  635[DRIVER] Sending in new packet BEGIN
#                  635ns:  [DRIVER] Sending Payload Begin
#                  635ns:  [DRIVER] Sending in new packet END
#                  635ns:  [DRIVER] Number of packets sent =          60
#                  635ns:  [DRIVER] The number of Packets in the Generator Mailbox =          40
#                  635[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  635ns: [CHECKER] Checker Start
# 
# 
#                  635ns:   [CHECKER] Pkt Contents: src1 = 0000a58d, src2 = 00001088, imm = 0000b995, 
#                  635ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  635ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001088    mem_GOL = 00001088
# 
#                  635ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  635ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000039dd   & Golden Model = 000039dd
# 
#                  635ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ef8e   & Golden Model = 0000ef8e
# 
#                  635ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  635ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  635ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  635ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  635ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  635ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  635ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  635ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000039dd  0000ef8e 
#                  635ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  635______Cp0____opselect_chk:      001
#                  635______Cp0____operation_chk:     101
#                  635______Cp0____enable_arith_chk:  0
#                  635______Cp0____enable_shift_chk:  0
#                  635______Cp0____pkt_sent.enable:   0
#                  635______Cp23____
#                  635ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ffdf
# 
#                  645[RECEIVER]  Getting Payload
#                  645[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e068
#                  645[RECEIVER]  Payload Obtained
#                  645[DRIVER] Sending in new packet BEGIN
#                  645ns:  [DRIVER] Sending Payload Begin
#                  645ns:  [DRIVER] Sending in new packet END
#                  645ns:  [DRIVER] Number of packets sent =          61
#                  645ns:  [DRIVER] The number of Packets in the Generator Mailbox =          39
#                  645[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  645ns: [CHECKER] Checker Start
# 
# 
#                  645ns:   [CHECKER] Pkt Contents: src1 = 00004ea5, src2 = 0000e068, imm = 0000f290, 
#                  645ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  645ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e068    mem_GOL = 0000e068
# 
#                  645ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  645ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  645ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  645ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  645ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  645ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  645ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  645ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  645ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  645ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  645ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  645ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  645______Cp0____opselect_chk:      001
#                  645______Cp0____operation_chk:     111
#                  645______Cp0____enable_arith_chk:  1
#                  645______Cp0____enable_shift_chk:  0
#                  645______Cp0____pkt_sent.enable:   1
#                  645______Cp7____
#                  645ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ffdf
# 
#                  655[RECEIVER]  Getting Payload
#                  655[RECEIVER]  Payload Contents:  Aluout = e0680000 mem_write_en = 1 mem_data_write_out = 00007663
#                  655[RECEIVER]  Payload Obtained
#                  655[DRIVER] Sending in new packet BEGIN
#                  655ns:  [DRIVER] Sending Payload Begin
#                  655ns:  [DRIVER] Sending in new packet END
#                  655ns:  [DRIVER] Number of packets sent =          62
#                  655ns:  [DRIVER] The number of Packets in the Generator Mailbox =          38
#                  655[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  655ns: [CHECKER] Checker Start
# 
# 
#                  655ns:   [CHECKER] Pkt Contents: src1 = 0000dec8, src2 = 00007663, imm = 00000842, 
#                  655ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                  655ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007663    mem_GOL = 00007663
# 
#                  655ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  655ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  655ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  655ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  655ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  655ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  655ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  655ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  655ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  655ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  655ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  655ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  655______Cp0____opselect_chk:      001
#                  655______Cp0____operation_chk:     111
#                  655______Cp0____enable_arith_chk:  0
#                  655______Cp0____enable_shift_chk:  0
#                  655______Cp0____pkt_sent.enable:   0
#                  655______Cp23____
#                  655ns:   [ASSERT_aluout] PASS ALUOUT: DUT = e0680000   & Golden Model = 0e0680000
# 
#                  665[RECEIVER]  Getting Payload
#                  665[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00009c15
#                  665[RECEIVER]  Payload Obtained
#                  665[DRIVER] Sending in new packet BEGIN
#                  665ns:  [DRIVER] Sending Payload Begin
#                  665ns:  [DRIVER] Sending in new packet END
#                  665ns:  [DRIVER] Number of packets sent =          63
#                  665ns:  [DRIVER] The number of Packets in the Generator Mailbox =          37
#                  665[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  665ns: [CHECKER] Checker Start
# 
# 
#                  665ns:   [CHECKER] Pkt Contents: src1 = 0000d904, src2 = 00009c15, imm = 0000dc36, 
#                  665ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  665ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009c15    mem_GOL = 00009c15
# 
#                  665ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  665ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  665ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  665ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  665ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  665ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  665ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  665ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  665ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  665ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  665ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  665ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  665______Cp0____opselect_chk:      001
#                  665______Cp0____operation_chk:     111
#                  665______Cp0____enable_arith_chk:  0
#                  665______Cp0____enable_shift_chk:  0
#                  665______Cp0____pkt_sent.enable:   0
#                  665______Cp23____
#                  665ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  675[RECEIVER]  Getting Payload
#                  675[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00009f5e
#                  675[RECEIVER]  Payload Obtained
#                  675[DRIVER] Sending in new packet BEGIN
#                  675ns:  [DRIVER] Sending Payload Begin
#                  675ns:  [DRIVER] Sending in new packet END
#                  675ns:  [DRIVER] Number of packets sent =          64
#                  675ns:  [DRIVER] The number of Packets in the Generator Mailbox =          36
#                  675[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  675ns: [CHECKER] Checker Start
# 
# 
#                  675ns:   [CHECKER] Pkt Contents: src1 = 00001ad9, src2 = 00009f5e, imm = 0000f564, 
#                  675ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  675ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009f5e    mem_GOL = 00009f5e
# 
#                  675ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  675ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004ea5   & Golden Model = 00004ea5
# 
#                  675ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000e068   & Golden Model = 0000e068
# 
#                  675ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  675ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  675ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  675ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  675ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  675ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  675ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  675ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004ea5  0000e068 
#                  675ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  675______Cp0____opselect_chk:      001
#                  675______Cp0____operation_chk:     111
#                  675______Cp0____enable_arith_chk:  0
#                  675______Cp0____enable_shift_chk:  0
#                  675______Cp0____pkt_sent.enable:   0
#                  675______Cp23____
#                  675ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  685[RECEIVER]  Getting Payload
#                  685[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001d33
#                  685[RECEIVER]  Payload Obtained
#                  685[DRIVER] Sending in new packet BEGIN
#                  685ns:  [DRIVER] Sending Payload Begin
#                  685ns:  [DRIVER] Sending in new packet END
#                  685ns:  [DRIVER] Number of packets sent =          65
#                  685ns:  [DRIVER] The number of Packets in the Generator Mailbox =          35
#                  685[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  685ns: [CHECKER] Checker Start
# 
# 
#                  685ns:   [CHECKER] Pkt Contents: src1 = 000092b4, src2 = 00001d33, imm = 00004f41, 
#                  685ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  685ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001d33    mem_GOL = 00001d33
# 
#                  685ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  685ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  685ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  685ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  685ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  685ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  685ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  685ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  685ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  685ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  685ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  685ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  685______Cp0____opselect_chk:      001
#                  685______Cp0____operation_chk:     110
#                  685______Cp0____enable_arith_chk:  1
#                  685______Cp0____enable_shift_chk:  0
#                  685______Cp0____pkt_sent.enable:   1
#                  685______Cp7____
#                  685ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0e0680000
# 
#                  695[RECEIVER]  Getting Payload
#                  695[RECEIVER]  Payload Contents:  Aluout = 0000ddf5 mem_write_en = 1 mem_data_write_out = 000072b6
#                  695[RECEIVER]  Payload Obtained
#                  695[DRIVER] Sending in new packet BEGIN
#                  695ns:  [DRIVER] Sending Payload Begin
#                  695ns:  [DRIVER] Sending in new packet END
#                  695ns:  [DRIVER] Number of packets sent =          66
#                  695ns:  [DRIVER] The number of Packets in the Generator Mailbox =          34
#                  695[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  695ns: [CHECKER] Checker Start
# 
# 
#                  695ns:   [CHECKER] Pkt Contents: src1 = 00003e55, src2 = 000072b6, imm = 0000ece4, 
#                  695ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  695ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000072b6    mem_GOL = 000072b6
# 
#                  695ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  695ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  695ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  695ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  695ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  695ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  695ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  695ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  695ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  695ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  695ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  695ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  695______Cp0____opselect_chk:      001
#                  695______Cp0____operation_chk:     110
#                  695______Cp0____enable_arith_chk:  0
#                  695______Cp0____enable_shift_chk:  0
#                  695______Cp0____pkt_sent.enable:   0
#                  695______Cp23____
#                  695ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ddf5   & Golden Model = 00000ddf5
# 
#                  705[RECEIVER]  Getting Payload
#                  705[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005b5a
#                  705[RECEIVER]  Payload Obtained
#                  705[DRIVER] Sending in new packet BEGIN
#                  705ns:  [DRIVER] Sending Payload Begin
#                  705ns:  [DRIVER] Sending in new packet END
#                  705ns:  [DRIVER] Number of packets sent =          67
#                  705ns:  [DRIVER] The number of Packets in the Generator Mailbox =          33
#                  705[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  705ns: [CHECKER] Checker Start
# 
# 
#                  705ns:   [CHECKER] Pkt Contents: src1 = 000007bf, src2 = 00005b5a, imm = 0000c7d0, 
#                  705ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  705ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005b5a    mem_GOL = 00005b5a
# 
#                  705ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  705ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000092b4   & Golden Model = 000092b4
# 
#                  705ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00004f41   & Golden Model = 00004f41
# 
#                  705ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  705ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  705ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  705ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  705ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  705ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  705ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  705ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000092b4  00004f41 
#                  705ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  705______Cp0____opselect_chk:      001
#                  705______Cp0____operation_chk:     110
#                  705______Cp0____enable_arith_chk:  0
#                  705______Cp0____enable_shift_chk:  0
#                  705______Cp0____pkt_sent.enable:   0
#                  705______Cp23____
#                  705ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ddf5
# 
#                  715[RECEIVER]  Getting Payload
#                  715[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007308
#                  715[RECEIVER]  Payload Obtained
#                  715[DRIVER] Sending in new packet BEGIN
#                  715ns:  [DRIVER] Sending Payload Begin
#                  715ns:  [DRIVER] Sending in new packet END
#                  715ns:  [DRIVER] Number of packets sent =          68
#                  715ns:  [DRIVER] The number of Packets in the Generator Mailbox =          32
#                  715[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  715ns: [CHECKER] Checker Start
# 
# 
#                  715ns:   [CHECKER] Pkt Contents: src1 = 000058b0, src2 = 00007308, imm = 0000e01c, 
#                  715ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  715ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007308    mem_GOL = 00007308
# 
#                  715ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  715ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000058b0   & Golden Model = 000058b0
# 
#                  715ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007308   & Golden Model = 00007308
# 
#                  715ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  715ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  715ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  715ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  715ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  715ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  715ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  715ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000058b0  00007308 
#                  715ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  715______Cp0____opselect_chk:      001
#                  715______Cp0____operation_chk:     010
#                  715______Cp0____enable_arith_chk:  1
#                  715______Cp0____enable_shift_chk:  0
#                  715______Cp0____pkt_sent.enable:   1
#                  715______Cp3____
#                  715ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ddf5
# 
#                  725[RECEIVER]  Getting Payload
#                  725[RECEIVER]  Payload Contents:  Aluout = ffffe5a8 mem_write_en = 1 mem_data_write_out = 000040b5
#                  725[RECEIVER]  Payload Obtained
#                  725[DRIVER] Sending in new packet BEGIN
#                  725ns:  [DRIVER] Sending Payload Begin
#                  725ns:  [DRIVER] Sending in new packet END
#                  725ns:  [DRIVER] Number of packets sent =          69
#                  725ns:  [DRIVER] The number of Packets in the Generator Mailbox =          31
#                  725[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  725ns: [CHECKER] Checker Start
# 
# 
#                  725ns:   [CHECKER] Pkt Contents: src1 = 0000fcbc, src2 = 000040b5, imm = 0000c9ed, 
#                  725ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  725ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000040b5    mem_GOL = 000040b5
# 
#                  725ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  725ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000fcbc   & Golden Model = 0000fcbc
# 
#                  725ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000040b5   & Golden Model = 000040b5
# 
#                  725ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  725ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  725ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  725ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  725ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  725ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 1       & Golden Model = 1
# 
#                  725ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  725ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000fcbc  000040b5 
#                  725ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  725______Cp0____opselect_chk:      001
#                  725______Cp0____operation_chk:     101
#                  725______Cp0____enable_arith_chk:  1
#                  725______Cp0____enable_shift_chk:  0
#                  725______Cp0____pkt_sent.enable:   1
#                  725______Cp6____
#                  725ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffe5a8   & Golden Model = 1ffffe5a8
# 
#                  735[RECEIVER]  Getting Payload
#                  735[RECEIVER]  Payload Contents:  Aluout = 0000fcbd mem_write_en = 1 mem_data_write_out = 00006f50
#                  735[RECEIVER]  Payload Obtained
#                  735[DRIVER] Sending in new packet BEGIN
#                  735ns:  [DRIVER] Sending Payload Begin
#                  735ns:  [DRIVER] Sending in new packet END
#                  735ns:  [DRIVER] Number of packets sent =          70
#                  735ns:  [DRIVER] The number of Packets in the Generator Mailbox =          30
#                  735[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  735ns: [CHECKER] Checker Start
# 
# 
#                  735ns:   [CHECKER] Pkt Contents: src1 = 00004d79, src2 = 00006f50, imm = 00008332, 
#                  735ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  735ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006f50    mem_GOL = 00006f50
# 
#                  735ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  735ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d79   & Golden Model = 00004d79
# 
#                  735ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00006f50   & Golden Model = 00006f50
# 
#                  735ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  735ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  735ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  735ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  735ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  735ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d79  00006f50 
#                  735ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  735______Cp0____opselect_chk:      001
#                  735______Cp0____operation_chk:     001
#                  735______Cp0____enable_arith_chk:  1
#                  735______Cp0____enable_shift_chk:  0
#                  735______Cp0____pkt_sent.enable:   1
#                  735
#                  735______Cp2____
#                  735ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000fcbd   & Golden Model = 00000fcbd
# 
#                  745[RECEIVER]  Getting Payload
#                  745[RECEIVER]  Payload Contents:  Aluout = ffffbcc9 mem_write_en = 1 mem_data_write_out = 0000e704
#                  745[RECEIVER]  Payload Obtained
#                  745[DRIVER] Sending in new packet BEGIN
#                  745ns:  [DRIVER] Sending Payload Begin
#                  745ns:  [DRIVER] Sending in new packet END
#                  745ns:  [DRIVER] Number of packets sent =          71
#                  745ns:  [DRIVER] The number of Packets in the Generator Mailbox =          29
#                  745[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  745ns: [CHECKER] Checker Start
# 
# 
#                  745ns:   [CHECKER] Pkt Contents: src1 = 00000299, src2 = 0000e704, imm = 000093b1, 
#                  745ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  745ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e704    mem_GOL = 0000e704
# 
#                  745ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  745ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004d79   & Golden Model = 00004d79
# 
#                  745ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00006f50   & Golden Model = 00006f50
# 
#                  745ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  745ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  745ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  745ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  745ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  745ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  745ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  745ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004d79  00006f50 
#                  745ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  745______Cp0____opselect_chk:      001
#                  745______Cp0____operation_chk:     001
#                  745______Cp0____enable_arith_chk:  0
#                  745______Cp0____enable_shift_chk:  0
#                  745______Cp0____pkt_sent.enable:   0
#                  745______Cp23____
#                  745ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffbcc9   & Golden Model = 00000bcc9
# 
#                  755[RECEIVER]  Getting Payload
#                  755[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000e6c8
#                  755[RECEIVER]  Payload Obtained
#                  755[DRIVER] Sending in new packet BEGIN
#                  755ns:  [DRIVER] Sending Payload Begin
#                  755ns:  [DRIVER] Sending in new packet END
#                  755ns:  [DRIVER] Number of packets sent =          72
#                  755ns:  [DRIVER] The number of Packets in the Generator Mailbox =          28
#                  755[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  755ns: [CHECKER] Checker Start
# 
# 
#                  755ns:   [CHECKER] Pkt Contents: src1 = 000053e1, src2 = 0000e6c8, imm = 0000a4a9, 
#                  755ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  755ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e6c8    mem_GOL = 0000e6c8
# 
#                  755ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  755ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000053e1   & Golden Model = 000053e1
# 
#                  755ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a4a9   & Golden Model = 0000a4a9
# 
#                  755ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  755ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  755ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  755ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  755ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  755ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  755ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  755ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000053e1  0000a4a9 
#                  755ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  755______Cp0____opselect_chk:      001
#                  755______Cp0____operation_chk:     011
#                  755______Cp0____enable_arith_chk:  1
#                  755______Cp0____enable_shift_chk:  0
#                  755______Cp0____pkt_sent.enable:   1
#                  755______Cp4____
#                  755ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000bcc9
# 
#                  765[RECEIVER]  Getting Payload
#                  765[RECEIVER]  Payload Contents:  Aluout = ffff5b56 mem_write_en = 1 mem_data_write_out = 00006e2a
#                  765[RECEIVER]  Payload Obtained
#                  765[DRIVER] Sending in new packet BEGIN
#                  765ns:  [DRIVER] Sending Payload Begin
#                  765ns:  [DRIVER] Sending in new packet END
#                  765ns:  [DRIVER] Number of packets sent =          73
#                  765ns:  [DRIVER] The number of Packets in the Generator Mailbox =          27
#                  765[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  765ns: [CHECKER] Checker Start
# 
# 
#                  765ns:   [CHECKER] Pkt Contents: src1 = 0000ad6b, src2 = 00006e2a, imm = 0000ff23, 
#                  765ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  765ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00006e2a    mem_GOL = 00006e2a
# 
#                  765ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  765ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 000053e1   & Golden Model = 000053e1
# 
#                  765ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000a4a9   & Golden Model = 0000a4a9
# 
#                  765ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  765ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  765ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  765ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  765ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  765ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  765ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  765ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 000053e1  0000a4a9 
#                  765ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  765______Cp0____opselect_chk:      001
#                  765______Cp0____operation_chk:     011
#                  765______Cp0____enable_arith_chk:  0
#                  765______Cp0____enable_shift_chk:  0
#                  765______Cp0____pkt_sent.enable:   0
#                  765______Cp23____
#                  765ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffff5b56   & Golden Model = 1ffff5b56
# 
#                  775[RECEIVER]  Getting Payload
#                  775[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000b8e2
#                  775[RECEIVER]  Payload Obtained
#                  775[DRIVER] Sending in new packet BEGIN
#                  775ns:  [DRIVER] Sending Payload Begin
#                  775ns:  [DRIVER] Sending in new packet END
#                  775ns:  [DRIVER] Number of packets sent =          74
#                  775ns:  [DRIVER] The number of Packets in the Generator Mailbox =          26
#                  775[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  775ns: [CHECKER] Checker Start
# 
# 
#                  775ns:   [CHECKER] Pkt Contents: src1 = 00003083, src2 = 0000b8e2, imm = 00009866, 
#                  775ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  775ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b8e2    mem_GOL = 0000b8e2
# 
#                  775ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  775ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  775ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  775ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  775ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  775ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  775ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  775ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  775ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  775ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  775ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  775ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  775______Cp0____opselect_chk:      001
#                  775______Cp0____operation_chk:     000
#                  775______Cp0____enable_arith_chk:  1
#                  775______Cp0____enable_shift_chk:  0
#                  775______Cp0____pkt_sent.enable:   1
#                  775______Cp1____
#                  775ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffff5b56
# 
#                  785[RECEIVER]  Getting Payload
#                  785[RECEIVER]  Payload Contents:  Aluout = 0000e965 mem_write_en = 1 mem_data_write_out = 0000bb5d
#                  785[RECEIVER]  Payload Obtained
#                  785[DRIVER] Sending in new packet BEGIN
#                  785ns:  [DRIVER] Sending Payload Begin
#                  785ns:  [DRIVER] Sending in new packet END
#                  785ns:  [DRIVER] Number of packets sent =          75
#                  785ns:  [DRIVER] The number of Packets in the Generator Mailbox =          25
#                  785[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  785ns: [CHECKER] Checker Start
# 
# 
#                  785ns:   [CHECKER] Pkt Contents: src1 = 0000f540, src2 = 0000bb5d, imm = 0000df6e, 
#                  785ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                  785ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bb5d    mem_GOL = 0000bb5d
# 
#                  785ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  785ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  785ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  785ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  785ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  785ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  785ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  785ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  785ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  785ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  785______Cp0____opselect_chk:      001
#                  785______Cp0____operation_chk:     000
#                  785______Cp0____enable_arith_chk:  0
#                  785______Cp0____enable_shift_chk:  0
#                  785______Cp0____pkt_sent.enable:   0
#                  785______Cp23____
#                  785ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000e965   & Golden Model = 00000e965
# 
#                  795[RECEIVER]  Getting Payload
#                  795[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000bf2b
#                  795[RECEIVER]  Payload Obtained
#                  795[DRIVER] Sending in new packet BEGIN
#                  795ns:  [DRIVER] Sending Payload Begin
#                  795ns:  [DRIVER] Sending in new packet END
#                  795ns:  [DRIVER] Number of packets sent =          76
#                  795ns:  [DRIVER] The number of Packets in the Generator Mailbox =          24
#                  795[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  795ns: [CHECKER] Checker Start
# 
# 
#                  795ns:   [CHECKER] Pkt Contents: src1 = 0000c13c, src2 = 0000bf2b, imm = 0000ef2e, 
#                  795ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  795ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000bf2b    mem_GOL = 0000bf2b
# 
#                  795ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  795ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  795ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  795ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  795ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  795ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  795ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  795ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  795ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  795ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  795______Cp0____opselect_chk:      001
#                  795______Cp0____operation_chk:     000
#                  795______Cp0____enable_arith_chk:  0
#                  795______Cp0____enable_shift_chk:  0
#                  795______Cp0____pkt_sent.enable:   0
#                  795______Cp23____
#                  795ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  805[RECEIVER]  Getting Payload
#                  805[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005d50
#                  805[RECEIVER]  Payload Obtained
#                  805[DRIVER] Sending in new packet BEGIN
#                  805ns:  [DRIVER] Sending Payload Begin
#                  805ns:  [DRIVER] Sending in new packet END
#                  805ns:  [DRIVER] Number of packets sent =          77
#                  805ns:  [DRIVER] The number of Packets in the Generator Mailbox =          23
#                  805[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  805ns: [CHECKER] Checker Start
# 
# 
#                  805ns:   [CHECKER] Pkt Contents: src1 = 0000b40a, src2 = 00005d50, imm = 0000a7b5, 
#                  805ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  805ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005d50    mem_GOL = 00005d50
# 
#                  805ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  805ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  805ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  805ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  805ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  805ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  805ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  805ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  805ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  805ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  805______Cp0____opselect_chk:      001
#                  805______Cp0____operation_chk:     000
#                  805______Cp0____enable_arith_chk:  0
#                  805______Cp0____enable_shift_chk:  0
#                  805______Cp0____pkt_sent.enable:   0
#                  805______Cp23____
#                  805ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  815[RECEIVER]  Getting Payload
#                  815[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 000040ab
#                  815[RECEIVER]  Payload Obtained
#                  815[DRIVER] Sending in new packet BEGIN
#                  815ns:  [DRIVER] Sending Payload Begin
#                  815ns:  [DRIVER] Sending in new packet END
#                  815ns:  [DRIVER] Number of packets sent =          78
#                  815ns:  [DRIVER] The number of Packets in the Generator Mailbox =          22
#                  815[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  815ns: [CHECKER] Checker Start
# 
# 
#                  815ns:   [CHECKER] Pkt Contents: src1 = 00004348, src2 = 000040ab, imm = 0000db6c, 
#                  815ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  815ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000040ab    mem_GOL = 000040ab
# 
#                  815ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  815ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  815ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  815ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  815ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  815ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  815ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  815ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  815ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  815ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  815______Cp0____opselect_chk:      001
#                  815______Cp0____operation_chk:     000
#                  815______Cp0____enable_arith_chk:  0
#                  815______Cp0____enable_shift_chk:  0
#                  815______Cp0____pkt_sent.enable:   0
#                  815______Cp23____
#                  815ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  825[RECEIVER]  Getting Payload
#                  825[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000f101
#                  825[RECEIVER]  Payload Obtained
#                  825[DRIVER] Sending in new packet BEGIN
#                  825ns:  [DRIVER] Sending Payload Begin
#                  825ns:  [DRIVER] Sending in new packet END
#                  825ns:  [DRIVER] Number of packets sent =          79
#                  825ns:  [DRIVER] The number of Packets in the Generator Mailbox =          21
#                  825[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  825ns: [CHECKER] Checker Start
# 
# 
#                  825ns:   [CHECKER] Pkt Contents: src1 = 00004d0f, src2 = 0000f101, imm = 00007681, 
#                  825ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  825ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f101    mem_GOL = 0000f101
# 
#                  825ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  825ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  825ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  825ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  825ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  825ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  825ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  825ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  825ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  825ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  825______Cp0____opselect_chk:      001
#                  825______Cp0____operation_chk:     000
#                  825______Cp0____enable_arith_chk:  0
#                  825______Cp0____enable_shift_chk:  0
#                  825______Cp0____pkt_sent.enable:   0
#                  825______Cp23____
#                  825ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  835[RECEIVER]  Getting Payload
#                  835[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000dc66
#                  835[RECEIVER]  Payload Obtained
#                  835[DRIVER] Sending in new packet BEGIN
#                  835ns:  [DRIVER] Sending Payload Begin
#                  835ns:  [DRIVER] Sending in new packet END
#                  835ns:  [DRIVER] Number of packets sent =          80
#                  835ns:  [DRIVER] The number of Packets in the Generator Mailbox =          20
#                  835[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  835ns: [CHECKER] Checker Start
# 
# 
#                  835ns:   [CHECKER] Pkt Contents: src1 = 0000a59e, src2 = 0000dc66, imm = 00002606, 
#                  835ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  835ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000dc66    mem_GOL = 0000dc66
# 
#                  835ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  835ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  835ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  835ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  835ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  835ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  835ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  835ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  835ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  835ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  835______Cp0____opselect_chk:      001
#                  835______Cp0____operation_chk:     000
#                  835______Cp0____enable_arith_chk:  0
#                  835______Cp0____enable_shift_chk:  0
#                  835______Cp0____pkt_sent.enable:   0
#                  835______Cp23____
#                  835ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  845[RECEIVER]  Getting Payload
#                  845[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002b95
#                  845[RECEIVER]  Payload Obtained
#                  845[DRIVER] Sending in new packet BEGIN
#                  845ns:  [DRIVER] Sending Payload Begin
#                  845ns:  [DRIVER] Sending in new packet END
#                  845ns:  [DRIVER] Number of packets sent =          81
#                  845ns:  [DRIVER] The number of Packets in the Generator Mailbox =          19
#                  845[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  845ns: [CHECKER] Checker Start
# 
# 
#                  845ns:   [CHECKER] Pkt Contents: src1 = 0000a23e, src2 = 00002b95, imm = 000095d0, 
#                  845ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  845ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002b95    mem_GOL = 00002b95
# 
#                  845ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  845ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003083   & Golden Model = 00003083
# 
#                  845ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b8e2   & Golden Model = 0000b8e2
# 
#                  845ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  845ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  845ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  845ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  845ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  845ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003083  0000b8e2 
#                  845ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  845______Cp0____opselect_chk:      001
#                  845______Cp0____operation_chk:     000
#                  845______Cp0____enable_arith_chk:  0
#                  845______Cp0____enable_shift_chk:  0
#                  845______Cp0____pkt_sent.enable:   0
#                  845______Cp23____
#                  845ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  855[RECEIVER]  Getting Payload
#                  855[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00005d13
#                  855[RECEIVER]  Payload Obtained
#                  855[DRIVER] Sending in new packet BEGIN
#                  855ns:  [DRIVER] Sending Payload Begin
#                  855ns:  [DRIVER] Sending in new packet END
#                  855ns:  [DRIVER] Number of packets sent =          82
#                  855ns:  [DRIVER] The number of Packets in the Generator Mailbox =          18
#                  855[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  855ns: [CHECKER] Checker Start
# 
# 
#                  855ns:   [CHECKER] Pkt Contents: src1 = 00009889, src2 = 00005d13, imm = 00005e48, 
#                  855ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  855ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005d13    mem_GOL = 00005d13
# 
#                  855ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  855ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009889   & Golden Model = 00009889
# 
#                  855ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005e48   & Golden Model = 00005e48
# 
#                  855ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  855ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  855ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  855ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  855ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  855ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  855ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  855ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009889  00005e48 
#                  855ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  855______Cp0____opselect_chk:      001
#                  855______Cp0____operation_chk:     110
#                  855______Cp0____enable_arith_chk:  1
#                  855______Cp0____enable_shift_chk:  0
#                  855______Cp0____pkt_sent.enable:   1
#                  855______Cp7____
#                  855ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000e965
# 
#                  865[RECEIVER]  Getting Payload
#                  865[RECEIVER]  Payload Contents:  Aluout = 0000c6c1 mem_write_en = 1 mem_data_write_out = 000017cd
#                  865[RECEIVER]  Payload Obtained
#                  865[DRIVER] Sending in new packet BEGIN
#                  865ns:  [DRIVER] Sending Payload Begin
#                  865ns:  [DRIVER] Sending in new packet END
#                  865ns:  [DRIVER] Number of packets sent =          83
#                  865ns:  [DRIVER] The number of Packets in the Generator Mailbox =          17
#                  865[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  865ns: [CHECKER] Checker Start
# 
# 
#                  865ns:   [CHECKER] Pkt Contents: src1 = 0000a3d9, src2 = 000017cd, imm = 0000fbda, 
#                  865ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  865ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000017cd    mem_GOL = 000017cd
# 
#                  865ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  865ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009889   & Golden Model = 00009889
# 
#                  865ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00005e48   & Golden Model = 00005e48
# 
#                  865ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  865ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  865ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  865ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  865ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  865ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  865ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  865ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009889  00005e48 
#                  865ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  865______Cp0____opselect_chk:      001
#                  865______Cp0____operation_chk:     110
#                  865______Cp0____enable_arith_chk:  0
#                  865______Cp0____enable_shift_chk:  0
#                  865______Cp0____pkt_sent.enable:   0
#                  865______Cp23____
#                  865ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c6c1   & Golden Model = 00000c6c1
# 
#                  875[RECEIVER]  Getting Payload
#                  875[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002cbb
#                  875[RECEIVER]  Payload Obtained
#                  875[DRIVER] Sending in new packet BEGIN
#                  875ns:  [DRIVER] Sending Payload Begin
#                  875ns:  [DRIVER] Sending in new packet END
#                  875ns:  [DRIVER] Number of packets sent =          84
#                  875ns:  [DRIVER] The number of Packets in the Generator Mailbox =          16
#                  875[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  875ns: [CHECKER] Checker Start
# 
# 
#                  875ns:   [CHECKER] Pkt Contents: src1 = 00007500, src2 = 00002cbb, imm = 0000a1c6, 
#                  875ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                  875ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002cbb    mem_GOL = 00002cbb
# 
#                  875ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  875ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00007500   & Golden Model = 00007500
# 
#                  875ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00002cbb   & Golden Model = 00002cbb
# 
#                  875ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  875ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  875ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  875ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  875ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  875ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  875ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  875ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00007500  00002cbb 
#                  875ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  875______Cp0____opselect_chk:      001
#                  875______Cp0____operation_chk:     111
#                  875______Cp0____enable_arith_chk:  1
#                  875______Cp0____enable_shift_chk:  0
#                  875______Cp0____pkt_sent.enable:   1
#                  875______Cp7____
#                  875ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000c6c1
# 
#                  885[RECEIVER]  Getting Payload
#                  885[RECEIVER]  Payload Contents:  Aluout = 2cbb0000 mem_write_en = 1 mem_data_write_out = 0000dec7
#                  885[RECEIVER]  Payload Obtained
#                  885[DRIVER] Sending in new packet BEGIN
#                  885ns:  [DRIVER] Sending Payload Begin
#                  885ns:  [DRIVER] Sending in new packet END
#                  885ns:  [DRIVER] Number of packets sent =          85
#                  885ns:  [DRIVER] The number of Packets in the Generator Mailbox =          15
#                  885[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  885ns: [CHECKER] Checker Start
# 
# 
#                  885ns:   [CHECKER] Pkt Contents: src1 = 0000fbc7, src2 = 0000dec7, imm = 00003468, 
#                  885ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                  885ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000dec7    mem_GOL = 0000dec7
# 
#                  885ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  885ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000fbc7   & Golden Model = 0000fbc7
# 
#                  885ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003468   & Golden Model = 00003468
# 
#                  885ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  885ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  885ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  885ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  885ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  885ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  885ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  885ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000fbc7  00003468 
#                  885ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                  885______Cp0____opselect_chk:      001
#                  885______Cp0____operation_chk:     010
#                  885______Cp0____enable_arith_chk:  1
#                  885______Cp0____enable_shift_chk:  0
#                  885______Cp0____pkt_sent.enable:   1
#                  885______Cp3____
#                  885ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 2cbb0000   & Golden Model = 02cbb0000
# 
#                  895[RECEIVER]  Getting Payload
#                  895[RECEIVER]  Payload Contents:  Aluout = 0000c75f mem_write_en = 1 mem_data_write_out = 000026fd
#                  895[RECEIVER]  Payload Obtained
#                  895[DRIVER] Sending in new packet BEGIN
#                  895ns:  [DRIVER] Sending Payload Begin
#                  895ns:  [DRIVER] Sending in new packet END
#                  895ns:  [DRIVER] Number of packets sent =          86
#                  895ns:  [DRIVER] The number of Packets in the Generator Mailbox =          14
#                  895[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  895ns: [CHECKER] Checker Start
# 
# 
#                  895ns:   [CHECKER] Pkt Contents: src1 = 0000aad9, src2 = 000026fd, imm = 000006ab, 
#                  895ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  895ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000026fd    mem_GOL = 000026fd
# 
#                  895ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  895ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000aad9   & Golden Model = 0000aad9
# 
#                  895ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000026fd   & Golden Model = 000026fd
# 
#                  895ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  895ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  895ns:   [ASSERT_operation] PASS OPERATION: DUT = 5   & Golden Model = 5
# 
#                  895ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  895ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  895ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  895ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  895ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000aad9  000026fd 
#                  895ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  101(operation) 
#                  895______Cp0____opselect_chk:      001
#                  895______Cp0____operation_chk:     101
#                  895______Cp0____enable_arith_chk:  1
#                  895______Cp0____enable_shift_chk:  0
#                  895______Cp0____pkt_sent.enable:   1
#                  895______Cp6____
#                  895ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000c75f   & Golden Model = 00000c75f
# 
#                  905[RECEIVER]  Getting Payload
#                  905[RECEIVER]  Payload Contents:  Aluout = 0000aefd mem_write_en = 1 mem_data_write_out = 00002139
#                  905[RECEIVER]  Payload Obtained
#                  905[DRIVER] Sending in new packet BEGIN
#                  905ns:  [DRIVER] Sending Payload Begin
#                  905ns:  [DRIVER] Sending in new packet END
#                  905ns:  [DRIVER] Number of packets sent =          87
#                  905ns:  [DRIVER] The number of Packets in the Generator Mailbox =          13
#                  905[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  905ns: [CHECKER] Checker Start
# 
# 
#                  905ns:   [CHECKER] Pkt Contents: src1 = 0000d2c1, src2 = 00002139, imm = 00001d2a, 
#                  905ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                  905ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002139    mem_GOL = 00002139
# 
#                  905ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  905ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000d2c1   & Golden Model = 0000d2c1
# 
#                  905ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001d2a   & Golden Model = 00001d2a
# 
#                  905ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  905ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  905ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  905ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  905ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  905ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  905ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  905ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000d2c1  00001d2a 
#                  905ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  905______Cp0____opselect_chk:      001
#                  905______Cp0____operation_chk:     000
#                  905______Cp0____enable_arith_chk:  1
#                  905______Cp0____enable_shift_chk:  0
#                  905______Cp0____pkt_sent.enable:   1
#                  905______Cp1____
#                  905ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000aefd   & Golden Model = 00000aefd
# 
#                  915[RECEIVER]  Getting Payload
#                  915[RECEIVER]  Payload Contents:  Aluout = 0000efeb mem_write_en = 1 mem_data_write_out = 0000e01c
#                  915[RECEIVER]  Payload Obtained
#                  915[DRIVER] Sending in new packet BEGIN
#                  915ns:  [DRIVER] Sending Payload Begin
#                  915ns:  [DRIVER] Sending in new packet END
#                  915ns:  [DRIVER] Number of packets sent =          88
#                  915ns:  [DRIVER] The number of Packets in the Generator Mailbox =          12
#                  915[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  915ns: [CHECKER] Checker Start
# 
# 
#                  915ns:   [CHECKER] Pkt Contents: src1 = 0000b578, src2 = 0000e01c, imm = 00003797, 
#                  915ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  915ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e01c    mem_GOL = 0000e01c
# 
#                  915ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  915ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b578   & Golden Model = 0000b578
# 
#                  915ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003797   & Golden Model = 00003797
# 
#                  915ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  915ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  915ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  915ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  915ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  915ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  915ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  915ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b578  00003797 
#                  915ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  915______Cp0____opselect_chk:      001
#                  915______Cp0____operation_chk:     011
#                  915______Cp0____enable_arith_chk:  1
#                  915______Cp0____enable_shift_chk:  0
#                  915______Cp0____pkt_sent.enable:   1
#                  915______Cp4____
#                  915ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000efeb   & Golden Model = 00000efeb
# 
#                  925[RECEIVER]  Getting Payload
#                  925[RECEIVER]  Payload Contents:  Aluout = ffffc868 mem_write_en = 1 mem_data_write_out = 0000d296
#                  925[RECEIVER]  Payload Obtained
#                  925[DRIVER] Sending in new packet BEGIN
#                  925ns:  [DRIVER] Sending Payload Begin
#                  925ns:  [DRIVER] Sending in new packet END
#                  925ns:  [DRIVER] Number of packets sent =          89
#                  925ns:  [DRIVER] The number of Packets in the Generator Mailbox =          11
#                  925[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  925ns: [CHECKER] Checker Start
# 
# 
#                  925ns:   [CHECKER] Pkt Contents: src1 = 0000ef89, src2 = 0000d296, imm = 000063e2, 
#                  925ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  925ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d296    mem_GOL = 0000d296
# 
#                  925ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  925ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b578   & Golden Model = 0000b578
# 
#                  925ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00003797   & Golden Model = 00003797
# 
#                  925ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  925ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  925ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  925ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  925ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  925ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  925ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  925ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b578  00003797 
#                  925ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  925______Cp0____opselect_chk:      001
#                  925______Cp0____operation_chk:     011
#                  925______Cp0____enable_arith_chk:  0
#                  925______Cp0____enable_shift_chk:  0
#                  925______Cp0____pkt_sent.enable:   0
#                  925______Cp23____
#                  925ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffc868   & Golden Model = 1ffffc868
# 
#                  935[RECEIVER]  Getting Payload
#                  935[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000300b
#                  935[RECEIVER]  Payload Obtained
#                  935[DRIVER] Sending in new packet BEGIN
#                  935ns:  [DRIVER] Sending Payload Begin
#                  935ns:  [DRIVER] Sending in new packet END
#                  935ns:  [DRIVER] Number of packets sent =          90
#                  935ns:  [DRIVER] The number of Packets in the Generator Mailbox =          10
#                  935[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  935ns: [CHECKER] Checker Start
# 
# 
#                  935ns:   [CHECKER] Pkt Contents: src1 = 0000b127, src2 = 0000300b, imm = 00008894, 
#                  935ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                  935ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000300b    mem_GOL = 0000300b
# 
#                  935ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  935ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  935ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  935ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  935ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  935ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  935ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  935ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  935ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  935ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  935ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  935ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  935______Cp0____opselect_chk:      001
#                  935______Cp0____operation_chk:     110
#                  935______Cp0____enable_arith_chk:  1
#                  935______Cp0____enable_shift_chk:  0
#                  935______Cp0____pkt_sent.enable:   1
#                  935______Cp7____
#                  935ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 1ffffc868
# 
#                  945[RECEIVER]  Getting Payload
#                  945[RECEIVER]  Payload Contents:  Aluout = 0000812c mem_write_en = 1 mem_data_write_out = 0000b83b
#                  945[RECEIVER]  Payload Obtained
#                  945[DRIVER] Sending in new packet BEGIN
#                  945ns:  [DRIVER] Sending Payload Begin
#                  945ns:  [DRIVER] Sending in new packet END
#                  945ns:  [DRIVER] Number of packets sent =          91
#                  945ns:  [DRIVER] The number of Packets in the Generator Mailbox =           9
#                  945[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  945ns: [CHECKER] Checker Start
# 
# 
#                  945ns:   [CHECKER] Pkt Contents: src1 = 0000e454, src2 = 0000b83b, imm = 0000dadf, 
#                  945ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  945ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000b83b    mem_GOL = 0000b83b
# 
#                  945ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  945ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  945ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  945ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  945ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  945ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  945ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  945ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  945ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  945ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  945ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  945ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  945______Cp0____opselect_chk:      001
#                  945______Cp0____operation_chk:     110
#                  945______Cp0____enable_arith_chk:  0
#                  945______Cp0____enable_shift_chk:  0
#                  945______Cp0____pkt_sent.enable:   0
#                  945______Cp23____
#                  945ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000812c   & Golden Model = 00000812c
# 
#                  955[RECEIVER]  Getting Payload
#                  955[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00002efc
#                  955[RECEIVER]  Payload Obtained
#                  955[DRIVER] Sending in new packet BEGIN
#                  955ns:  [DRIVER] Sending Payload Begin
#                  955ns:  [DRIVER] Sending in new packet END
#                  955ns:  [DRIVER] Number of packets sent =          92
#                  955ns:  [DRIVER] The number of Packets in the Generator Mailbox =           8
#                  955[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  955ns: [CHECKER] Checker Start
# 
# 
#                  955ns:   [CHECKER] Pkt Contents: src1 = 000051cd, src2 = 00002efc, imm = 0000d256, 
#                  955ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                  955ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00002efc    mem_GOL = 00002efc
# 
#                  955ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  955ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  955ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  955ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  955ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  955ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  955ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  955ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  955ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  955ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  955ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  955ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  955______Cp0____opselect_chk:      001
#                  955______Cp0____operation_chk:     110
#                  955______Cp0____enable_arith_chk:  0
#                  955______Cp0____enable_shift_chk:  0
#                  955______Cp0____pkt_sent.enable:   0
#                  955______Cp23____
#                  955ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  965[RECEIVER]  Getting Payload
#                  965[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007944
#                  965[RECEIVER]  Payload Obtained
#                  965[DRIVER] Sending in new packet BEGIN
#                  965ns:  [DRIVER] Sending Payload Begin
#                  965ns:  [DRIVER] Sending in new packet END
#                  965ns:  [DRIVER] Number of packets sent =          93
#                  965ns:  [DRIVER] The number of Packets in the Generator Mailbox =           7
#                  965[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  965ns: [CHECKER] Checker Start
# 
# 
#                  965ns:   [CHECKER] Pkt Contents: src1 = 000023c8, src2 = 00007944, imm = 000020cc, 
#                  965ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 011, 
#                  965ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007944    mem_GOL = 00007944
# 
#                  965ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  965ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b127   & Golden Model = 0000b127
# 
#                  965ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000300b   & Golden Model = 0000300b
# 
#                  965ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  965ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  965ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  965ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  965ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  965ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  965ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  965ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b127  0000300b 
#                  965ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  965______Cp0____opselect_chk:      001
#                  965______Cp0____operation_chk:     110
#                  965______Cp0____enable_arith_chk:  0
#                  965______Cp0____enable_shift_chk:  0
#                  965______Cp0____pkt_sent.enable:   0
#                  965______Cp23____
#                  965ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  975[RECEIVER]  Getting Payload
#                  975[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000be00
#                  975[RECEIVER]  Payload Obtained
#                  975[DRIVER] Sending in new packet BEGIN
#                  975ns:  [DRIVER] Sending Payload Begin
#                  975ns:  [DRIVER] Sending in new packet END
#                  975ns:  [DRIVER] Number of packets sent =          94
#                  975ns:  [DRIVER] The number of Packets in the Generator Mailbox =           6
#                  975[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  975ns: [CHECKER] Checker Start
# 
# 
#                  975ns:   [CHECKER] Pkt Contents: src1 = 0000757d, src2 = 0000be00, imm = 0000fe59, 
#                  975ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 110, 
#                  975ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000be00    mem_GOL = 0000be00
# 
#                  975ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  975ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000757d   & Golden Model = 0000757d
# 
#                  975ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000fe59   & Golden Model = 0000fe59
# 
#                  975ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  975ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  975ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                  975ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  975ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  975ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  975ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  975ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000757d  0000fe59 
#                  975ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                  975______Cp0____opselect_chk:      001
#                  975______Cp0____operation_chk:     110
#                  975______Cp0____enable_arith_chk:  1
#                  975______Cp0____enable_shift_chk:  0
#                  975______Cp0____pkt_sent.enable:   1
#                  975______Cp7____
#                  975ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000812c
# 
#                  985[RECEIVER]  Getting Payload
#                  985[RECEIVER]  Payload Contents:  Aluout = 00008b24 mem_write_en = 1 mem_data_write_out = 00009641
#                  985[RECEIVER]  Payload Obtained
#                  985[DRIVER] Sending in new packet BEGIN
#                  985ns:  [DRIVER] Sending Payload Begin
#                  985ns:  [DRIVER] Sending in new packet END
#                  985ns:  [DRIVER] Number of packets sent =          95
#                  985ns:  [DRIVER] The number of Packets in the Generator Mailbox =           5
#                  985[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  985ns: [CHECKER] Checker Start
# 
# 
#                  985ns:   [CHECKER] Pkt Contents: src1 = 00003e50, src2 = 00009641, imm = 0000890d, 
#                  985ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 001, 
#                  985ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00009641    mem_GOL = 00009641
# 
#                  985ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  985ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00003e50   & Golden Model = 00003e50
# 
#                  985ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00009641   & Golden Model = 00009641
# 
#                  985ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  985ns:   [ASSERT_operation] PASS OPERATION: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  985ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  985ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  985ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  985ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00003e50  00009641 
#                  985ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  001(operation) 
#                  985______Cp0____opselect_chk:      001
#                  985______Cp0____operation_chk:     001
#                  985______Cp0____enable_arith_chk:  1
#                  985______Cp0____enable_shift_chk:  0
#                  985______Cp0____pkt_sent.enable:   1
#                  985
#                  985______Cp2____
#                  985ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00008b24   & Golden Model = 000008b24
# 
#                  995[RECEIVER]  Getting Payload
#                  995[RECEIVER]  Payload Contents:  Aluout = ffffd491 mem_write_en = 1 mem_data_write_out = 000035de
#                  995[RECEIVER]  Payload Obtained
#                  995[DRIVER] Sending in new packet BEGIN
#                  995ns:  [DRIVER] Sending Payload Begin
#                  995ns:  [DRIVER] Sending in new packet END
#                  995ns:  [DRIVER] Number of packets sent =          96
#                  995ns:  [DRIVER] The number of Packets in the Generator Mailbox =           4
#                  995[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  995ns: [CHECKER] Checker Start
# 
# 
#                  995ns:   [CHECKER] Pkt Contents: src1 = 00004b86, src2 = 000035de, imm = 00007e50, 
#                  995ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  995ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000035de    mem_GOL = 000035de
# 
#                  995ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  995ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004b86   & Golden Model = 00004b86
# 
#                  995ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007e50   & Golden Model = 00007e50
# 
#                  995ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  995ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  995ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  995ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  995ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  995ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  995ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  995ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004b86  00007e50 
#                  995ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  995______Cp0____opselect_chk:      001
#                  995______Cp0____operation_chk:     100
#                  995______Cp0____enable_arith_chk:  1
#                  995______Cp0____enable_shift_chk:  0
#                  995______Cp0____pkt_sent.enable:   1
#                  995______Cp5____
#                  995ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = ffffd491   & Golden Model = 00000d491
# 
#                 1005[RECEIVER]  Getting Payload
#                 1005[RECEIVER]  Payload Contents:  Aluout = 00004a00 mem_write_en = 1 mem_data_write_out = 000072ae
#                 1005[RECEIVER]  Payload Obtained
#                 1005[DRIVER] Sending in new packet BEGIN
#                 1005ns:  [DRIVER] Sending Payload Begin
#                 1005ns:  [DRIVER] Sending in new packet END
#                 1005ns:  [DRIVER] Number of packets sent =          97
#                 1005ns:  [DRIVER] The number of Packets in the Generator Mailbox =           3
#                 1005[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1005ns: [CHECKER] Checker Start
# 
# 
#                 1005ns:   [CHECKER] Pkt Contents: src1 = 0000c9fb, src2 = 000072ae, imm = 0000b046, 
#                 1005ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                 1005ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 000072ae    mem_GOL = 000072ae
# 
#                 1005ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1005ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c9fb   & Golden Model = 0000c9fb
# 
#                 1005ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000b046   & Golden Model = 0000b046
# 
#                 1005ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1005ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1005ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1005ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1005ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1005ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1005ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1005ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c9fb  0000b046 
#                 1005ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1005______Cp0____opselect_chk:      001
#                 1005______Cp0____operation_chk:     010
#                 1005______Cp0____enable_arith_chk:  1
#                 1005______Cp0____enable_shift_chk:  0
#                 1005______Cp0____pkt_sent.enable:   1
#                 1005______Cp3____
#                 1005ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00004a00   & Golden Model = 000004a00
# 
#                 1015[RECEIVER]  Getting Payload
#                 1015[RECEIVER]  Payload Contents:  Aluout = 000019b5 mem_write_en = 1 mem_data_write_out = 0000d5be
#                 1015[RECEIVER]  Payload Obtained
#                 1015[DRIVER] Sending in new packet BEGIN
#                 1015ns:  [DRIVER] Sending Payload Begin
#                 1015ns:  [DRIVER] Sending in new packet END
#                 1015ns:  [DRIVER] Number of packets sent =          98
#                 1015ns:  [DRIVER] The number of Packets in the Generator Mailbox =           2
#                 1015[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1015ns: [CHECKER] Checker Start
# 
# 
#                 1015ns:   [CHECKER] Pkt Contents: src1 = 0000f8c3, src2 = 0000d5be, imm = 0000b214, 
#                 1015ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                 1015ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d5be    mem_GOL = 0000d5be
# 
#                 1015ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1015ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1015ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1015ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1015ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1015ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1015ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1015ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1015ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1015ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1015ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1015ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1015______Cp0____opselect_chk:      001
#                 1015______Cp0____operation_chk:     111
#                 1015______Cp0____enable_arith_chk:  1
#                 1015______Cp0____enable_shift_chk:  0
#                 1015______Cp0____pkt_sent.enable:   1
#                 1015______Cp7____
#                 1015ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000019b5   & Golden Model = 0000019b5
# 
#                 1025[RECEIVER]  Getting Payload
#                 1025[RECEIVER]  Payload Contents:  Aluout = d5be0000 mem_write_en = 1 mem_data_write_out = 0000105a
#                 1025[RECEIVER]  Payload Obtained
#                 1025[DRIVER] Sending in new packet BEGIN
#                 1025ns:  [DRIVER] Sending Payload Begin
#                 1025ns:  [DRIVER] Sending in new packet END
#                 1025ns:  [DRIVER] Number of packets sent =          99
#                 1025ns:  [DRIVER] The number of Packets in the Generator Mailbox =           1
#                 1025[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1025ns: [CHECKER] Checker Start
# 
# 
#                 1025ns:   [CHECKER] Pkt Contents: src1 = 0000d7fc, src2 = 0000105a, imm = 00004e3d, 
#                 1025ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 000, 
#                 1025ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000105a    mem_GOL = 0000105a
# 
#                 1025ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1025ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1025ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1025ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1025ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1025ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1025ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1025ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1025ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1025ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1025ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1025ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1025______Cp0____opselect_chk:      001
#                 1025______Cp0____operation_chk:     111
#                 1025______Cp0____enable_arith_chk:  0
#                 1025______Cp0____enable_shift_chk:  0
#                 1025______Cp0____pkt_sent.enable:   0
#                 1025______Cp23____
#                 1025ns:   [ASSERT_aluout] PASS ALUOUT: DUT = d5be0000   & Golden Model = 0d5be0000
# 
#                 1035[RECEIVER]  Getting Payload
#                 1035[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00007f8c
#                 1035[RECEIVER]  Payload Obtained
#                 1035[DRIVER] Sending in new packet BEGIN
#                 1035ns:  [DRIVER] Sending Payload Begin
#                 1035ns:  [DRIVER] Sending in new packet END
#                 1035ns:  [DRIVER] Number of packets sent =         100
#                 1035ns:  [DRIVER] The number of Packets in the Generator Mailbox =           0
#                 1035[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1035ns: [CHECKER] Checker Start
# 
# 
#                 1035ns:   [CHECKER] Pkt Contents: src1 = 0000eb5f, src2 = 00007f8c, imm = 0000c5cb, 
#                 1035ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 101, 
#                 1035ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00007f8c    mem_GOL = 00007f8c
# 
#                 1035ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1035ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f8c3   & Golden Model = 0000f8c3
# 
#                 1035ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000d5be   & Golden Model = 0000d5be
# 
#                 1035ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1035ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1035ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                 1035ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1035ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1035ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1035ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1035ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f8c3  0000d5be 
#                 1035ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                 1035______Cp0____opselect_chk:      001
#                 1035______Cp0____operation_chk:     111
#                 1035______Cp0____enable_arith_chk:  0
#                 1035______Cp0____enable_shift_chk:  0
#                 1035______Cp0____pkt_sent.enable:   0
#                 1035______Cp23____
#                 1035ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0d5be0000
# 
#                 1045[RECEIVER]  Getting Payload
#                 1045[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000fa73
#                 1045[RECEIVER]  Payload Obtained
#                 1045[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1045ns: [CHECKER] Checker Start
# 
# 
#                 1045ns:   [CHECKER] Pkt Contents: src1 = 0000f5d5, src2 = 0000fa73, imm = 0000f4e6, 
#                 1045ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 010, 
#                 1045ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000fa73    mem_GOL = 0000fa73
# 
#                 1045ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1045ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f5d5   & Golden Model = 0000f5d5
# 
#                 1045ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000f4e6   & Golden Model = 0000f4e6
# 
#                 1045ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                 1045ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1045ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1045ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1045ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1045ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1045ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                 1045ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f5d5  0000f4e6 
#                 1045ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1045______Cp0____opselect_chk:      001
#                 1045______Cp0____operation_chk:     010
#                 1045______Cp0____enable_arith_chk:  1
#                 1045______Cp0____enable_shift_chk:  0
#                 1045______Cp0____pkt_sent.enable:   1
#                 1045______Cp3____
#                 1045ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0d5be0000
# 
#                 1055[RECEIVER]  Getting Payload
#                 1055[RECEIVER]  Payload Contents:  Aluout = 000000ef mem_write_en = 1 mem_data_write_out = 0000f0b4
#                 1055[RECEIVER]  Payload Obtained
#                 1055[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                 1055ns: [CHECKER] Checker Start
# 
# 
#                 1055ns:   [CHECKER] Pkt Contents: src1 = 00003f6e, src2 = 0000f0b4, imm = 00009182, 
#                 1055ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                 1055ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000f0b4    mem_GOL = 0000f0b4
# 
#                 1055ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                 1055ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f5d5   & Golden Model = 0000f5d5
# 
#                 1055ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000f4e6   & Golden Model = 0000f4e6
# 
#                 1055ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                 1055ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                 1055ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                 1055ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                 1055ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                 1055ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                 1055ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                 1055ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f5d5  0000f4e6 
#                 1055ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  010(operation) 
#                 1055______Cp0____opselect_chk:      001
#                 1055______Cp0____operation_chk:     010
#                 1055______Cp0____enable_arith_chk:  0
#                 1055______Cp0____enable_shift_chk:  0
#                 1055______Cp0____pkt_sent.enable:   0
#                 1055______Cp23____
#                 1055ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000000ef   & Golden Model = 0000000ef
# 
# Number tests : 1100, Pass: 931, Fail: 169
# Accuracy: 84.00%
#                 1065WE ARE DONE .. GO HOME AND SLEEP!!! .. ACTUALLY NOT YET .. 
# ** Note: implicit $finish from program    : /media/kien/data/kien/20241/design_verify_ic/Lab3_16_11/Lab3/Execute.tb.sv(38)
#    Time: 1065 ns  Iteration: 1  Instance: /Execute_test_top/test
# 1
# Simulation stop requested.
# Compile of ALU.vp was successful.
# Compile of Arith_ALU.vp was successful.
# Compile of data_defs.v was successful.
# Compile of Driver.sv was successful.
# Compile of DriverBase.sv was successful.
# Compile of Ex_Preproc.vp was successful.
# Compile of Execute.if.sv was successful.
# Compile of Execute.tb.sv was successful with warnings.
# Compile of Execute.test_top.sv was successful.
# Compile of Generator.sv was successful.
# Compile of OutputPacket.sv was successful.
# Compile of Packet.sv was successful.
# Compile of Receiver.sv was successful.
# Compile of ReceiverBase.sv was successful.
# Compile of Scoreboard.sv was successful with warnings.
# Compile of Shift_ALU.vp was successful.
# Compile of Top.v was successful.
# 17 compiles, 0 failed with no errors.
restart
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# ** Warning: OutputPacket.sv(24): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at OutputPacket.sv(20) for strict LRM compliance.
# ** Warning: ReceiverBase.sv(28): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at ReceiverBase.sv(23) for strict LRM compliance.
# ** Warning: Receiver.sv(11): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at Receiver.sv(7) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'driver_mbox'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'receiver_mbox'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# Loading sv_std.std
# Loading work.Execute_test_top(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
# Loading work.Top(fast)
# Loading work.Ex_Preproc(fast)
# Loading work.ALU(fast)
# Loading work.Arith_ALU(fast)
# Loading work.Shift_ALU(fast)
# Loading work.Execute_tb_sv_unit(fast)
# Loading work.Execute_test(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
run -all
#                    0ns:  [RESET]  Design Reset Start
#                   45ns:  [RESET]  Design Reset End
# [                  45ns] Start test case for : arith_logic
#                   45ns:  [GENERATOR] Generator Started
#                   45ns:  [DRIVER] Driver Started
#                   45[DRIVER] DRIVER Forking of process is finished
#                   45[SCOREBOARD] Scoreboard Started
#                   45[SCOREBOARD] Receiver Mailbox contents =           0
#                   45[SCOREBOARD] Forking of Process Finished
#                   45[RECEIVER]  RECEIVER STARTED
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (arith_logic) len          11 -- b (all_op) len           6
# a (arith_logic) len          11 -- b (arith_logic) len          11
# a (arith_logic) len          11 -- b (only_add) len           8
# a (arith_logic) len          11 -- b (only_hadd) len           9
# a (arith_logic) len          11 -- b (only_sub) len           8
# a (arith_logic) len          11 -- b (only_not) len           8
# a (arith_logic) len          11 -- b (only_and) len           8
# a (arith_logic) len          11 -- b (only_or) len           7
# a (arith_logic) len          11 -- b (only_xor) len           8
# a (arith_logic) len          11 -- b (only_lhg) len           8
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
#                   45ns:  [GENERATOR] Generation Finished Creating          10 Packets  
#                   45[DRIVER] Sending in new packet BEGIN
#                   45ns:  [DRIVER] Sending Payload Begin
#                   45ns:  [DRIVER] Sending in new packet END
#                   45ns:  [DRIVER] Number of packets sent =           1
#                   45ns:  [DRIVER] The number of Packets in the Generator Mailbox =           9
#                   55[RECEIVER] Forking of Process Finished
#                   55[DRIVER] Sending in new packet BEGIN
#                   55ns:  [DRIVER] Sending Payload Begin
#                   55ns:  [DRIVER] Sending in new packet END
#                   55ns:  [DRIVER] Number of packets sent =           2
#                   55ns:  [DRIVER] The number of Packets in the Generator Mailbox =           8
#                   65[RECEIVER]  Getting Payload
#                   65[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001eed
#                   65[RECEIVER]  Payload Obtained
#                   65[DRIVER] Sending in new packet BEGIN
#                   65ns:  [DRIVER] Sending Payload Begin
#                   65ns:  [DRIVER] Sending in new packet END
#                   65ns:  [DRIVER] Number of packets sent =           3
#                   65ns:  [DRIVER] The number of Packets in the Generator Mailbox =           7
#                   65[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   65ns: [CHECKER] Checker Start
# 
# 
#                   65ns:   [CHECKER] Pkt Contents: src1 = 000020b0, src2 = 00001eed, imm = 0000429c, 
#                   65ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 010, 
#                   65ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001eed    mem_GOL = 00001eed
# 
#                   65ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   65ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   65ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   65ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   65ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   65ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   65______Cp0____opselect_chk:      000
#                   65______Cp0____operation_chk:     000
#                   65______Cp0____enable_arith_chk:  0
#                   65______Cp0____enable_shift_chk:  0
#                   65______Cp0____pkt_sent.enable:   0
#                   65______Cp23____
#                   65ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   75[RECEIVER]  Getting Payload
#                   75[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d866
#                   75[RECEIVER]  Payload Obtained
#                   75[DRIVER] Sending in new packet BEGIN
#                   75ns:  [DRIVER] Sending Payload Begin
#                   75ns:  [DRIVER] Sending in new packet END
#                   75ns:  [DRIVER] Number of packets sent =           4
#                   75ns:  [DRIVER] The number of Packets in the Generator Mailbox =           6
#                   75[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   75ns: [CHECKER] Checker Start
# 
# 
#                   75ns:   [CHECKER] Pkt Contents: src1 = 0000efe1, src2 = 0000d866, imm = 0000d1e4, 
#                   75ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 111, 
#                   75ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d866    mem_GOL = 0000d866
# 
#                   75ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   75ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   75ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   75ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   75ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   75ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   75______Cp0____opselect_chk:      000
#                   75______Cp0____operation_chk:     000
#                   75______Cp0____enable_arith_chk:  0
#                   75______Cp0____enable_shift_chk:  0
#                   75______Cp0____pkt_sent.enable:   0
#                   75______Cp23____
#                   75ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   85[RECEIVER]  Getting Payload
#                   85[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001dc0
#                   85[RECEIVER]  Payload Obtained
#                   85[DRIVER] Sending in new packet BEGIN
#                   85ns:  [DRIVER] Sending Payload Begin
#                   85ns:  [DRIVER] Sending in new packet END
#                   85ns:  [DRIVER] Number of packets sent =           5
#                   85ns:  [DRIVER] The number of Packets in the Generator Mailbox =           5
#                   85[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   85ns: [CHECKER] Checker Start
# 
# 
#                   85ns:   [CHECKER] Pkt Contents: src1 = 0000b08a, src2 = 00001dc0, imm = 00002342, 
#                   85ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 110, 
#                   85ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001dc0    mem_GOL = 00001dc0
# 
#                   85ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   85ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   85ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001dc0   & Golden Model = 00001dc0
# 
#                   85ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   85ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                   85ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   85ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   85ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                   85ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  00001dc0 
#                   85ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                   85______Cp0____opselect_chk:      001
#                   85______Cp0____operation_chk:     110
#                   85______Cp0____enable_arith_chk:  1
#                   85______Cp0____enable_shift_chk:  0
#                   85______Cp0____pkt_sent.enable:   1
#                   85______Cp7____
#                   85ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   95[RECEIVER]  Getting Payload
#                   95[RECEIVER]  Payload Contents:  Aluout = 0000ad4a mem_write_en = 1 mem_data_write_out = 0000726e
#                   95[RECEIVER]  Payload Obtained
#                   95[DRIVER] Sending in new packet BEGIN
#                   95ns:  [DRIVER] Sending Payload Begin
#                   95ns:  [DRIVER] Sending in new packet END
#                   95ns:  [DRIVER] Number of packets sent =           6
#                   95ns:  [DRIVER] The number of Packets in the Generator Mailbox =           4
#                   95[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   95ns: [CHECKER] Checker Start
# 
# 
#                   95ns:   [CHECKER] Pkt Contents: src1 = 00002ead, src2 = 0000726e, imm = 000087fe, 
#                   95ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 001, 
#                   95ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000726e    mem_GOL = 0000726e
# 
#                   95ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   95ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   95ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00001dc0   & Golden Model = 00001dc0
# 
#                   95ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_operation] PASS OPERATION: DUT = 6   & Golden Model = 6
# 
#                   95ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                   95ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   95ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   95ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   95ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  00001dc0 
#                   95ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  110(operation) 
#                   95______Cp0____opselect_chk:      001
#                   95______Cp0____operation_chk:     110
#                   95______Cp0____enable_arith_chk:  0
#                   95______Cp0____enable_shift_chk:  0
#                   95______Cp0____pkt_sent.enable:   0
#                   95______Cp23____
#                   95ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000ad4a   & Golden Model = 00000ad4a
# 
#                  105[RECEIVER]  Getting Payload
#                  105[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000c3de
#                  105[RECEIVER]  Payload Obtained
#                  105[DRIVER] Sending in new packet BEGIN
#                  105ns:  [DRIVER] Sending Payload Begin
#                  105ns:  [DRIVER] Sending in new packet END
#                  105ns:  [DRIVER] Number of packets sent =           7
#                  105ns:  [DRIVER] The number of Packets in the Generator Mailbox =           3
#                  105[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  105ns: [CHECKER] Checker Start
# 
# 
#                  105ns:   [CHECKER] Pkt Contents: src1 = 00009c52, src2 = 0000c3de, imm = 00000742, 
#                  105ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 000, 
#                  105ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000c3de    mem_GOL = 0000c3de
# 
#                  105ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  105ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  105ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000c3de   & Golden Model = 0000c3de
# 
#                  105ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  105ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  105ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  105ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  0000c3de 
#                  105ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  105______Cp0____opselect_chk:      001
#                  105______Cp0____operation_chk:     000
#                  105______Cp0____enable_arith_chk:  1
#                  105______Cp0____enable_shift_chk:  0
#                  105______Cp0____pkt_sent.enable:   1
#                  105______Cp1____
#                  105ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 00000ad4a
# 
#                  115[RECEIVER]  Getting Payload
#                  115[RECEIVER]  Payload Contents:  Aluout = 00016030 mem_write_en = 1 mem_data_write_out = 00005c33
#                  115[RECEIVER]  Payload Obtained
#                  115[DRIVER] Sending in new packet BEGIN
#                  115ns:  [DRIVER] Sending Payload Begin
#                  115ns:  [DRIVER] Sending in new packet END
#                  115ns:  [DRIVER] Number of packets sent =           8
#                  115ns:  [DRIVER] The number of Packets in the Generator Mailbox =           2
#                  115[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  115ns: [CHECKER] Checker Start
# 
# 
#                  115ns:   [CHECKER] Pkt Contents: src1 = 0000c7ba, src2 = 00005c33, imm = 000035f9, 
#                  115ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 0, operation = 101, 
#                  115ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005c33    mem_GOL = 00005c33
# 
#                  115ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  115ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  115ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000c3de   & Golden Model = 0000c3de
# 
#                  115ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  115ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  115ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  115ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  115ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  0000c3de 
#                  115ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  000(operation) 
#                  115______Cp0____opselect_chk:      001
#                  115______Cp0____operation_chk:     000
#                  115______Cp0____enable_arith_chk:  0
#                  115______Cp0____enable_shift_chk:  0
#                  115______Cp0____pkt_sent.enable:   0
#                  115______Cp23____
#                  115ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00016030   & Golden Model = 000016030
# 
#                  125[RECEIVER]  Getting Payload
#                  125[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d01b
#                  125[RECEIVER]  Payload Obtained
#                  125[DRIVER] Sending in new packet BEGIN
#                  125ns:  [DRIVER] Sending Payload Begin
#                  125ns:  [DRIVER] Sending in new packet END
#                  125ns:  [DRIVER] Number of packets sent =           9
#                  125ns:  [DRIVER] The number of Packets in the Generator Mailbox =           1
#                  125[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  125ns: [CHECKER] Checker Start
# 
# 
#                  125ns:   [CHECKER] Pkt Contents: src1 = 0000f92e, src2 = 0000d01b, imm = 000029f2, 
#                  125ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  125ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d01b    mem_GOL = 0000d01b
# 
#                  125ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  125ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f92e   & Golden Model = 0000f92e
# 
#                  125ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000029f2   & Golden Model = 000029f2
# 
#                  125ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  125ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  125ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  125ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  125ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  125ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f92e  000029f2 
#                  125ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  125______Cp0____opselect_chk:      001
#                  125______Cp0____operation_chk:     100
#                  125______Cp0____enable_arith_chk:  1
#                  125______Cp0____enable_shift_chk:  0
#                  125______Cp0____pkt_sent.enable:   1
#                  125______Cp5____
#                  125ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 000016030
# 
#                  135[RECEIVER]  Getting Payload
#                  135[RECEIVER]  Payload Contents:  Aluout = 00002922 mem_write_en = 1 mem_data_write_out = 0000e9ec
#                  135[RECEIVER]  Payload Obtained
#                  135[DRIVER] Sending in new packet BEGIN
#                  135ns:  [DRIVER] Sending Payload Begin
#                  135ns:  [DRIVER] Sending in new packet END
#                  135ns:  [DRIVER] Number of packets sent =          10
#                  135ns:  [DRIVER] The number of Packets in the Generator Mailbox =           0
#                  135[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  135ns: [CHECKER] Checker Start
# 
# 
#                  135ns:   [CHECKER] Pkt Contents: src1 = 00004170, src2 = 0000e9ec, imm = 000015ae, 
#                  135ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 011, 
#                  135ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e9ec    mem_GOL = 0000e9ec
# 
#                  135ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  135ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004170   & Golden Model = 00004170
# 
#                  135ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000015ae   & Golden Model = 000015ae
# 
#                  135ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  135ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  135ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  135ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  135ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  135ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004170  000015ae 
#                  135ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  011(operation) 
#                  135______Cp0____opselect_chk:      001
#                  135______Cp0____operation_chk:     011
#                  135______Cp0____enable_arith_chk:  1
#                  135______Cp0____enable_shift_chk:  0
#                  135______Cp0____pkt_sent.enable:   1
#                  135______Cp4____
#                  135ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00002922   & Golden Model = 000002922
# 
#                  145[RECEIVER]  Getting Payload
#                  145[RECEIVER]  Payload Contents:  Aluout = ffffea51 mem_write_en = 1 mem_data_write_out = 0000ec65
#                  145[RECEIVER]  Payload Obtained
#                  145[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  145ns: [CHECKER] Checker Start
# 
# 
#                  145ns:   [CHECKER] Pkt Contents: src1 = 0000c030, src2 = 0000ec65, imm = 00007567, 
#                  145ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 100, 
#                  145ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ec65    mem_GOL = 0000ec65
# 
#                  145ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  145ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c030   & Golden Model = 0000c030
# 
#                  145ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00007567   & Golden Model = 00007567
# 
#                  145ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  145ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  145ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  145ns:   [ASSERT_carry_flag] FAIL CARRY_FLAG: DUT = 0       & Golden Model = 1
# 
#                  145ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  145ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c030  00007567 
#                  145ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  100(operation) 
#                  145______Cp0____opselect_chk:      001
#                  145______Cp0____operation_chk:     100
#                  145______Cp0____enable_arith_chk:  1
#                  145______Cp0____enable_shift_chk:  0
#                  145______Cp0____pkt_sent.enable:   1
#                  145______Cp5____
#                  145ns:   [ASSERT_aluout] PASS ALUOUT: DUT = ffffea51   & Golden Model = 1ffffea51
# 
#                  155[RECEIVER]  Getting Payload
#                  155[RECEIVER]  Payload Contents:  Aluout = 00004020 mem_write_en = 1 mem_data_write_out = 0000e400
#                  155[RECEIVER]  Payload Obtained
#                  155[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  155ns: [CHECKER] Checker Start
# 
# 
#                  155ns:   [CHECKER] Pkt Contents: src1 = 00000ef0, src2 = 0000e400, imm = 0000ba65, 
#                  155ns:   [CHECKER] Pkt Contents: opselect = 001, immp_regn = 1, operation = 111, 
#                  155ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e400    mem_GOL = 0000e400
# 
#                  155ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  155ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000ef0   & Golden Model = 00000ef0
# 
#                  155ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000ba65   & Golden Model = 0000ba65
# 
#                  155ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  155ns:   [ASSERT_operation] PASS OPERATION: DUT = 7   & Golden Model = 7
# 
#                  155ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  155ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  155ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  155ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000ef0  0000ba65 
#                  155ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 001(opselect)  111(operation) 
#                  155______Cp0____opselect_chk:      001
#                  155______Cp0____operation_chk:     111
#                  155______Cp0____enable_arith_chk:  1
#                  155______Cp0____enable_shift_chk:  0
#                  155______Cp0____pkt_sent.enable:   1
#                  155______Cp7____
#                  155ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00004020   & Golden Model = 000004020
# 
# Number tests : 110, Pass: 97, Fail: 13
# Accuracy: 88.00%
#                  165WE ARE DONE .. GO HOME AND SLEEP!!! .. ACTUALLY NOT YET .. 
# ** Note: implicit $finish from program    : /media/kien/data/kien/20241/design_verify_ic/Lab3_16_11/Lab3/Execute.tb.sv(38)
#    Time: 165 ns  Iteration: 1  Instance: /Execute_test_top/test
# 1
# Simulation stop requested.
# Compile of ALU.vp was successful.
# Compile of Arith_ALU.vp was successful.
# Compile of data_defs.v was successful.
# Compile of Driver.sv was successful.
# Compile of DriverBase.sv was successful.
# Compile of Ex_Preproc.vp was successful.
# Compile of Execute.if.sv was successful.
# Compile of Execute.tb.sv was successful with warnings.
# Compile of Execute.test_top.sv was successful.
# Compile of Generator.sv was successful.
# Compile of OutputPacket.sv was successful.
# Compile of Packet.sv was successful.
# Compile of Receiver.sv was successful.
# Compile of ReceiverBase.sv was successful.
# Compile of Scoreboard.sv was successful with warnings.
# Compile of Shift_ALU.vp was successful.
# Compile of Top.v was successful.
# 17 compiles, 0 failed with no errors.
restart
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# ** Warning: OutputPacket.sv(24): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at OutputPacket.sv(20) for strict LRM compliance.
# ** Warning: ReceiverBase.sv(28): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at ReceiverBase.sv(23) for strict LRM compliance.
# ** Warning: Receiver.sv(11): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at Receiver.sv(7) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'name'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'driver_mbox'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# ** Warning: Scoreboard.sv(43): (vopt-2217) No default specified for 'receiver_mbox'.  Default must match the value specified in class at Scoreboard.sv(35) for strict LRM compliance.
# Loading sv_std.std
# Loading work.Execute_test_top(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
# Loading work.Top(fast)
# Loading work.Ex_Preproc(fast)
# Loading work.ALU(fast)
# Loading work.Arith_ALU(fast)
# Loading work.Shift_ALU(fast)
# Loading work.Execute_tb_sv_unit(fast)
# Loading work.Execute_test(fast)
# Loading work.Execute_io(fast)
# Loading work.DUT_probe_if(fast)
run -all
#                    0ns:  [RESET]  Design Reset Start
#                   45ns:  [RESET]  Design Reset End
# [                  45ns] Start test case for : mem_read
#                   45ns:  [GENERATOR] Generator Started
#                   45ns:  [DRIVER] Driver Started
#                   45[DRIVER] DRIVER Forking of process is finished
#                   45[SCOREBOARD] Scoreboard Started
#                   45[SCOREBOARD] Receiver Mailbox contents =           0
#                   45[SCOREBOARD] Forking of Process Finished
#                   45[RECEIVER]  RECEIVER STARTED
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
# a (mem_read) len           8 -- b (all_op) len           6
# a (mem_read) len           8 -- b (arith_logic) len          11
# a (mem_read) len           8 -- b (shift_reg) len           9
# a (mem_read) len           8 -- b (mem_read) len           8
# a (mem_read) len           8 -- b (only_loadbyte) len          13
# a (mem_read) len           8 -- b (only_loadbyteu) len          14
# a (mem_read) len           8 -- b (only_loadhalf) len          13
# a (mem_read) len           8 -- b (only_loadhalfu) len          14
# a (mem_read) len           8 -- b (only_loadword) len          13
#                   45 [GENERATOR] Packet Generation done .. Now to put it in Driver mailbox
#                   45ns:  [GENERATOR] Generation Finished Creating          10 Packets  
#                   45[DRIVER] Sending in new packet BEGIN
#                   45ns:  [DRIVER] Sending Payload Begin
#                   45ns:  [DRIVER] Sending in new packet END
#                   45ns:  [DRIVER] Number of packets sent =           1
#                   45ns:  [DRIVER] The number of Packets in the Generator Mailbox =           9
#                   55[RECEIVER] Forking of Process Finished
#                   55[DRIVER] Sending in new packet BEGIN
#                   55ns:  [DRIVER] Sending Payload Begin
#                   55ns:  [DRIVER] Sending in new packet END
#                   55ns:  [DRIVER] Number of packets sent =           2
#                   55ns:  [DRIVER] The number of Packets in the Generator Mailbox =           8
#                   65[RECEIVER]  Getting Payload
#                   65[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001eed
#                   65[RECEIVER]  Payload Obtained
#                   65[DRIVER] Sending in new packet BEGIN
#                   65ns:  [DRIVER] Sending Payload Begin
#                   65ns:  [DRIVER] Sending in new packet END
#                   65ns:  [DRIVER] Number of packets sent =           3
#                   65ns:  [DRIVER] The number of Packets in the Generator Mailbox =           7
#                   65[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   65ns: [CHECKER] Checker Start
# 
# 
#                   65ns:   [CHECKER] Pkt Contents: src1 = 000020b0, src2 = 00001eed, imm = 0000429c, 
#                   65ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 010, 
#                   65ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001eed    mem_GOL = 00001eed
# 
#                   65ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   65ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   65ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   65ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   65ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   65ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   65ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   65ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   65______Cp0____opselect_chk:      000
#                   65______Cp0____operation_chk:     000
#                   65______Cp0____enable_arith_chk:  0
#                   65______Cp0____enable_shift_chk:  0
#                   65______Cp0____pkt_sent.enable:   0
#                   65______Cp23____
#                   65ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   75[RECEIVER]  Getting Payload
#                   75[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d866
#                   75[RECEIVER]  Payload Obtained
#                   75[DRIVER] Sending in new packet BEGIN
#                   75ns:  [DRIVER] Sending Payload Begin
#                   75ns:  [DRIVER] Sending in new packet END
#                   75ns:  [DRIVER] Number of packets sent =           4
#                   75ns:  [DRIVER] The number of Packets in the Generator Mailbox =           6
#                   75[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   75ns: [CHECKER] Checker Start
# 
# 
#                   75ns:   [CHECKER] Pkt Contents: src1 = 0000efe1, src2 = 0000d866, imm = 0000d1e4, 
#                   75ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 001, 
#                   75ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d866    mem_GOL = 0000d866
# 
#                   75ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   75ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00000000   & Golden Model = 00000000
# 
#                   75ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 0   & Golden Model = 0
# 
#                   75ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   75ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   75ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   75ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000000  00000000 
#                   75ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 000(opselect)  000(operation) 
#                   75______Cp0____opselect_chk:      000
#                   75______Cp0____operation_chk:     000
#                   75______Cp0____enable_arith_chk:  0
#                   75______Cp0____enable_shift_chk:  0
#                   75______Cp0____pkt_sent.enable:   0
#                   75______Cp23____
#                   75ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   85[RECEIVER]  Getting Payload
#                   85[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 00001dc0
#                   85[RECEIVER]  Payload Obtained
#                   85[DRIVER] Sending in new packet BEGIN
#                   85ns:  [DRIVER] Sending Payload Begin
#                   85ns:  [DRIVER] Sending in new packet END
#                   85ns:  [DRIVER] Number of packets sent =           5
#                   85ns:  [DRIVER] The number of Packets in the Generator Mailbox =           5
#                   85[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   85ns: [CHECKER] Checker Start
# 
# 
#                   85ns:   [CHECKER] Pkt Contents: src1 = 0000b08a, src2 = 00001dc0, imm = 00002342, 
#                   85ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 011, 
#                   85ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00001dc0    mem_GOL = 00001dc0
# 
#                   85ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   85ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   85ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000033b6   & Golden Model = 000033b6
# 
#                   85ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                   85ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   85ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                   85ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 5   & Golden Model = 5
# 
#                   85ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   85ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   85ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                   85ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  000033b6 
#                   85ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 101(opselect)  011(operation) 
#                   85______Cp0____opselect_chk:      101
#                   85______Cp0____operation_chk:     011
#                   85______Cp0____enable_arith_chk:  1
#                   85______Cp0____enable_shift_chk:  0
#                   85______Cp0____pkt_sent.enable:   1
#                   85______Cp16____
#                   85ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00000000   & Golden Model = 000000000
# 
#                   95[RECEIVER]  Getting Payload
#                   95[RECEIVER]  Payload Contents:  Aluout = 000033b6 mem_write_en = 1 mem_data_write_out = 0000726e
#                   95[RECEIVER]  Payload Obtained
#                   95[DRIVER] Sending in new packet BEGIN
#                   95ns:  [DRIVER] Sending Payload Begin
#                   95ns:  [DRIVER] Sending in new packet END
#                   95ns:  [DRIVER] Number of packets sent =           6
#                   95ns:  [DRIVER] The number of Packets in the Generator Mailbox =           4
#                   95[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                   95ns: [CHECKER] Checker Start
# 
# 
#                   95ns:   [CHECKER] Pkt Contents: src1 = 00002ead, src2 = 0000726e, imm = 000087fe, 
#                   95ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 100, 
#                   95ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000726e    mem_GOL = 0000726e
# 
#                   95ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                   95ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000b08a   & Golden Model = 0000b08a
# 
#                   95ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000033b6   & Golden Model = 000033b6
# 
#                   95ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                   95ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                   95ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 5   & Golden Model = 5
# 
#                   95ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                   95ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                   95ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                   95ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000b08a  000033b6 
#                   95ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 101(opselect)  011(operation) 
#                   95______Cp0____opselect_chk:      101
#                   95______Cp0____operation_chk:     011
#                   95______Cp0____enable_arith_chk:  0
#                   95______Cp0____enable_shift_chk:  0
#                   95______Cp0____pkt_sent.enable:   0
#                   95______Cp23____
#                   95ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000033b6   & Golden Model = 0000033b6
# 
#                  105[RECEIVER]  Getting Payload
#                  105[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000c3de
#                  105[RECEIVER]  Payload Obtained
#                  105[DRIVER] Sending in new packet BEGIN
#                  105ns:  [DRIVER] Sending Payload Begin
#                  105ns:  [DRIVER] Sending in new packet END
#                  105ns:  [DRIVER] Number of packets sent =           7
#                  105ns:  [DRIVER] The number of Packets in the Generator Mailbox =           3
#                  105[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  105ns: [CHECKER] Checker Start
# 
# 
#                  105ns:   [CHECKER] Pkt Contents: src1 = 00009c52, src2 = 0000c3de, imm = 00000742, 
#                  105ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 000, 
#                  105ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000c3de    mem_GOL = 0000c3de
# 
#                  105ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  105ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  105ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000093fd   & Golden Model = 000093fd
# 
#                  105ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  105ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  105ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 5   & Golden Model = 5
# 
#                  105ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  105ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  105ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  105ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  000093fd 
#                  105ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 101(opselect)  000(operation) 
#                  105______Cp0____opselect_chk:      101
#                  105______Cp0____operation_chk:     000
#                  105______Cp0____enable_arith_chk:  1
#                  105______Cp0____enable_shift_chk:  0
#                  105______Cp0____pkt_sent.enable:   1
#                  105______Cp8____
#                  105______Cp10____
#                  105ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0000033b6
# 
#                  115[RECEIVER]  Getting Payload
#                  115[RECEIVER]  Payload Contents:  Aluout = fffffffd mem_write_en = 1 mem_data_write_out = 00005c33
#                  115[RECEIVER]  Payload Obtained
#                  115[DRIVER] Sending in new packet BEGIN
#                  115ns:  [DRIVER] Sending Payload Begin
#                  115ns:  [DRIVER] Sending in new packet END
#                  115ns:  [DRIVER] Number of packets sent =           8
#                  115ns:  [DRIVER] The number of Packets in the Generator Mailbox =           2
#                  115[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  115ns: [CHECKER] Checker Start
# 
# 
#                  115ns:   [CHECKER] Pkt Contents: src1 = 0000c7ba, src2 = 00005c33, imm = 000035f9, 
#                  115ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 001, 
#                  115ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 00005c33    mem_GOL = 00005c33
# 
#                  115ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  115ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00009c52   & Golden Model = 00009c52
# 
#                  115ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000093fd   & Golden Model = 000093fd
# 
#                  115ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  115ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 5   & Golden Model = 5
# 
#                  115ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  115ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  115ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 0
#                  115ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00009c52  000093fd 
#                  115ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 101(opselect)  000(operation) 
#                  115______Cp0____opselect_chk:      101
#                  115______Cp0____operation_chk:     000
#                  115______Cp0____enable_arith_chk:  0
#                  115______Cp0____enable_shift_chk:  0
#                  115______Cp0____pkt_sent.enable:   0
#                  115______Cp23____
#                  115ns:   [ASSERT_aluout] PASS ALUOUT: DUT = fffffffd   & Golden Model = 0fffffffd
# 
#                  125[RECEIVER]  Getting Payload
#                  125[RECEIVER]  Payload Contents:  Aluout = 00000000 mem_write_en = 1 mem_data_write_out = 0000d01b
#                  125[RECEIVER]  Payload Obtained
#                  125[DRIVER] Sending in new packet BEGIN
#                  125ns:  [DRIVER] Sending Payload Begin
#                  125ns:  [DRIVER] Sending in new packet END
#                  125ns:  [DRIVER] Number of packets sent =           9
#                  125ns:  [DRIVER] The number of Packets in the Generator Mailbox =           1
#                  125[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  125ns: [CHECKER] Checker Start
# 
# 
#                  125ns:   [CHECKER] Pkt Contents: src1 = 0000f92e, src2 = 0000d01b, imm = 000029f2, 
#                  125ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 000, 
#                  125ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000d01b    mem_GOL = 0000d01b
# 
#                  125ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  125ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000f92e   & Golden Model = 0000f92e
# 
#                  125ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00006b7b   & Golden Model = 00006b7b
# 
#                  125ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  125ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  125ns:   [ASSERT_operation] PASS OPERATION: DUT = 0   & Golden Model = 0
# 
#                  125ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 5   & Golden Model = 5
# 
#                  125ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  125ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  125ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  125ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000f92e  00006b7b 
#                  125ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 101(opselect)  000(operation) 
#                  125______Cp0____opselect_chk:      101
#                  125______Cp0____operation_chk:     000
#                  125______Cp0____enable_arith_chk:  1
#                  125______Cp0____enable_shift_chk:  0
#                  125______Cp0____pkt_sent.enable:   1
#                  125______Cp8____
#                  125______Cp9____
#                  125ns:   [ASSERT_aluout] FAIL ALUOUT: DUT = 00000000   & Golden Model = 0fffffffd
# 
#                  135[RECEIVER]  Getting Payload
#                  135[RECEIVER]  Payload Contents:  Aluout = 0000007b mem_write_en = 1 mem_data_write_out = 0000e9ec
#                  135[RECEIVER]  Payload Obtained
#                  135[DRIVER] Sending in new packet BEGIN
#                  135ns:  [DRIVER] Sending Payload Begin
#                  135ns:  [DRIVER] Sending in new packet END
#                  135ns:  [DRIVER] Number of packets sent =          10
#                  135ns:  [DRIVER] The number of Packets in the Generator Mailbox =           0
#                  135[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  135ns: [CHECKER] Checker Start
# 
# 
#                  135ns:   [CHECKER] Pkt Contents: src1 = 00004170, src2 = 0000e9ec, imm = 000015ae, 
#                  135ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 100, 
#                  135ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e9ec    mem_GOL = 0000e9ec
# 
#                  135ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  135ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00004170   & Golden Model = 00004170
# 
#                  135ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 000014eb   & Golden Model = 000014eb
# 
#                  135ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  135ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  135ns:   [ASSERT_operation] PASS OPERATION: DUT = 4   & Golden Model = 4
# 
#                  135ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 5   & Golden Model = 5
# 
#                  135ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  135ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  135ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  135ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00004170  000014eb 
#                  135ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 101(opselect)  100(operation) 
#                  135______Cp0____opselect_chk:      101
#                  135______Cp0____operation_chk:     100
#                  135______Cp0____enable_arith_chk:  1
#                  135______Cp0____enable_shift_chk:  0
#                  135______Cp0____pkt_sent.enable:   1
#                  135______Cp11____
#                  135ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 0000007b   & Golden Model = 00000007b
# 
#                  145[RECEIVER]  Getting Payload
#                  145[RECEIVER]  Payload Contents:  Aluout = 000000eb mem_write_en = 1 mem_data_write_out = 0000ec65
#                  145[RECEIVER]  Payload Obtained
#                  145[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  145ns: [CHECKER] Checker Start
# 
# 
#                  145ns:   [CHECKER] Pkt Contents: src1 = 0000c030, src2 = 0000ec65, imm = 00007567, 
#                  145ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 011, 
#                  145ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000ec65    mem_GOL = 0000ec65
# 
#                  145ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  145ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 0000c030   & Golden Model = 0000c030
# 
#                  145ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 00008f97   & Golden Model = 00008f97
# 
#                  145ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  145ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  145ns:   [ASSERT_operation] PASS OPERATION: DUT = 3   & Golden Model = 3
# 
#                  145ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 5   & Golden Model = 5
# 
#                  145ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  145ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  145ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  145ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 0000c030  00008f97 
#                  145ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 101(opselect)  011(operation) 
#                  145______Cp0____opselect_chk:      101
#                  145______Cp0____operation_chk:     011
#                  145______Cp0____enable_arith_chk:  1
#                  145______Cp0____enable_shift_chk:  0
#                  145______Cp0____pkt_sent.enable:   1
#                  145______Cp16____
#                  145ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 000000eb   & Golden Model = 0000000eb
# 
#                  155[RECEIVER]  Getting Payload
#                  155[RECEIVER]  Payload Contents:  Aluout = 00008f97 mem_write_en = 1 mem_data_write_out = 0000e400
#                  155[RECEIVER]  Payload Obtained
#                  155[SCOREBOARD] Grabbing Data From both Driver and Receiver
#                  155ns: [CHECKER] Checker Start
# 
# 
#                  155ns:   [CHECKER] Pkt Contents: src1 = 00000ef0, src2 = 0000e400, imm = 0000ba65, 
#                  155ns:   [CHECKER] Pkt Contents: opselect = 101, immp_regn = 1, operation = 010, 
#                  155ns: [ASSERT_mem_data_write_out] MEM_WRITE PASS mem_DUT = 0000e400    mem_GOL = 0000e400
# 
#                  155ns: [ASSERT_mem_write_en] MEM_EN FAIL mem_DUT = 1    mem_GOL = 0
# 
#                  155ns:   [ASSERT_aluin1] PASS ALUIN1: DUT = 00000ef0   & Golden Model = 00000ef0
# 
#                  155ns:   [ASSERT_aluin2] PASS ALUIN2: DUT = 0000459d   & Golden Model = 0000459d
# 
#                  155ns:   [ASSERT_enable_arith] PASS ENABLE_ARITH: DUT = 1   & Golden Model = 1
# 
#                  155ns:   [ASSERT_enable_shift] PASS ENABLE_SHIFT: DUT = 0   & Golden Model = 0
# 
#                  155ns:   [ASSERT_operation] PASS OPERATION: DUT = 2   & Golden Model = 2
# 
#                  155ns:   [ASSERT_opselect] PASS OPSELECT: DUT = 5   & Golden Model = 5
# 
#                  155ns:   [ASSERT_shift_number] PASS SHIFT_NUMBER: DUT = 00   & Golden Model = 00
# 
#                  155ns:   [ASSERT_carry_flag] PASS CARRY_FLAG: DUT = 0       & Golden Model = 0
# 
#                  155ns:  	[CHECK_ARITH] Golden Incoming Arithmetic enable = 1
#                  155ns:  	[CHECK_ARITH] Golden Incoming ALUIN = 00000ef0  0000459d 
#                  155ns:  	[CHECK_ARITH] Golden Incoming CONTROL = 101(opselect)  010(operation) 
#                  155______Cp0____opselect_chk:      101
#                  155______Cp0____operation_chk:     010
#                  155______Cp0____enable_arith_chk:  1
#                  155______Cp0____enable_shift_chk:  0
#                  155______Cp0____pkt_sent.enable:   1
#                  155______Cp17____
#                  155ns:   [ASSERT_aluout] PASS ALUOUT: DUT = 00008f97   & Golden Model = 000008f97
# 
# Number tests : 110, Pass: 98, Fail: 12
# Accuracy: 89.00%
#                  165WE ARE DONE .. GO HOME AND SLEEP!!! .. ACTUALLY NOT YET .. 
# ** Note: implicit $finish from program    : /media/kien/data/kien/20241/design_verify_ic/Lab3_16_11/Lab3/Execute.tb.sv(38)
#    Time: 165 ns  Iteration: 1  Instance: /Execute_test_top/test
# 1
# Simulation stop requested.
# End time: 14:50:41 on Nov 16,2024, Elapsed time: 3:09:28
# Errors: 0, Warnings: 0
